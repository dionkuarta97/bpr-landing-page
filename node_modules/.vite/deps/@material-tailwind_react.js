import {
  require_react_dom
} from "./chunk-DRKGOPBG.js";
import {
  require_SelectContext,
  require_SelectOption,
  require_cjs as require_cjs2
} from "./chunk-RDW43QTS.js";
import {
  require_Typography,
  require_findMatch
} from "./chunk-GISCGQ5R.js";
import {
  require_alert,
  require_avatar,
  require_badge,
  require_button,
  require_card,
  require_checkbox,
  require_chip,
  require_cjs,
  require_classnames,
  require_dialog,
  require_dist,
  require_generic,
  require_input,
  require_navbar,
  require_objectsToString,
  require_progress,
  require_prop_types,
  require_rating,
  require_select,
  require_slider,
  require_spinner,
  require_theme,
  require_theme2,
  require_timeline
} from "./chunk-YK3CUNCF.js";
import {
  require_react
} from "./chunk-Q554TORF.js";
import {
  __commonJS,
  __esm,
  __export,
  __toCommonJS,
  __toESM
} from "./chunk-4B2QHNJT.js";

// node_modules/@material-tailwind/react/types/components/accordion.js
var require_accordion = __commonJS({
  "node_modules/@material-tailwind/react/types/components/accordion.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function _export(target, all) {
      for (var name in all) Object.defineProperty(target, name, { enumerable: true, get: all[name] });
    }
    _export(exports, { propTypesOpen: function() {
      return propTypesOpen;
    }, propTypesIcon: function() {
      return propTypesIcon;
    }, propTypesAnimate: function() {
      return propTypesAnimate;
    }, propTypesDisabled: function() {
      return propTypesDisabled;
    }, propTypesClassName: function() {
      return propTypesClassName;
    }, propTypesValue: function() {
      return propTypesValue;
    }, propTypesChildren: function() {
      return propTypesChildren;
    } });
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _generic = require_generic();
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var propTypesOpen = _propTypes.default.bool.isRequired;
    var propTypesIcon = _propTypes.default.node;
    var propTypesAnimate = _generic.propTypesAnimation;
    var propTypesDisabled = _propTypes.default.bool;
    var propTypesClassName = _propTypes.default.string;
    var propTypesValue = _propTypes.default.instanceOf(Object).isRequired;
    var propTypesChildren = _propTypes.default.node.isRequired;
  }
});

// node_modules/@material-tailwind/react/components/Accordion/AccordionContext.js
var require_AccordionContext = __commonJS({
  "node_modules/@material-tailwind/react/components/Accordion/AccordionContext.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function _export(target, all) {
      for (var name in all) Object.defineProperty(target, name, { enumerable: true, get: all[name] });
    }
    _export(exports, { AccordionContext: function() {
      return AccordionContext;
    }, useAccordion: function() {
      return useAccordion;
    }, AccordionContextProvider: function() {
      return AccordionContextProvider;
    } });
    var _react = _interopRequireDefault(require_react());
    var _accordion = require_accordion();
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var AccordionContext = _react.default.createContext(null);
    AccordionContext.displayName = "MaterialTailwind.AccordionContext";
    function useAccordion() {
      var context = _react.default.useContext(AccordionContext);
      if (!context) {
        throw new Error("useAccordion() must be used within an Accordion. It happens when you use AccordionHeader or AccordionBody components outside the Accordion component.");
      }
      return context;
    }
    var AccordionContextProvider = function(param) {
      var value = param.value, children = param.children;
      return _react.default.createElement(AccordionContext.Provider, { value }, children);
    };
    AccordionContextProvider.propTypes = { value: _accordion.propTypesValue, children: _accordion.propTypesChildren };
    AccordionContextProvider.displayName = "MaterialTailwind.AccordionContextProvider";
  }
});

// node_modules/@material-tailwind/react/components/Accordion/AccordionHeader.js
var require_AccordionHeader = __commonJS({
  "node_modules/@material-tailwind/react/components/Accordion/AccordionHeader.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function _export(target, all) {
      for (var name in all) Object.defineProperty(target, name, { enumerable: true, get: all[name] });
    }
    _export(exports, { AccordionHeader: function() {
      return AccordionHeader;
    }, default: function() {
      return _default;
    } });
    var _react = _interopRequireDefault(require_react());
    var _classnames = _interopRequireDefault(require_classnames());
    var _tailwindMerge = require_dist();
    var _objectsToString = _interopRequireDefault(require_objectsToString());
    var _accordionContext = require_AccordionContext();
    var _theme = require_theme2();
    var _accordion = require_accordion();
    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function _extends2() {
      _extends2 = Object.assign || function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends2.apply(this, arguments);
    }
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _objectWithoutProperties(source, excluded) {
      if (source == null) return {};
      var target = _objectWithoutPropertiesLoose(source, excluded);
      var key, i;
      if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for (i = 0; i < sourceSymbolKeys.length; i++) {
          key = sourceSymbolKeys[i];
          if (excluded.indexOf(key) >= 0) continue;
          if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
          target[key] = source[key];
        }
      }
      return target;
    }
    function _objectWithoutPropertiesLoose(source, excluded) {
      if (source == null) return {};
      var target = {};
      var sourceKeys = Object.keys(source);
      var key, i;
      for (i = 0; i < sourceKeys.length; i++) {
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
      }
      return target;
    }
    var AccordionHeader = _react.default.forwardRef(function(_param, ref) {
      var className = _param.className, children = _param.children, rest = _objectWithoutProperties(_param, ["className", "children"]);
      var _useAccordion = (0, _accordionContext.useAccordion)(), open = _useAccordion.open, icon = _useAccordion.icon, disabled = _useAccordion.disabled;
      var accordion = (0, _theme.useTheme)().accordion;
      var base = accordion.styles.base;
      className = className !== null && className !== void 0 ? className : "";
      var buttonStyles = (0, _tailwindMerge.twMerge)((0, _classnames.default)((0, _objectsToString.default)(base.header.initial), _defineProperty({}, (0, _objectsToString.default)(base.header.active), open)), className);
      var iconClasses = (0, _classnames.default)((0, _objectsToString.default)(base.header.icon));
      return _react.default.createElement("button", _extends2({}, rest, { ref, type: "button", disabled, className: buttonStyles }), children, _react.default.createElement("span", { className: iconClasses }, icon !== null && icon !== void 0 ? icon : open ? _react.default.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 20 20", fill: "currentColor" }, _react.default.createElement("path", { fillRule: "evenodd", d: "M5 10a1 1 0 011-1h8a1 1 0 110 2H6a1 1 0 01-1-1z", clipRule: "evenodd" })) : _react.default.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 20 20", fill: "currentColor" }, _react.default.createElement("path", { fillRule: "evenodd", d: "M10 5a1 1 0 011 1v3h3a1 1 0 110 2h-3v3a1 1 0 11-2 0v-3H6a1 1 0 110-2h3V6a1 1 0 011-1z", clipRule: "evenodd" }))));
    });
    AccordionHeader.propTypes = { className: _accordion.propTypesClassName, children: _accordion.propTypesChildren };
    AccordionHeader.displayName = "MaterialTailwind.AccordionHeader";
    var _default = AccordionHeader;
  }
});

// node_modules/@material-tailwind/react/components/Accordion/AccordionBody.js
var require_AccordionBody = __commonJS({
  "node_modules/@material-tailwind/react/components/Accordion/AccordionBody.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function _export(target, all) {
      for (var name in all) Object.defineProperty(target, name, { enumerable: true, get: all[name] });
    }
    _export(exports, { AccordionBody: function() {
      return AccordionBody;
    }, default: function() {
      return _default;
    } });
    var _react = _interopRequireDefault(require_react());
    var _framerMotion = require_cjs2();
    var _classnames = _interopRequireDefault(require_classnames());
    var _deepmerge = _interopRequireDefault(require_cjs());
    var _objectsToString = _interopRequireDefault(require_objectsToString());
    var _tailwindMerge = require_dist();
    var _accordionContext = require_AccordionContext();
    var _theme = require_theme2();
    var _accordion = require_accordion();
    function _extends2() {
      _extends2 = Object.assign || function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends2.apply(this, arguments);
    }
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _objectWithoutProperties(source, excluded) {
      if (source == null) return {};
      var target = _objectWithoutPropertiesLoose(source, excluded);
      var key, i;
      if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for (i = 0; i < sourceSymbolKeys.length; i++) {
          key = sourceSymbolKeys[i];
          if (excluded.indexOf(key) >= 0) continue;
          if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
          target[key] = source[key];
        }
      }
      return target;
    }
    function _objectWithoutPropertiesLoose(source, excluded) {
      if (source == null) return {};
      var target = {};
      var sourceKeys = Object.keys(source);
      var key, i;
      for (i = 0; i < sourceKeys.length; i++) {
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
      }
      return target;
    }
    var AccordionBody = _react.default.forwardRef(function(_param, ref) {
      var className = _param.className, children = _param.children, rest = _objectWithoutProperties(_param, ["className", "children"]);
      var _useAccordion = (0, _accordionContext.useAccordion)(), open = _useAccordion.open, animate = _useAccordion.animate;
      var accordion = (0, _theme.useTheme)().accordion;
      var base = accordion.styles.base;
      className = className !== null && className !== void 0 ? className : "";
      var bodyClasses = (0, _tailwindMerge.twMerge)((0, _classnames.default)((0, _objectsToString.default)(base.body)), className);
      var heightAnimation = { unmount: { height: "0px", transition: { duration: 0.2, times: [0.4, 0, 0.2, 1] } }, mount: { height: "auto", transition: { duration: 0.2, times: [0.4, 0, 0.2, 1] } } };
      var mainAnimation = { unmount: { transition: { duration: 0.3, ease: "linear" } }, mount: { transition: { duration: 0.3, ease: "linear" } } };
      var appliedAnimation = (0, _deepmerge.default)(mainAnimation, animate);
      return _react.default.createElement(_framerMotion.LazyMotion, { features: _framerMotion.domAnimation }, _react.default.createElement(_framerMotion.m.div, { className: "overflow-hidden", initial: "unmount", exit: "unmount", animate: open ? "mount" : "unmount", variants: heightAnimation }, _react.default.createElement(_framerMotion.m.div, _extends2({}, rest, { ref, className: bodyClasses, initial: "unmount", exit: "unmount", animate: open ? "mount" : "unmount", variants: appliedAnimation }), children)));
    });
    AccordionBody.propTypes = { className: _accordion.propTypesClassName, children: _accordion.propTypesChildren };
    AccordionBody.displayName = "MaterialTailwind.AccordionBody";
    var _default = AccordionBody;
  }
});

// node_modules/@material-tailwind/react/components/Accordion/index.js
var require_Accordion = __commonJS({
  "node_modules/@material-tailwind/react/components/Accordion/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function _export(target, all) {
      for (var name in all) Object.defineProperty(target, name, { enumerable: true, get: all[name] });
    }
    _export(exports, { Accordion: function() {
      return Accordion;
    }, AccordionHeader: function() {
      return _accordionHeader.AccordionHeader;
    }, AccordionBody: function() {
      return _accordionBody.AccordionBody;
    }, useAccordion: function() {
      return _accordionContext.useAccordion;
    }, default: function() {
      return _default;
    } });
    var _react = _interopRequireDefault(require_react());
    var _classnames = _interopRequireDefault(require_classnames());
    var _tailwindMerge = require_dist();
    var _objectsToString = _interopRequireDefault(require_objectsToString());
    var _theme = require_theme2();
    var _accordionContext = require_AccordionContext();
    var _accordion = require_accordion();
    var _accordionHeader = require_AccordionHeader();
    var _accordionBody = require_AccordionBody();
    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function _extends2() {
      _extends2 = Object.assign || function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends2.apply(this, arguments);
    }
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _objectWithoutProperties(source, excluded) {
      if (source == null) return {};
      var target = _objectWithoutPropertiesLoose(source, excluded);
      var key, i;
      if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for (i = 0; i < sourceSymbolKeys.length; i++) {
          key = sourceSymbolKeys[i];
          if (excluded.indexOf(key) >= 0) continue;
          if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
          target[key] = source[key];
        }
      }
      return target;
    }
    function _objectWithoutPropertiesLoose(source, excluded) {
      if (source == null) return {};
      var target = {};
      var sourceKeys = Object.keys(source);
      var key, i;
      for (i = 0; i < sourceKeys.length; i++) {
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
      }
      return target;
    }
    var Accordion = _react.default.forwardRef(function(_param, ref) {
      var open = _param.open, icon = _param.icon, animate = _param.animate, className = _param.className, disabled = _param.disabled, children = _param.children, rest = _objectWithoutProperties(_param, ["open", "icon", "animate", "className", "disabled", "children"]);
      var accordion = (0, _theme.useTheme)().accordion;
      var defaultProps = accordion.defaultProps, base = accordion.styles.base;
      icon = icon !== null && icon !== void 0 ? icon : defaultProps.icon;
      animate = animate !== null && animate !== void 0 ? animate : defaultProps.animate;
      className = className !== null && className !== void 0 ? className : defaultProps.className;
      disabled = disabled !== null && disabled !== void 0 ? disabled : defaultProps.disabled;
      var accordionClasses = (0, _tailwindMerge.twMerge)((0, _classnames.default)((0, _objectsToString.default)(base.container), _defineProperty({}, (0, _objectsToString.default)(base.disabled), disabled)), className);
      var contextValue = _react.default.useMemo(function() {
        return { open, icon, animate, disabled };
      }, [open, icon, animate, disabled]);
      return _react.default.createElement(_accordionContext.AccordionContextProvider, { value: contextValue }, _react.default.createElement("div", _extends2({}, rest, { ref, className: accordionClasses }), children));
    });
    Accordion.propTypes = { open: _accordion.propTypesOpen, icon: _accordion.propTypesIcon, animate: _accordion.propTypesAnimate, disabled: _accordion.propTypesDisabled, className: _accordion.propTypesClassName, children: _accordion.propTypesChildren };
    Accordion.displayName = "MaterialTailwind.Accordion";
    var _default = Object.assign(Accordion, { Header: _accordionHeader.AccordionHeader, Body: _accordionBody.AccordionBody });
  }
});

// node_modules/material-ripple-effects/index.js
var require_material_ripple_effects = __commonJS({
  "node_modules/material-ripple-effects/index.js"(exports, module) {
    module.exports = class Ripple {
      constructor() {
        this.x = 0;
        this.y = 0;
        this.z = 0;
      }
      findFurthestPoint(clickPointX, elementWidth, offsetX, clickPointY, elementHeight, offsetY) {
        this.x = clickPointX - offsetX > elementWidth / 2 ? 0 : elementWidth;
        this.y = clickPointY - offsetY > elementHeight / 2 ? 0 : elementHeight;
        this.z = Math.hypot(
          this.x - (clickPointX - offsetX),
          this.y - (clickPointY - offsetY)
        );
        return this.z;
      }
      appyStyles(element, color, rect, radius, event) {
        element.classList.add("ripple");
        element.style.backgroundColor = color === "dark" ? "rgba(0,0,0, 0.2)" : "rgba(255,255,255, 0.3)";
        element.style.borderRadius = "50%";
        element.style.pointerEvents = "none";
        element.style.position = "absolute";
        element.style.left = event.clientX - rect.left - radius + "px";
        element.style.top = event.clientY - rect.top - radius + "px";
        element.style.width = element.style.height = radius * 2 + "px";
      }
      applyAnimation(element) {
        element.animate(
          [
            {
              transform: "scale(0)",
              opacity: 1
            },
            {
              transform: "scale(1.5)",
              opacity: 0
            }
          ],
          {
            duration: 500,
            easing: "linear"
          }
        );
      }
      create(event, color) {
        const element = event.currentTarget;
        element.style.position = "relative";
        element.style.overflow = "hidden";
        const rect = element.getBoundingClientRect();
        const radius = this.findFurthestPoint(
          event.clientX,
          element.offsetWidth,
          rect.left,
          event.clientY,
          element.offsetHeight,
          rect.top
        );
        const circle = document.createElement("span");
        this.appyStyles(circle, color, rect, radius, event);
        this.applyAnimation(circle);
        element.appendChild(circle);
        setTimeout(() => circle.remove(), 500);
      }
    };
  }
});

// node_modules/@material-tailwind/react/components/IconButton/index.js
var require_IconButton = __commonJS({
  "node_modules/@material-tailwind/react/components/IconButton/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function _export(target, all) {
      for (var name in all) Object.defineProperty(target, name, { enumerable: true, get: all[name] });
    }
    _export(exports, { IconButton: function() {
      return IconButton;
    }, default: function() {
      return _default;
    } });
    var _react = _interopRequireDefault(require_react());
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _materialRippleEffects = _interopRequireDefault(require_material_ripple_effects());
    var _classnames = _interopRequireDefault(require_classnames());
    var _tailwindMerge = require_dist();
    var _findMatch = _interopRequireDefault(require_findMatch());
    var _objectsToString = _interopRequireDefault(require_objectsToString());
    var _theme = require_theme2();
    var _button = require_button();
    function _extends2() {
      _extends2 = Object.assign || function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends2.apply(this, arguments);
    }
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _objectWithoutProperties(source, excluded) {
      if (source == null) return {};
      var target = _objectWithoutPropertiesLoose(source, excluded);
      var key, i;
      if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for (i = 0; i < sourceSymbolKeys.length; i++) {
          key = sourceSymbolKeys[i];
          if (excluded.indexOf(key) >= 0) continue;
          if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
          target[key] = source[key];
        }
      }
      return target;
    }
    function _objectWithoutPropertiesLoose(source, excluded) {
      if (source == null) return {};
      var target = {};
      var sourceKeys = Object.keys(source);
      var key, i;
      for (i = 0; i < sourceKeys.length; i++) {
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
      }
      return target;
    }
    var IconButton = _react.default.forwardRef(function(_param, ref) {
      var variant = _param.variant, size3 = _param.size, color = _param.color, ripple = _param.ripple, className = _param.className, children = _param.children, fullWidth = _param.fullWidth, rest = _objectWithoutProperties(_param, ["variant", "size", "color", "ripple", "className", "children", "fullWidth"]);
      var iconButton = (0, _theme.useTheme)().iconButton;
      var valid = iconButton.valid, defaultProps = iconButton.defaultProps, styles = iconButton.styles;
      var base = styles.base, variants = styles.variants, sizes = styles.sizes;
      variant = variant !== null && variant !== void 0 ? variant : defaultProps.variant;
      size3 = size3 !== null && size3 !== void 0 ? size3 : defaultProps.size;
      color = color !== null && color !== void 0 ? color : defaultProps.color;
      ripple = ripple !== null && ripple !== void 0 ? ripple : defaultProps.ripple;
      className = className !== null && className !== void 0 ? className : defaultProps.className;
      var rippleEffect = ripple !== void 0 && new _materialRippleEffects.default();
      var buttonBase = (0, _objectsToString.default)(base);
      var buttonVariant = (0, _objectsToString.default)(variants[(0, _findMatch.default)(valid.variants, variant, "filled")][(0, _findMatch.default)(valid.colors, color, "gray")]);
      var buttonSize = (0, _objectsToString.default)(sizes[(0, _findMatch.default)(valid.sizes, size3, "md")]);
      var classes = (0, _tailwindMerge.twMerge)((0, _classnames.default)(buttonBase, buttonSize, buttonVariant), className);
      return _react.default.createElement("button", _extends2({}, rest, { ref, className: classes, type: rest.type || "button", onMouseDown: function(e) {
        var onMouseDown = rest === null || rest === void 0 ? void 0 : rest.onMouseDown;
        if (ripple) {
          rippleEffect.create(e, (variant === "filled" || variant === "gradient") && color !== "white" ? "light" : "dark");
        }
        return typeof onMouseDown === "function" && onMouseDown(e);
      } }), _react.default.createElement("span", { className: "absolute top-1/2 left-1/2 transform -translate-y-1/2 -translate-x-1/2" }, children));
    });
    IconButton.propTypes = { variant: _propTypes.default.oneOf(_button.propTypesVariant), size: _propTypes.default.oneOf(_button.propTypesSize), color: _propTypes.default.oneOf(_button.propTypesColor), ripple: _button.propTypesRipple, className: _button.propTypesClassName, children: _button.propTypesChildren };
    IconButton.displayName = "MaterialTailwind.IconButton";
    var _default = IconButton;
  }
});

// node_modules/@material-tailwind/react/components/Alert/index.js
var require_Alert = __commonJS({
  "node_modules/@material-tailwind/react/components/Alert/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function _export(target, all) {
      for (var name in all) Object.defineProperty(target, name, { enumerable: true, get: all[name] });
    }
    _export(exports, { Alert: function() {
      return Alert;
    }, default: function() {
      return _default;
    } });
    var _react = _interopRequireDefault(require_react());
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _framerMotion = require_cjs2();
    var _classnames = _interopRequireDefault(require_classnames());
    var _deepmerge = _interopRequireDefault(require_cjs());
    var _tailwindMerge = require_dist();
    var _findMatch = _interopRequireDefault(require_findMatch());
    var _objectsToString = _interopRequireDefault(require_objectsToString());
    var _theme = require_theme2();
    var _alert = require_alert();
    var _iconButton = _interopRequireDefault(require_IconButton());
    function _extends2() {
      _extends2 = Object.assign || function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends2.apply(this, arguments);
    }
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _objectWithoutProperties(source, excluded) {
      if (source == null) return {};
      var target = _objectWithoutPropertiesLoose(source, excluded);
      var key, i;
      if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for (i = 0; i < sourceSymbolKeys.length; i++) {
          key = sourceSymbolKeys[i];
          if (excluded.indexOf(key) >= 0) continue;
          if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
          target[key] = source[key];
        }
      }
      return target;
    }
    function _objectWithoutPropertiesLoose(source, excluded) {
      if (source == null) return {};
      var target = {};
      var sourceKeys = Object.keys(source);
      var key, i;
      for (i = 0; i < sourceKeys.length; i++) {
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
      }
      return target;
    }
    var Alert = _react.default.forwardRef(function(_param, ref) {
      var variant = _param.variant, color = _param.color, icon = _param.icon, open = _param.open, action = _param.action, onClose = _param.onClose, animate = _param.animate, className = _param.className, children = _param.children, rest = _objectWithoutProperties(_param, ["variant", "color", "icon", "open", "action", "onClose", "animate", "className", "children"]);
      var alert = (0, _theme.useTheme)().alert;
      var defaultProps = alert.defaultProps, valid = alert.valid, styles = alert.styles;
      var base = styles.base, variants = styles.variants;
      variant = variant !== null && variant !== void 0 ? variant : defaultProps.variant;
      color = color !== null && color !== void 0 ? color : defaultProps.color;
      className = className !== null && className !== void 0 ? className : defaultProps.className;
      animate = animate !== null && animate !== void 0 ? animate : defaultProps.animate;
      open = open !== null && open !== void 0 ? open : defaultProps.open;
      action = action !== null && action !== void 0 ? action : defaultProps.action;
      onClose = onClose !== null && onClose !== void 0 ? onClose : defaultProps.onClose;
      var alertBase = (0, _objectsToString.default)(base.alert);
      var alertAction = (0, _objectsToString.default)(base.action);
      var alertVariant = (0, _objectsToString.default)(variants[(0, _findMatch.default)(valid.variants, variant, "filled")][(0, _findMatch.default)(valid.colors, color, "gray")]);
      var classes = (0, _tailwindMerge.twMerge)((0, _classnames.default)(alertBase, alertVariant), className);
      var actionClasses = (0, _classnames.default)(alertAction);
      var mainAnimation = { unmount: { opacity: 0 }, mount: { opacity: 1 } };
      var appliedAnimation = (0, _deepmerge.default)(mainAnimation, animate);
      var iconTemplate = _react.default.createElement("div", { className: "shrink-0" }, icon);
      var NewAnimatePresence = _framerMotion.AnimatePresence;
      return _react.default.createElement(_framerMotion.LazyMotion, { features: _framerMotion.domAnimation }, _react.default.createElement(NewAnimatePresence, null, open && _react.default.createElement(_framerMotion.m.div, _extends2({}, rest, { ref, role: "alert", className: "".concat(classes, " flex"), initial: "unmount", exit: "unmount", animate: open ? "mount" : "unmount", variants: appliedAnimation }), icon && iconTemplate, _react.default.createElement("div", { className: "".concat(icon ? "ml-3" : "", " mr-12") }, children), onClose && !action && _react.default.createElement(_iconButton.default, { onClick: onClose, size: "sm", variant: "text", color: variant === "outlined" || variant === "ghost" ? color : "white", className: actionClasses }, _react.default.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", stroke: "currentColor", className: "h-6 w-6", strokeWidth: 2 }, _react.default.createElement("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M6 18L18 6M6 6l12 12" }))), action || null)));
    });
    Alert.propTypes = { variant: _propTypes.default.oneOf(_alert.propTypesVariant), color: _propTypes.default.oneOf(_alert.propTypesColor), icon: _alert.propTypesIcon, open: _alert.propTypesOpen, action: _alert.propTypesAction, onClose: _alert.propTypesOnClose, animate: _alert.propTypesAnimate, className: _alert.propTypesClassName, children: _alert.propTypesChildren };
    Alert.displayName = "MaterialTailwind.Alert";
    var _default = Alert;
  }
});

// node_modules/@material-tailwind/react/components/Avatar/index.js
var require_Avatar = __commonJS({
  "node_modules/@material-tailwind/react/components/Avatar/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function _export(target, all) {
      for (var name in all) Object.defineProperty(target, name, { enumerable: true, get: all[name] });
    }
    _export(exports, { Avatar: function() {
      return Avatar;
    }, default: function() {
      return _default;
    } });
    var _react = _interopRequireDefault(require_react());
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _classnames = _interopRequireDefault(require_classnames());
    var _tailwindMerge = require_dist();
    var _findMatch = _interopRequireDefault(require_findMatch());
    var _objectsToString = _interopRequireDefault(require_objectsToString());
    var _theme = require_theme2();
    var _avatar = require_avatar();
    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function _extends2() {
      _extends2 = Object.assign || function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends2.apply(this, arguments);
    }
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _objectWithoutProperties(source, excluded) {
      if (source == null) return {};
      var target = _objectWithoutPropertiesLoose(source, excluded);
      var key, i;
      if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for (i = 0; i < sourceSymbolKeys.length; i++) {
          key = sourceSymbolKeys[i];
          if (excluded.indexOf(key) >= 0) continue;
          if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
          target[key] = source[key];
        }
      }
      return target;
    }
    function _objectWithoutPropertiesLoose(source, excluded) {
      if (source == null) return {};
      var target = {};
      var sourceKeys = Object.keys(source);
      var key, i;
      for (i = 0; i < sourceKeys.length; i++) {
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
      }
      return target;
    }
    var Avatar = _react.default.forwardRef(function(_param, ref) {
      var variant = _param.variant, size3 = _param.size, className = _param.className, color = _param.color, withBorder = _param.withBorder, rest = _objectWithoutProperties(_param, ["variant", "size", "className", "color", "withBorder"]);
      var avatar = (0, _theme.useTheme)().avatar;
      var valid = avatar.valid, defaultProps = avatar.defaultProps, styles = avatar.styles;
      var base = styles.base, variants = styles.variants, sizes = styles.sizes, borderColor = styles.borderColor;
      variant = variant !== null && variant !== void 0 ? variant : defaultProps.variant;
      size3 = size3 !== null && size3 !== void 0 ? size3 : defaultProps.size;
      className = className !== null && className !== void 0 ? className : defaultProps.className;
      withBorder = withBorder !== null && withBorder !== void 0 ? withBorder : defaultProps.withBorder;
      color = color !== null && color !== void 0 ? color : defaultProps.color;
      var avatarVariant = (0, _objectsToString.default)(variants[(0, _findMatch.default)(valid.variants, variant, "rounded")]);
      var avatarSize = (0, _objectsToString.default)(sizes[(0, _findMatch.default)(valid.sizes, size3, "md")]);
      var avatarBorderColor = (0, _objectsToString.default)(borderColor[(0, _findMatch.default)(valid.colors, color, "gray")]);
      var _obj;
      var classes = (0, _tailwindMerge.twMerge)((0, _classnames.default)((0, _objectsToString.default)(base.initial), avatarVariant, avatarSize, (_obj = {}, _defineProperty(_obj, (0, _objectsToString.default)(base.withBorder), withBorder), _defineProperty(_obj, avatarBorderColor, withBorder), _obj)), className);
      return _react.default.createElement("img", _extends2({}, rest, { ref, className: classes }));
    });
    Avatar.propTypes = { variant: _propTypes.default.oneOf(_avatar.propTypesVariant), size: _propTypes.default.oneOf(_avatar.propTypesSize), className: _avatar.propTypesClassName, withBorder: _avatar.propTypesWithBorder, color: _propTypes.default.oneOf(_avatar.propTypesColor) };
    Avatar.displayName = "MaterialTailwind.Avatar";
    var _default = Avatar;
  }
});

// node_modules/@material-tailwind/react/types/components/breadcrumbs.js
var require_breadcrumbs = __commonJS({
  "node_modules/@material-tailwind/react/types/components/breadcrumbs.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function _export(target, all) {
      for (var name in all) Object.defineProperty(target, name, { enumerable: true, get: all[name] });
    }
    _export(exports, { propTypesSeparator: function() {
      return propTypesSeparator;
    }, propTypesFullWidth: function() {
      return propTypesFullWidth;
    }, propTypesClassName: function() {
      return propTypesClassName;
    }, propTypesChildren: function() {
      return propTypesChildren;
    } });
    var _propTypes = _interopRequireDefault(require_prop_types());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var propTypesSeparator = _propTypes.default.node;
    var propTypesFullWidth = _propTypes.default.bool;
    var propTypesClassName = _propTypes.default.string;
    var propTypesChildren = _propTypes.default.node.isRequired;
  }
});

// node_modules/@material-tailwind/react/components/Breadcrumbs/index.js
var require_Breadcrumbs = __commonJS({
  "node_modules/@material-tailwind/react/components/Breadcrumbs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function _export(target, all) {
      for (var name in all) Object.defineProperty(target, name, { enumerable: true, get: all[name] });
    }
    _export(exports, { Breadcrumbs: function() {
      return Breadcrumbs;
    }, default: function() {
      return _default;
    } });
    var _react = _interopRequireWildcard(require_react());
    var _classnames = _interopRequireDefault(require_classnames());
    var _tailwindMerge = require_dist();
    var _objectsToString = _interopRequireDefault(require_objectsToString());
    var _theme = require_theme2();
    var _breadcrumbs = require_breadcrumbs();
    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function _extends2() {
      _extends2 = Object.assign || function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends2.apply(this, arguments);
    }
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
      var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
      return (_getRequireWildcardCache = function(nodeInterop2) {
        return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }
    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    function _objectWithoutProperties(source, excluded) {
      if (source == null) return {};
      var target = _objectWithoutPropertiesLoose(source, excluded);
      var key, i;
      if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for (i = 0; i < sourceSymbolKeys.length; i++) {
          key = sourceSymbolKeys[i];
          if (excluded.indexOf(key) >= 0) continue;
          if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
          target[key] = source[key];
        }
      }
      return target;
    }
    function _objectWithoutPropertiesLoose(source, excluded) {
      if (source == null) return {};
      var target = {};
      var sourceKeys = Object.keys(source);
      var key, i;
      for (i = 0; i < sourceKeys.length; i++) {
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
      }
      return target;
    }
    var Breadcrumbs = (0, _react.forwardRef)(function(_param, ref) {
      var separator = _param.separator, fullWidth = _param.fullWidth, className = _param.className, children = _param.children, rest = _objectWithoutProperties(_param, ["separator", "fullWidth", "className", "children"]);
      var breadcrumbs = (0, _theme.useTheme)().breadcrumbs;
      var defaultProps = breadcrumbs.defaultProps, base = breadcrumbs.styles.base;
      separator = separator !== null && separator !== void 0 ? separator : defaultProps.separator;
      fullWidth = fullWidth !== null && fullWidth !== void 0 ? fullWidth : defaultProps.fullWidth;
      className = className !== null && className !== void 0 ? className : defaultProps.className;
      var breadcrumbsRootClasses = (0, _classnames.default)((0, _objectsToString.default)(base.root.initial), _defineProperty({}, (0, _objectsToString.default)(base.root.fullWidth), fullWidth));
      var breadcrumbsListClasses = (0, _tailwindMerge.twMerge)((0, _classnames.default)((0, _objectsToString.default)(base.list)), className);
      var breadcrumbsItemClasses = (0, _classnames.default)((0, _objectsToString.default)(base.item.initial));
      var breadcrumbsSeparatorClasses = (0, _classnames.default)((0, _objectsToString.default)(base.separator));
      return _react.default.createElement("nav", { "aria-label": "breadcrumb", className: breadcrumbsRootClasses }, _react.default.createElement("ol", _extends2({}, rest, { ref, className: breadcrumbsListClasses }), _react.Children.map(children, function(child, index3) {
        if ((0, _react.isValidElement)(child)) {
          var _child_props;
          return _react.default.createElement("li", { className: (0, _classnames.default)(breadcrumbsItemClasses, _defineProperty({}, (0, _objectsToString.default)(base.item.disabled), child === null || child === void 0 ? void 0 : (_child_props = child.props) === null || _child_props === void 0 ? void 0 : _child_props.disabled)) }, child, index3 !== _react.Children.count(children) - 1 && _react.default.createElement("span", { className: breadcrumbsSeparatorClasses }, separator));
        }
        return null;
      })));
    });
    Breadcrumbs.propTypes = { separator: _breadcrumbs.propTypesSeparator, fullWidth: _breadcrumbs.propTypesFullWidth, className: _breadcrumbs.propTypesClassName, children: _breadcrumbs.propTypesChildren };
    Breadcrumbs.displayName = "MaterialTailwind.Breadcrumbs";
    var _default = Breadcrumbs;
  }
});

// node_modules/@material-tailwind/react/components/Spinner/index.js
var require_Spinner = __commonJS({
  "node_modules/@material-tailwind/react/components/Spinner/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function _export(target, all) {
      for (var name in all) Object.defineProperty(target, name, { enumerable: true, get: all[name] });
    }
    _export(exports, { Spinner: function() {
      return Spinner;
    }, default: function() {
      return _default;
    } });
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _react = _interopRequireWildcard(require_react());
    var _classnames = _interopRequireDefault(require_classnames());
    var _tailwindMerge = require_dist();
    var _findMatch = _interopRequireDefault(require_findMatch());
    var _objectsToString = _interopRequireDefault(require_objectsToString());
    var _theme = require_theme2();
    var _spinner = require_spinner();
    function _extends2() {
      _extends2 = Object.assign || function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends2.apply(this, arguments);
    }
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
      var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
      return (_getRequireWildcardCache = function(nodeInterop2) {
        return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }
    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    function _objectWithoutProperties(source, excluded) {
      if (source == null) return {};
      var target = _objectWithoutPropertiesLoose(source, excluded);
      var key, i;
      if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for (i = 0; i < sourceSymbolKeys.length; i++) {
          key = sourceSymbolKeys[i];
          if (excluded.indexOf(key) >= 0) continue;
          if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
          target[key] = source[key];
        }
      }
      return target;
    }
    function _objectWithoutPropertiesLoose(source, excluded) {
      if (source == null) return {};
      var target = {};
      var sourceKeys = Object.keys(source);
      var key, i;
      for (i = 0; i < sourceKeys.length; i++) {
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
      }
      return target;
    }
    var Spinner = (0, _react.forwardRef)(function(_param, ref) {
      var color = _param.color, className = _param.className, rest = _objectWithoutProperties(_param, ["color", "className"]);
      var spinner = (0, _theme.useTheme)().spinner;
      var defaultProps = spinner.defaultProps, valid = spinner.valid, _spinner_styles = spinner.styles, base = _spinner_styles.base, colors = _spinner_styles.colors;
      color = color !== null && color !== void 0 ? color : defaultProps.color;
      var _classnames1;
      className = (_classnames1 = (0, _classnames.default)(defaultProps.className, className)) !== null && _classnames1 !== void 0 ? _classnames1 : defaultProps.className;
      var spinnerColor = (0, _objectsToString.default)(colors[(0, _findMatch.default)(valid.colors, color, "gray")]);
      var spinnerClasses = (0, _tailwindMerge.twMerge)((0, _classnames.default)((0, _objectsToString.default)(base)), className);
      var _rest_width, _rest_height;
      return _react.default.createElement("svg", _extends2({}, rest, { ref, className: spinnerClasses, viewBox: "0 0 64 64", fill: "none", xmlns: "http://www.w3.org/2000/svg", width: (_rest_width = rest === null || rest === void 0 ? void 0 : rest.width) !== null && _rest_width !== void 0 ? _rest_width : 24, height: (_rest_height = rest === null || rest === void 0 ? void 0 : rest.height) !== null && _rest_height !== void 0 ? _rest_height : 24 }), _react.default.createElement("path", { d: "M32 3C35.8083 3 39.5794 3.75011 43.0978 5.20749C46.6163 6.66488 49.8132 8.80101 52.5061 11.4939C55.199 14.1868 57.3351 17.3837 58.7925 20.9022C60.2499 24.4206 61 28.1917 61 32C61 35.8083 60.2499 39.5794 58.7925 43.0978C57.3351 46.6163 55.199 49.8132 52.5061 52.5061C49.8132 55.199 46.6163 57.3351 43.0978 58.7925C39.5794 60.2499 35.8083 61 32 61C28.1917 61 24.4206 60.2499 20.9022 58.7925C17.3837 57.3351 14.1868 55.199 11.4939 52.5061C8.801 49.8132 6.66487 46.6163 5.20749 43.0978C3.7501 39.5794 3 35.8083 3 32C3 28.1917 3.75011 24.4206 5.2075 20.9022C6.66489 17.3837 8.80101 14.1868 11.4939 11.4939C14.1868 8.80099 17.3838 6.66487 20.9022 5.20749C24.4206 3.7501 28.1917 3 32 3L32 3Z", stroke: "currentColor", strokeWidth: "5", strokeLinecap: "round", strokeLinejoin: "round" }), _react.default.createElement("path", { d: "M32 3C36.5778 3 41.0906 4.08374 45.1692 6.16256C49.2477 8.24138 52.7762 11.2562 55.466 14.9605C58.1558 18.6647 59.9304 22.9531 60.6448 27.4748C61.3591 31.9965 60.9928 36.6232 59.5759 40.9762", stroke: "currentColor", strokeWidth: "5", strokeLinecap: "round", strokeLinejoin: "round", className: spinnerColor }));
    });
    Spinner.propTypes = { color: _propTypes.default.oneOf(_spinner.propTypesColor), className: _spinner.propTypesClassName };
    Spinner.displayName = "MaterialTailwind.Spinner";
    var _default = Spinner;
  }
});

// node_modules/@material-tailwind/react/components/Button/index.js
var require_Button = __commonJS({
  "node_modules/@material-tailwind/react/components/Button/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function _export(target, all) {
      for (var name in all) Object.defineProperty(target, name, { enumerable: true, get: all[name] });
    }
    _export(exports, { Button: function() {
      return Button;
    }, default: function() {
      return _default;
    } });
    var _react = _interopRequireDefault(require_react());
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _materialRippleEffects = _interopRequireDefault(require_material_ripple_effects());
    var _classnames = _interopRequireDefault(require_classnames());
    var _tailwindMerge = require_dist();
    var _findMatch = _interopRequireDefault(require_findMatch());
    var _objectsToString = _interopRequireDefault(require_objectsToString());
    var _theme = require_theme2();
    var _spinner = _interopRequireDefault(require_Spinner());
    var _button = require_button();
    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function _extends2() {
      _extends2 = Object.assign || function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends2.apply(this, arguments);
    }
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _objectWithoutProperties(source, excluded) {
      if (source == null) return {};
      var target = _objectWithoutPropertiesLoose(source, excluded);
      var key, i;
      if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for (i = 0; i < sourceSymbolKeys.length; i++) {
          key = sourceSymbolKeys[i];
          if (excluded.indexOf(key) >= 0) continue;
          if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
          target[key] = source[key];
        }
      }
      return target;
    }
    function _objectWithoutPropertiesLoose(source, excluded) {
      if (source == null) return {};
      var target = {};
      var sourceKeys = Object.keys(source);
      var key, i;
      for (i = 0; i < sourceKeys.length; i++) {
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
      }
      return target;
    }
    var Button = _react.default.forwardRef(function(_param, ref) {
      var variant = _param.variant, size3 = _param.size, color = _param.color, fullWidth = _param.fullWidth, ripple = _param.ripple, className = _param.className, children = _param.children, loading = _param.loading, rest = _objectWithoutProperties(_param, ["variant", "size", "color", "fullWidth", "ripple", "className", "children", "loading"]);
      var button = (0, _theme.useTheme)().button;
      var valid = button.valid, defaultProps = button.defaultProps, styles = button.styles;
      var base = styles.base, variants = styles.variants, sizes = styles.sizes;
      variant = variant !== null && variant !== void 0 ? variant : defaultProps.variant;
      size3 = size3 !== null && size3 !== void 0 ? size3 : defaultProps.size;
      color = color !== null && color !== void 0 ? color : defaultProps.color;
      fullWidth = fullWidth !== null && fullWidth !== void 0 ? fullWidth : defaultProps.fullWidth;
      ripple = ripple !== null && ripple !== void 0 ? ripple : defaultProps.ripple;
      className = className !== null && className !== void 0 ? className : defaultProps.className;
      var rippleEffect = ripple !== void 0 && new _materialRippleEffects.default();
      var buttonBase = (0, _objectsToString.default)(base.initial);
      var buttonVariant = (0, _objectsToString.default)(variants[(0, _findMatch.default)(valid.variants, variant, "filled")][(0, _findMatch.default)(valid.colors, color, "gray")]);
      var buttonSize = (0, _objectsToString.default)(sizes[(0, _findMatch.default)(valid.sizes, size3, "md")]);
      var classes = (0, _tailwindMerge.twMerge)((0, _classnames.default)(buttonBase, buttonSize, buttonVariant, _defineProperty({}, (0, _objectsToString.default)(base.fullWidth), fullWidth), { "flex items-center gap-2": loading, "gap-3": size3 === "lg" }), className);
      var spinnerClass = (0, _tailwindMerge.twMerge)((0, _classnames.default)({ "w-4 h-4": true, "w-5 h-5": size3 === "lg" }));
      var _rest_disabled;
      return _react.default.createElement("button", _extends2({}, rest, { disabled: (_rest_disabled = rest.disabled) !== null && _rest_disabled !== void 0 ? _rest_disabled : loading, ref, className: classes, type: rest.type || "button", onMouseDown: function(e) {
        var onMouseDown = rest === null || rest === void 0 ? void 0 : rest.onMouseDown;
        if (ripple) {
          rippleEffect.create(e, (variant === "filled" || variant === "gradient") && color !== "white" ? "light" : "dark");
        }
        return typeof onMouseDown === "function" && onMouseDown(e);
      } }), loading && _react.default.createElement(_spinner.default, { className: spinnerClass }), children);
    });
    Button.propTypes = { variant: _propTypes.default.oneOf(_button.propTypesVariant), size: _propTypes.default.oneOf(_button.propTypesSize), color: _propTypes.default.oneOf(_button.propTypesColor), fullWidth: _button.propTypesFullWidth, ripple: _button.propTypesRipple, className: _button.propTypesClassName, children: _button.propTypesChildren, loading: _button.propTypesLoading };
    Button.displayName = "MaterialTailwind.Button";
    var _default = Button;
  }
});

// node_modules/@material-tailwind/react/components/Card/CardHeader.js
var require_CardHeader = __commonJS({
  "node_modules/@material-tailwind/react/components/Card/CardHeader.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function _export(target, all) {
      for (var name in all) Object.defineProperty(target, name, { enumerable: true, get: all[name] });
    }
    _export(exports, { CardHeader: function() {
      return CardHeader;
    }, default: function() {
      return _default;
    } });
    var _react = _interopRequireDefault(require_react());
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _classnames = _interopRequireDefault(require_classnames());
    var _tailwindMerge = require_dist();
    var _findMatch = _interopRequireDefault(require_findMatch());
    var _objectsToString = _interopRequireDefault(require_objectsToString());
    var _theme = require_theme2();
    var _card = require_card();
    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function _extends2() {
      _extends2 = Object.assign || function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends2.apply(this, arguments);
    }
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _objectWithoutProperties(source, excluded) {
      if (source == null) return {};
      var target = _objectWithoutPropertiesLoose(source, excluded);
      var key, i;
      if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for (i = 0; i < sourceSymbolKeys.length; i++) {
          key = sourceSymbolKeys[i];
          if (excluded.indexOf(key) >= 0) continue;
          if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
          target[key] = source[key];
        }
      }
      return target;
    }
    function _objectWithoutPropertiesLoose(source, excluded) {
      if (source == null) return {};
      var target = {};
      var sourceKeys = Object.keys(source);
      var key, i;
      for (i = 0; i < sourceKeys.length; i++) {
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
      }
      return target;
    }
    var CardHeader = _react.default.forwardRef(function(_param, ref) {
      var variant = _param.variant, color = _param.color, shadow = _param.shadow, floated = _param.floated, className = _param.className, children = _param.children, rest = _objectWithoutProperties(_param, ["variant", "color", "shadow", "floated", "className", "children"]);
      var cardHeader = (0, _theme.useTheme)().cardHeader;
      var defaultProps = cardHeader.defaultProps, styles = cardHeader.styles, valid = cardHeader.valid;
      var base = styles.base, variants = styles.variants;
      variant = variant !== null && variant !== void 0 ? variant : defaultProps.variant;
      color = color !== null && color !== void 0 ? color : defaultProps.color;
      shadow = shadow !== null && shadow !== void 0 ? shadow : defaultProps.shadow;
      floated = floated !== null && floated !== void 0 ? floated : defaultProps.floated;
      className = className !== null && className !== void 0 ? className : defaultProps.className;
      var cardHeaderRoot = (0, _objectsToString.default)(base.initial);
      var cardHeaderVariant = (0, _objectsToString.default)(variants[(0, _findMatch.default)(valid.variants, variant, "filled")][(0, _findMatch.default)(valid.colors, color, "white")]);
      var classes = (0, _tailwindMerge.twMerge)((0, _classnames.default)(cardHeaderRoot, cardHeaderVariant, _defineProperty({}, (0, _objectsToString.default)(base.shadow), shadow), _defineProperty({}, (0, _objectsToString.default)(base.floated), floated)), className);
      return _react.default.createElement("div", _extends2({}, rest, { ref, className: classes }), children);
    });
    CardHeader.propTypes = { variant: _propTypes.default.oneOf(_card.propTypesVariant), color: _propTypes.default.oneOf(_card.propTypesColor), shadow: _card.propTypesShadow, floated: _card.propTypesFloated, className: _card.propTypesClassName, children: _card.propTypesChildren };
    CardHeader.displayName = "MaterialTailwind.CardHeader";
    var _default = CardHeader;
  }
});

// node_modules/@material-tailwind/react/components/Card/CardBody.js
var require_CardBody = __commonJS({
  "node_modules/@material-tailwind/react/components/Card/CardBody.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function _export(target, all) {
      for (var name in all) Object.defineProperty(target, name, { enumerable: true, get: all[name] });
    }
    _export(exports, { CardBody: function() {
      return CardBody;
    }, default: function() {
      return _default;
    } });
    var _react = _interopRequireDefault(require_react());
    var _classnames = _interopRequireDefault(require_classnames());
    var _tailwindMerge = require_dist();
    var _objectsToString = _interopRequireDefault(require_objectsToString());
    var _theme = require_theme2();
    var _card = require_card();
    function _extends2() {
      _extends2 = Object.assign || function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends2.apply(this, arguments);
    }
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _objectWithoutProperties(source, excluded) {
      if (source == null) return {};
      var target = _objectWithoutPropertiesLoose(source, excluded);
      var key, i;
      if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for (i = 0; i < sourceSymbolKeys.length; i++) {
          key = sourceSymbolKeys[i];
          if (excluded.indexOf(key) >= 0) continue;
          if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
          target[key] = source[key];
        }
      }
      return target;
    }
    function _objectWithoutPropertiesLoose(source, excluded) {
      if (source == null) return {};
      var target = {};
      var sourceKeys = Object.keys(source);
      var key, i;
      for (i = 0; i < sourceKeys.length; i++) {
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
      }
      return target;
    }
    var CardBody = _react.default.forwardRef(function(_param, ref) {
      var className = _param.className, children = _param.children, rest = _objectWithoutProperties(_param, ["className", "children"]);
      var cardBody = (0, _theme.useTheme)().cardBody;
      var defaultProps = cardBody.defaultProps, base = cardBody.styles.base;
      className = className !== null && className !== void 0 ? className : defaultProps.className;
      var cardBodyClasses = (0, _tailwindMerge.twMerge)((0, _classnames.default)((0, _objectsToString.default)(base)), className);
      return _react.default.createElement("div", _extends2({}, rest, { ref, className: cardBodyClasses }), children);
    });
    CardBody.propTypes = { className: _card.propTypesClassName, children: _card.propTypesChildren };
    CardBody.displayName = "MaterialTailwind.CardBody";
    var _default = CardBody;
  }
});

// node_modules/@material-tailwind/react/components/Card/CardFooter.js
var require_CardFooter = __commonJS({
  "node_modules/@material-tailwind/react/components/Card/CardFooter.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function _export(target, all) {
      for (var name in all) Object.defineProperty(target, name, { enumerable: true, get: all[name] });
    }
    _export(exports, { CardFooter: function() {
      return CardFooter;
    }, default: function() {
      return _default;
    } });
    var _react = _interopRequireDefault(require_react());
    var _classnames = _interopRequireDefault(require_classnames());
    var _tailwindMerge = require_dist();
    var _objectsToString = _interopRequireDefault(require_objectsToString());
    var _theme = require_theme2();
    var _card = require_card();
    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function _extends2() {
      _extends2 = Object.assign || function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends2.apply(this, arguments);
    }
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _objectWithoutProperties(source, excluded) {
      if (source == null) return {};
      var target = _objectWithoutPropertiesLoose(source, excluded);
      var key, i;
      if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for (i = 0; i < sourceSymbolKeys.length; i++) {
          key = sourceSymbolKeys[i];
          if (excluded.indexOf(key) >= 0) continue;
          if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
          target[key] = source[key];
        }
      }
      return target;
    }
    function _objectWithoutPropertiesLoose(source, excluded) {
      if (source == null) return {};
      var target = {};
      var sourceKeys = Object.keys(source);
      var key, i;
      for (i = 0; i < sourceKeys.length; i++) {
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
      }
      return target;
    }
    var CardFooter = _react.default.forwardRef(function(_param, ref) {
      var divider = _param.divider, className = _param.className, children = _param.children, rest = _objectWithoutProperties(_param, ["divider", "className", "children"]);
      var cardFooter = (0, _theme.useTheme)().cardFooter;
      var defaultProps = cardFooter.defaultProps, base = cardFooter.styles.base;
      className = className !== null && className !== void 0 ? className : defaultProps.className;
      divider = divider !== null && divider !== void 0 ? divider : defaultProps.divider;
      var cardFooterClasses = (0, _tailwindMerge.twMerge)((0, _classnames.default)((0, _objectsToString.default)(base.initial), _defineProperty({}, (0, _objectsToString.default)(base.divider), divider)), className);
      return _react.default.createElement("div", _extends2({}, rest, { ref, className: cardFooterClasses }), children);
    });
    CardFooter.propTypes = { divider: _card.propTypesDivider, className: _card.propTypesClassName, children: _card.propTypesChildren };
    CardFooter.displayName = "MaterialTailwind.CardFooter";
    var _default = CardFooter;
  }
});

// node_modules/@material-tailwind/react/components/Card/index.js
var require_Card = __commonJS({
  "node_modules/@material-tailwind/react/components/Card/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function _export(target, all) {
      for (var name in all) Object.defineProperty(target, name, { enumerable: true, get: all[name] });
    }
    _export(exports, { Card: function() {
      return Card;
    }, CardHeader: function() {
      return _cardHeader.CardHeader;
    }, CardBody: function() {
      return _cardBody.CardBody;
    }, CardFooter: function() {
      return _cardFooter.CardFooter;
    }, default: function() {
      return _default;
    } });
    var _react = _interopRequireDefault(require_react());
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _classnames = _interopRequireDefault(require_classnames());
    var _tailwindMerge = require_dist();
    var _findMatch = _interopRequireDefault(require_findMatch());
    var _objectsToString = _interopRequireDefault(require_objectsToString());
    var _theme = require_theme2();
    var _cardHeader = require_CardHeader();
    var _cardBody = require_CardBody();
    var _cardFooter = require_CardFooter();
    var _card = require_card();
    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function _extends2() {
      _extends2 = Object.assign || function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends2.apply(this, arguments);
    }
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _objectWithoutProperties(source, excluded) {
      if (source == null) return {};
      var target = _objectWithoutPropertiesLoose(source, excluded);
      var key, i;
      if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for (i = 0; i < sourceSymbolKeys.length; i++) {
          key = sourceSymbolKeys[i];
          if (excluded.indexOf(key) >= 0) continue;
          if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
          target[key] = source[key];
        }
      }
      return target;
    }
    function _objectWithoutPropertiesLoose(source, excluded) {
      if (source == null) return {};
      var target = {};
      var sourceKeys = Object.keys(source);
      var key, i;
      for (i = 0; i < sourceKeys.length; i++) {
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
      }
      return target;
    }
    var Card = _react.default.forwardRef(function(_param, ref) {
      var variant = _param.variant, color = _param.color, shadow = _param.shadow, className = _param.className, children = _param.children, rest = _objectWithoutProperties(_param, ["variant", "color", "shadow", "className", "children"]);
      var card = (0, _theme.useTheme)().card;
      var defaultProps = card.defaultProps, styles = card.styles, valid = card.valid;
      var base = styles.base, variants = styles.variants;
      variant = variant !== null && variant !== void 0 ? variant : defaultProps.variant;
      color = color !== null && color !== void 0 ? color : defaultProps.color;
      shadow = shadow !== null && shadow !== void 0 ? shadow : defaultProps.shadow;
      className = className !== null && className !== void 0 ? className : defaultProps.className;
      var cardRoot = (0, _objectsToString.default)(base.initial);
      var cardVariant = (0, _objectsToString.default)(variants[(0, _findMatch.default)(valid.variants, variant, "filled")][(0, _findMatch.default)(valid.colors, color, "white")]);
      var classes = (0, _tailwindMerge.twMerge)((0, _classnames.default)(cardRoot, cardVariant, _defineProperty({}, (0, _objectsToString.default)(base.shadow), shadow)), className);
      return _react.default.createElement("div", _extends2({}, rest, { ref, className: classes }), children);
    });
    Card.propTypes = { variant: _propTypes.default.oneOf(_card.propTypesVariant), color: _propTypes.default.oneOf(_card.propTypesColor), shadow: _card.propTypesShadow, className: _card.propTypesClassName, children: _card.propTypesChildren };
    Card.displayName = "MaterialTailwind.Card";
    var _default = Object.assign(Card, { Header: _cardHeader.CardHeader, Body: _cardBody.CardBody, Footer: _cardFooter.CardFooter });
  }
});

// node_modules/@material-tailwind/react/components/Checkbox/index.js
var require_Checkbox = __commonJS({
  "node_modules/@material-tailwind/react/components/Checkbox/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function _export(target, all) {
      for (var name in all) Object.defineProperty(target, name, { enumerable: true, get: all[name] });
    }
    _export(exports, { Checkbox: function() {
      return Checkbox;
    }, default: function() {
      return _default;
    } });
    var _react = _interopRequireDefault(require_react());
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _materialRippleEffects = _interopRequireDefault(require_material_ripple_effects());
    var _classnames = _interopRequireDefault(require_classnames());
    var _tailwindMerge = require_dist();
    var _findMatch = _interopRequireDefault(require_findMatch());
    var _objectsToString = _interopRequireDefault(require_objectsToString());
    var _theme = require_theme2();
    var _checkbox = require_checkbox();
    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function _extends2() {
      _extends2 = Object.assign || function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends2.apply(this, arguments);
    }
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _objectWithoutProperties(source, excluded) {
      if (source == null) return {};
      var target = _objectWithoutPropertiesLoose(source, excluded);
      var key, i;
      if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for (i = 0; i < sourceSymbolKeys.length; i++) {
          key = sourceSymbolKeys[i];
          if (excluded.indexOf(key) >= 0) continue;
          if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
          target[key] = source[key];
        }
      }
      return target;
    }
    function _objectWithoutPropertiesLoose(source, excluded) {
      if (source == null) return {};
      var target = {};
      var sourceKeys = Object.keys(source);
      var key, i;
      for (i = 0; i < sourceKeys.length; i++) {
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
      }
      return target;
    }
    var Checkbox = _react.default.forwardRef(function(_param, ref) {
      var color = _param.color, label = _param.label, icon = _param.icon, ripple = _param.ripple, className = _param.className, disabled = _param.disabled, containerProps = _param.containerProps, labelProps = _param.labelProps, iconProps = _param.iconProps, inputRef = _param.inputRef, rest = _objectWithoutProperties(_param, ["color", "label", "icon", "ripple", "className", "disabled", "containerProps", "labelProps", "iconProps", "inputRef"]);
      var checkbox = (0, _theme.useTheme)().checkbox;
      var defaultProps = checkbox.defaultProps, valid = checkbox.valid, styles = checkbox.styles;
      var base = styles.base, colors = styles.colors;
      var checkboxId = _react.default.useId();
      color = color !== null && color !== void 0 ? color : defaultProps.color;
      label = label !== null && label !== void 0 ? label : defaultProps.label;
      icon = icon !== null && icon !== void 0 ? icon : defaultProps.icon;
      ripple = ripple !== null && ripple !== void 0 ? ripple : defaultProps.ripple;
      className = className !== null && className !== void 0 ? className : defaultProps.className;
      disabled = disabled !== null && disabled !== void 0 ? disabled : defaultProps.disabled;
      containerProps = containerProps !== null && containerProps !== void 0 ? containerProps : defaultProps.containerProps;
      labelProps = labelProps !== null && labelProps !== void 0 ? labelProps : defaultProps.labelProps;
      iconProps = iconProps !== null && iconProps !== void 0 ? iconProps : defaultProps.iconProps;
      var rippleEffect = ripple !== void 0 && new _materialRippleEffects.default();
      var rootClasses = (0, _classnames.default)((0, _objectsToString.default)(base.root), _defineProperty({}, (0, _objectsToString.default)(base.disabled), disabled));
      var containerClasses = (0, _tailwindMerge.twMerge)((0, _classnames.default)((0, _objectsToString.default)(base.container)), containerProps === null || containerProps === void 0 ? void 0 : containerProps.className);
      var inputClasses = (0, _tailwindMerge.twMerge)((0, _classnames.default)((0, _objectsToString.default)(base.input), (0, _objectsToString.default)(colors[(0, _findMatch.default)(valid.colors, color, "gray")])), className);
      var labelClasses = (0, _tailwindMerge.twMerge)((0, _classnames.default)((0, _objectsToString.default)(base.label)), labelProps === null || labelProps === void 0 ? void 0 : labelProps.className);
      var iconContainerClasses = (0, _tailwindMerge.twMerge)((0, _classnames.default)((0, _objectsToString.default)(base.icon)), iconProps === null || iconProps === void 0 ? void 0 : iconProps.className);
      return _react.default.createElement("div", { ref, className: rootClasses }, _react.default.createElement("label", _extends2({}, containerProps, { className: containerClasses, htmlFor: rest.id || checkboxId, onMouseDown: function(e) {
        var onMouseDown = containerProps === null || containerProps === void 0 ? void 0 : containerProps.onMouseDown;
        if (ripple) {
          rippleEffect.create(e, "dark");
        }
        return typeof onMouseDown === "function" && onMouseDown(e);
      } }), _react.default.createElement("input", _extends2({}, rest, { ref: inputRef, type: "checkbox", disabled, className: inputClasses, id: rest.id || checkboxId })), _react.default.createElement("span", { className: iconContainerClasses }, icon || _react.default.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", className: "h-3.5 w-3.5", viewBox: "0 0 20 20", fill: "currentColor", stroke: "currentColor", strokeWidth: 1 }, _react.default.createElement("path", { fillRule: "evenodd", d: "M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z", clipRule: "evenodd" })))), label && _react.default.createElement("label", _extends2({}, labelProps, { className: labelClasses, htmlFor: rest.id || checkboxId }), label));
    });
    Checkbox.propTypes = { color: _propTypes.default.oneOf(_checkbox.propTypesColor), label: _checkbox.propTypesLabel, icon: _checkbox.propTypesIcon, ripple: _checkbox.propTypesRipple, className: _checkbox.propTypesClassName, disabled: _checkbox.propTypesDisabled, containerProps: _checkbox.propTypesObject, labelProps: _checkbox.propTypesObject };
    Checkbox.displayName = "MaterialTailwind.Checkbox";
    var _default = Checkbox;
  }
});

// node_modules/@material-tailwind/react/components/Chip/index.js
var require_Chip = __commonJS({
  "node_modules/@material-tailwind/react/components/Chip/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function _export(target, all) {
      for (var name in all) Object.defineProperty(target, name, { enumerable: true, get: all[name] });
    }
    _export(exports, { Chip: function() {
      return Chip;
    }, default: function() {
      return _default;
    } });
    var _react = _interopRequireDefault(require_react());
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _framerMotion = require_cjs2();
    var _classnames = _interopRequireDefault(require_classnames());
    var _deepmerge = _interopRequireDefault(require_cjs());
    var _tailwindMerge = require_dist();
    var _findMatch = _interopRequireDefault(require_findMatch());
    var _objectsToString = _interopRequireDefault(require_objectsToString());
    var _theme = require_theme2();
    var _chip = require_chip();
    var _iconButton = _interopRequireDefault(require_IconButton());
    function _extends2() {
      _extends2 = Object.assign || function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends2.apply(this, arguments);
    }
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _objectWithoutProperties(source, excluded) {
      if (source == null) return {};
      var target = _objectWithoutPropertiesLoose(source, excluded);
      var key, i;
      if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for (i = 0; i < sourceSymbolKeys.length; i++) {
          key = sourceSymbolKeys[i];
          if (excluded.indexOf(key) >= 0) continue;
          if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
          target[key] = source[key];
        }
      }
      return target;
    }
    function _objectWithoutPropertiesLoose(source, excluded) {
      if (source == null) return {};
      var target = {};
      var sourceKeys = Object.keys(source);
      var key, i;
      for (i = 0; i < sourceKeys.length; i++) {
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
      }
      return target;
    }
    var Chip = _react.default.forwardRef(function(_param, ref) {
      var variant = _param.variant, size3 = _param.size, color = _param.color, icon = _param.icon, open = _param.open, onClose = _param.onClose, action = _param.action, animate = _param.animate, className = _param.className, value = _param.value, rest = _objectWithoutProperties(_param, ["variant", "size", "color", "icon", "open", "onClose", "action", "animate", "className", "value"]);
      var chip = (0, _theme.useTheme)().chip;
      var defaultProps = chip.defaultProps, valid = chip.valid, styles = chip.styles;
      var base = styles.base, variants = styles.variants, sizes = styles.sizes;
      variant = variant !== null && variant !== void 0 ? variant : defaultProps.variant;
      size3 = size3 !== null && size3 !== void 0 ? size3 : defaultProps.size;
      color = color !== null && color !== void 0 ? color : defaultProps.color;
      className = className !== null && className !== void 0 ? className : defaultProps.className;
      animate = animate !== null && animate !== void 0 ? animate : defaultProps.animate;
      open = open !== null && open !== void 0 ? open : defaultProps.open;
      action = action !== null && action !== void 0 ? action : defaultProps.action;
      onClose = onClose !== null && onClose !== void 0 ? onClose : defaultProps.onClose;
      var chipBase = (0, _objectsToString.default)(base.chip);
      var chipAction = (0, _objectsToString.default)(base.action);
      var chipIcon = (0, _objectsToString.default)(base.icon);
      var chipVariant = (0, _objectsToString.default)(variants[(0, _findMatch.default)(valid.variants, variant, "filled")][(0, _findMatch.default)(valid.colors, color, "gray")]);
      var chipSize = (0, _objectsToString.default)(sizes[(0, _findMatch.default)(valid.sizes, size3, "md")]["chip"]);
      var actionSize = (0, _objectsToString.default)(sizes[(0, _findMatch.default)(valid.sizes, size3, "md")]["action"]);
      var iconSize = (0, _objectsToString.default)(sizes[(0, _findMatch.default)(valid.sizes, size3, "md")]["icon"]);
      var classes = (0, _tailwindMerge.twMerge)((0, _classnames.default)(chipBase, chipVariant, chipSize), className);
      var actionClasses = (0, _classnames.default)(chipAction, actionSize);
      var iconClasses = (0, _classnames.default)(chipIcon, iconSize);
      var contentClasses = (0, _classnames.default)({ "ml-4": icon && size3 === "sm", "ml-[18px]": icon && size3 === "md", "ml-5": icon && size3 === "lg", "mr-5": onClose });
      var mainAnimation = { unmount: { opacity: 0 }, mount: { opacity: 1 } };
      var appliedAnimation = (0, _deepmerge.default)(mainAnimation, animate);
      var iconTemplate = _react.default.createElement("div", { className: iconClasses }, icon);
      var NewAnimatePresence = _framerMotion.AnimatePresence;
      return _react.default.createElement(_framerMotion.LazyMotion, { features: _framerMotion.domAnimation }, _react.default.createElement(NewAnimatePresence, null, open && _react.default.createElement(_framerMotion.m.div, _extends2({}, rest, { ref, className: classes, initial: "unmount", exit: "unmount", animate: open ? "mount" : "unmount", variants: appliedAnimation }), icon && iconTemplate, _react.default.createElement("span", { className: contentClasses }, value), onClose && !action && _react.default.createElement(_iconButton.default, { onClick: onClose, size: "sm", variant: "text", color: variant === "outlined" || variant === "ghost" ? color : "white", className: actionClasses }, _react.default.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", stroke: "currentColor", className: (0, _classnames.default)({ "h-3.5 w-3.5": size3 === "sm", "h-4 w-4": size3 === "md", "h-5 w-5": size3 === "lg" }), strokeWidth: 2 }, _react.default.createElement("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M6 18L18 6M6 6l12 12" }))), action || null)));
    });
    Chip.propTypes = { variant: _propTypes.default.oneOf(_chip.propTypesVariant), size: _propTypes.default.oneOf(_chip.propTypesSize), color: _propTypes.default.oneOf(_chip.propTypesColor), icon: _chip.propTypesIcon, open: _chip.propTypesOpen, onClose: _chip.propTypesOnClose, action: _chip.propTypesAction, animate: _chip.propTypesAnimate, className: _chip.propTypesClassName, value: _chip.propTypesValue };
    Chip.displayName = "MaterialTailwind.Chip";
    var _default = Chip;
  }
});

// node_modules/aria-hidden/dist/es2015/index.js
var getDefaultParent, counterMap, uncontrolledNodes, markerMap, lockCount, unwrapHost, correctTargets, applyAttributeToOthers, hideOthers;
var init_es2015 = __esm({
  "node_modules/aria-hidden/dist/es2015/index.js"() {
    getDefaultParent = function(originalTarget) {
      if (typeof document === "undefined") {
        return null;
      }
      var sampleTarget = Array.isArray(originalTarget) ? originalTarget[0] : originalTarget;
      return sampleTarget.ownerDocument.body;
    };
    counterMap = /* @__PURE__ */ new WeakMap();
    uncontrolledNodes = /* @__PURE__ */ new WeakMap();
    markerMap = {};
    lockCount = 0;
    unwrapHost = function(node) {
      return node && (node.host || unwrapHost(node.parentNode));
    };
    correctTargets = function(parent, targets) {
      return targets.map(function(target) {
        if (parent.contains(target)) {
          return target;
        }
        var correctedTarget = unwrapHost(target);
        if (correctedTarget && parent.contains(correctedTarget)) {
          return correctedTarget;
        }
        console.error("aria-hidden", target, "in not contained inside", parent, ". Doing nothing");
        return null;
      }).filter(function(x) {
        return Boolean(x);
      });
    };
    applyAttributeToOthers = function(originalTarget, parentNode, markerName, controlAttribute) {
      var targets = correctTargets(parentNode, Array.isArray(originalTarget) ? originalTarget : [originalTarget]);
      if (!markerMap[markerName]) {
        markerMap[markerName] = /* @__PURE__ */ new WeakMap();
      }
      var markerCounter = markerMap[markerName];
      var hiddenNodes = [];
      var elementsToKeep = /* @__PURE__ */ new Set();
      var elementsToStop = new Set(targets);
      var keep = function(el) {
        if (!el || elementsToKeep.has(el)) {
          return;
        }
        elementsToKeep.add(el);
        keep(el.parentNode);
      };
      targets.forEach(keep);
      var deep = function(parent) {
        if (!parent || elementsToStop.has(parent)) {
          return;
        }
        Array.prototype.forEach.call(parent.children, function(node) {
          if (elementsToKeep.has(node)) {
            deep(node);
          } else {
            try {
              var attr = node.getAttribute(controlAttribute);
              var alreadyHidden = attr !== null && attr !== "false";
              var counterValue = (counterMap.get(node) || 0) + 1;
              var markerValue = (markerCounter.get(node) || 0) + 1;
              counterMap.set(node, counterValue);
              markerCounter.set(node, markerValue);
              hiddenNodes.push(node);
              if (counterValue === 1 && alreadyHidden) {
                uncontrolledNodes.set(node, true);
              }
              if (markerValue === 1) {
                node.setAttribute(markerName, "true");
              }
              if (!alreadyHidden) {
                node.setAttribute(controlAttribute, "true");
              }
            } catch (e) {
              console.error("aria-hidden: cannot operate on ", node, e);
            }
          }
        });
      };
      deep(parentNode);
      elementsToKeep.clear();
      lockCount++;
      return function() {
        hiddenNodes.forEach(function(node) {
          var counterValue = counterMap.get(node) - 1;
          var markerValue = markerCounter.get(node) - 1;
          counterMap.set(node, counterValue);
          markerCounter.set(node, markerValue);
          if (!counterValue) {
            if (!uncontrolledNodes.has(node)) {
              node.removeAttribute(controlAttribute);
            }
            uncontrolledNodes.delete(node);
          }
          if (!markerValue) {
            node.removeAttribute(markerName);
          }
        });
        lockCount--;
        if (!lockCount) {
          counterMap = /* @__PURE__ */ new WeakMap();
          counterMap = /* @__PURE__ */ new WeakMap();
          uncontrolledNodes = /* @__PURE__ */ new WeakMap();
          markerMap = {};
        }
      };
    };
    hideOthers = function(originalTarget, parentNode, markerName) {
      if (markerName === void 0) {
        markerName = "data-aria-hidden";
      }
      var targets = Array.from(Array.isArray(originalTarget) ? originalTarget : [originalTarget]);
      var activeParentNode = parentNode || getDefaultParent(originalTarget);
      if (!activeParentNode) {
        return function() {
          return null;
        };
      }
      targets.push.apply(targets, Array.from(activeParentNode.querySelectorAll("[aria-live]")));
      return applyAttributeToOthers(targets, activeParentNode, markerName, "aria-hidden");
    };
  }
});

// node_modules/tabbable/dist/index.esm.js
var candidateSelectors, candidateSelector, NoElement, matches, getRootNode, isInert, isContentEditable, getCandidates, getCandidatesIteratively, hasTabIndex, getTabIndex, getSortOrderTabIndex, sortOrderedTabbables, isInput, isHiddenInput, isDetailsWithSummary, getCheckedRadio, isTabbableRadio, isRadio, isNonTabbableRadio, isNodeAttached, isZeroArea, isHidden, isDisabledFromFieldset, isNodeMatchingSelectorFocusable, isNodeMatchingSelectorTabbable, isValidShadowRootTabbable, sortByOrder, tabbable, focusableCandidateSelector;
var init_index_esm = __esm({
  "node_modules/tabbable/dist/index.esm.js"() {
    candidateSelectors = ["input:not([inert])", "select:not([inert])", "textarea:not([inert])", "a[href]:not([inert])", "button:not([inert])", "[tabindex]:not(slot):not([inert])", "audio[controls]:not([inert])", "video[controls]:not([inert])", '[contenteditable]:not([contenteditable="false"]):not([inert])', "details>summary:first-of-type:not([inert])", "details:not([inert])"];
    candidateSelector = candidateSelectors.join(",");
    NoElement = typeof Element === "undefined";
    matches = NoElement ? function() {
    } : Element.prototype.matches || Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;
    getRootNode = !NoElement && Element.prototype.getRootNode ? function(element) {
      var _element$getRootNode;
      return element === null || element === void 0 ? void 0 : (_element$getRootNode = element.getRootNode) === null || _element$getRootNode === void 0 ? void 0 : _element$getRootNode.call(element);
    } : function(element) {
      return element === null || element === void 0 ? void 0 : element.ownerDocument;
    };
    isInert = function isInert2(node, lookUp) {
      var _node$getAttribute;
      if (lookUp === void 0) {
        lookUp = true;
      }
      var inertAtt = node === null || node === void 0 ? void 0 : (_node$getAttribute = node.getAttribute) === null || _node$getAttribute === void 0 ? void 0 : _node$getAttribute.call(node, "inert");
      var inert = inertAtt === "" || inertAtt === "true";
      var result = inert || lookUp && node && isInert2(node.parentNode);
      return result;
    };
    isContentEditable = function isContentEditable2(node) {
      var _node$getAttribute2;
      var attValue = node === null || node === void 0 ? void 0 : (_node$getAttribute2 = node.getAttribute) === null || _node$getAttribute2 === void 0 ? void 0 : _node$getAttribute2.call(node, "contenteditable");
      return attValue === "" || attValue === "true";
    };
    getCandidates = function getCandidates2(el, includeContainer, filter) {
      if (isInert(el)) {
        return [];
      }
      var candidates = Array.prototype.slice.apply(el.querySelectorAll(candidateSelector));
      if (includeContainer && matches.call(el, candidateSelector)) {
        candidates.unshift(el);
      }
      candidates = candidates.filter(filter);
      return candidates;
    };
    getCandidatesIteratively = function getCandidatesIteratively2(elements, includeContainer, options) {
      var candidates = [];
      var elementsToCheck = Array.from(elements);
      while (elementsToCheck.length) {
        var element = elementsToCheck.shift();
        if (isInert(element, false)) {
          continue;
        }
        if (element.tagName === "SLOT") {
          var assigned = element.assignedElements();
          var content = assigned.length ? assigned : element.children;
          var nestedCandidates = getCandidatesIteratively2(content, true, options);
          if (options.flatten) {
            candidates.push.apply(candidates, nestedCandidates);
          } else {
            candidates.push({
              scopeParent: element,
              candidates: nestedCandidates
            });
          }
        } else {
          var validCandidate = matches.call(element, candidateSelector);
          if (validCandidate && options.filter(element) && (includeContainer || !elements.includes(element))) {
            candidates.push(element);
          }
          var shadowRoot = element.shadowRoot || // check for an undisclosed shadow
          typeof options.getShadowRoot === "function" && options.getShadowRoot(element);
          var validShadowRoot = !isInert(shadowRoot, false) && (!options.shadowRootFilter || options.shadowRootFilter(element));
          if (shadowRoot && validShadowRoot) {
            var _nestedCandidates = getCandidatesIteratively2(shadowRoot === true ? element.children : shadowRoot.children, true, options);
            if (options.flatten) {
              candidates.push.apply(candidates, _nestedCandidates);
            } else {
              candidates.push({
                scopeParent: element,
                candidates: _nestedCandidates
              });
            }
          } else {
            elementsToCheck.unshift.apply(elementsToCheck, element.children);
          }
        }
      }
      return candidates;
    };
    hasTabIndex = function hasTabIndex2(node) {
      return !isNaN(parseInt(node.getAttribute("tabindex"), 10));
    };
    getTabIndex = function getTabIndex2(node) {
      if (!node) {
        throw new Error("No node provided");
      }
      if (node.tabIndex < 0) {
        if ((/^(AUDIO|VIDEO|DETAILS)$/.test(node.tagName) || isContentEditable(node)) && !hasTabIndex(node)) {
          return 0;
        }
      }
      return node.tabIndex;
    };
    getSortOrderTabIndex = function getSortOrderTabIndex2(node, isScope) {
      var tabIndex = getTabIndex(node);
      if (tabIndex < 0 && isScope && !hasTabIndex(node)) {
        return 0;
      }
      return tabIndex;
    };
    sortOrderedTabbables = function sortOrderedTabbables2(a, b) {
      return a.tabIndex === b.tabIndex ? a.documentOrder - b.documentOrder : a.tabIndex - b.tabIndex;
    };
    isInput = function isInput2(node) {
      return node.tagName === "INPUT";
    };
    isHiddenInput = function isHiddenInput2(node) {
      return isInput(node) && node.type === "hidden";
    };
    isDetailsWithSummary = function isDetailsWithSummary2(node) {
      var r = node.tagName === "DETAILS" && Array.prototype.slice.apply(node.children).some(function(child) {
        return child.tagName === "SUMMARY";
      });
      return r;
    };
    getCheckedRadio = function getCheckedRadio2(nodes, form) {
      for (var i = 0; i < nodes.length; i++) {
        if (nodes[i].checked && nodes[i].form === form) {
          return nodes[i];
        }
      }
    };
    isTabbableRadio = function isTabbableRadio2(node) {
      if (!node.name) {
        return true;
      }
      var radioScope = node.form || getRootNode(node);
      var queryRadios = function queryRadios2(name) {
        return radioScope.querySelectorAll('input[type="radio"][name="' + name + '"]');
      };
      var radioSet;
      if (typeof window !== "undefined" && typeof window.CSS !== "undefined" && typeof window.CSS.escape === "function") {
        radioSet = queryRadios(window.CSS.escape(node.name));
      } else {
        try {
          radioSet = queryRadios(node.name);
        } catch (err) {
          console.error("Looks like you have a radio button with a name attribute containing invalid CSS selector characters and need the CSS.escape polyfill: %s", err.message);
          return false;
        }
      }
      var checked = getCheckedRadio(radioSet, node.form);
      return !checked || checked === node;
    };
    isRadio = function isRadio2(node) {
      return isInput(node) && node.type === "radio";
    };
    isNonTabbableRadio = function isNonTabbableRadio2(node) {
      return isRadio(node) && !isTabbableRadio(node);
    };
    isNodeAttached = function isNodeAttached2(node) {
      var _nodeRoot;
      var nodeRoot = node && getRootNode(node);
      var nodeRootHost = (_nodeRoot = nodeRoot) === null || _nodeRoot === void 0 ? void 0 : _nodeRoot.host;
      var attached = false;
      if (nodeRoot && nodeRoot !== node) {
        var _nodeRootHost, _nodeRootHost$ownerDo, _node$ownerDocument;
        attached = !!((_nodeRootHost = nodeRootHost) !== null && _nodeRootHost !== void 0 && (_nodeRootHost$ownerDo = _nodeRootHost.ownerDocument) !== null && _nodeRootHost$ownerDo !== void 0 && _nodeRootHost$ownerDo.contains(nodeRootHost) || node !== null && node !== void 0 && (_node$ownerDocument = node.ownerDocument) !== null && _node$ownerDocument !== void 0 && _node$ownerDocument.contains(node));
        while (!attached && nodeRootHost) {
          var _nodeRoot2, _nodeRootHost2, _nodeRootHost2$ownerD;
          nodeRoot = getRootNode(nodeRootHost);
          nodeRootHost = (_nodeRoot2 = nodeRoot) === null || _nodeRoot2 === void 0 ? void 0 : _nodeRoot2.host;
          attached = !!((_nodeRootHost2 = nodeRootHost) !== null && _nodeRootHost2 !== void 0 && (_nodeRootHost2$ownerD = _nodeRootHost2.ownerDocument) !== null && _nodeRootHost2$ownerD !== void 0 && _nodeRootHost2$ownerD.contains(nodeRootHost));
        }
      }
      return attached;
    };
    isZeroArea = function isZeroArea2(node) {
      var _node$getBoundingClie = node.getBoundingClientRect(), width = _node$getBoundingClie.width, height = _node$getBoundingClie.height;
      return width === 0 && height === 0;
    };
    isHidden = function isHidden2(node, _ref) {
      var displayCheck = _ref.displayCheck, getShadowRoot = _ref.getShadowRoot;
      if (getComputedStyle(node).visibility === "hidden") {
        return true;
      }
      var isDirectSummary = matches.call(node, "details>summary:first-of-type");
      var nodeUnderDetails = isDirectSummary ? node.parentElement : node;
      if (matches.call(nodeUnderDetails, "details:not([open]) *")) {
        return true;
      }
      if (!displayCheck || displayCheck === "full" || displayCheck === "legacy-full") {
        if (typeof getShadowRoot === "function") {
          var originalNode = node;
          while (node) {
            var parentElement = node.parentElement;
            var rootNode = getRootNode(node);
            if (parentElement && !parentElement.shadowRoot && getShadowRoot(parentElement) === true) {
              return isZeroArea(node);
            } else if (node.assignedSlot) {
              node = node.assignedSlot;
            } else if (!parentElement && rootNode !== node.ownerDocument) {
              node = rootNode.host;
            } else {
              node = parentElement;
            }
          }
          node = originalNode;
        }
        if (isNodeAttached(node)) {
          return !node.getClientRects().length;
        }
        if (displayCheck !== "legacy-full") {
          return true;
        }
      } else if (displayCheck === "non-zero-area") {
        return isZeroArea(node);
      }
      return false;
    };
    isDisabledFromFieldset = function isDisabledFromFieldset2(node) {
      if (/^(INPUT|BUTTON|SELECT|TEXTAREA)$/.test(node.tagName)) {
        var parentNode = node.parentElement;
        while (parentNode) {
          if (parentNode.tagName === "FIELDSET" && parentNode.disabled) {
            for (var i = 0; i < parentNode.children.length; i++) {
              var child = parentNode.children.item(i);
              if (child.tagName === "LEGEND") {
                return matches.call(parentNode, "fieldset[disabled] *") ? true : !child.contains(node);
              }
            }
            return true;
          }
          parentNode = parentNode.parentElement;
        }
      }
      return false;
    };
    isNodeMatchingSelectorFocusable = function isNodeMatchingSelectorFocusable2(options, node) {
      if (node.disabled || // we must do an inert look up to filter out any elements inside an inert ancestor
      //  because we're limited in the type of selectors we can use in JSDom (see related
      //  note related to `candidateSelectors`)
      isInert(node) || isHiddenInput(node) || isHidden(node, options) || // For a details element with a summary, the summary element gets the focus
      isDetailsWithSummary(node) || isDisabledFromFieldset(node)) {
        return false;
      }
      return true;
    };
    isNodeMatchingSelectorTabbable = function isNodeMatchingSelectorTabbable2(options, node) {
      if (isNonTabbableRadio(node) || getTabIndex(node) < 0 || !isNodeMatchingSelectorFocusable(options, node)) {
        return false;
      }
      return true;
    };
    isValidShadowRootTabbable = function isValidShadowRootTabbable2(shadowHostNode) {
      var tabIndex = parseInt(shadowHostNode.getAttribute("tabindex"), 10);
      if (isNaN(tabIndex) || tabIndex >= 0) {
        return true;
      }
      return false;
    };
    sortByOrder = function sortByOrder2(candidates) {
      var regularTabbables = [];
      var orderedTabbables = [];
      candidates.forEach(function(item, i) {
        var isScope = !!item.scopeParent;
        var element = isScope ? item.scopeParent : item;
        var candidateTabindex = getSortOrderTabIndex(element, isScope);
        var elements = isScope ? sortByOrder2(item.candidates) : element;
        if (candidateTabindex === 0) {
          isScope ? regularTabbables.push.apply(regularTabbables, elements) : regularTabbables.push(element);
        } else {
          orderedTabbables.push({
            documentOrder: i,
            tabIndex: candidateTabindex,
            item,
            isScope,
            content: elements
          });
        }
      });
      return orderedTabbables.sort(sortOrderedTabbables).reduce(function(acc, sortable) {
        sortable.isScope ? acc.push.apply(acc, sortable.content) : acc.push(sortable.content);
        return acc;
      }, []).concat(regularTabbables);
    };
    tabbable = function tabbable2(container, options) {
      options = options || {};
      var candidates;
      if (options.getShadowRoot) {
        candidates = getCandidatesIteratively([container], options.includeContainer, {
          filter: isNodeMatchingSelectorTabbable.bind(null, options),
          flatten: false,
          getShadowRoot: options.getShadowRoot,
          shadowRootFilter: isValidShadowRootTabbable
        });
      } else {
        candidates = getCandidates(container, options.includeContainer, isNodeMatchingSelectorTabbable.bind(null, options));
      }
      return sortByOrder(candidates);
    };
    focusableCandidateSelector = candidateSelectors.concat("iframe").join(",");
  }
});

// node_modules/@floating-ui/utils/dist/floating-ui.utils.mjs
function clamp(start, value, end) {
  return max(start, min(value, end));
}
function evaluate(value, param) {
  return typeof value === "function" ? value(param) : value;
}
function getSide(placement) {
  return placement.split("-")[0];
}
function getAlignment(placement) {
  return placement.split("-")[1];
}
function getOppositeAxis(axis) {
  return axis === "x" ? "y" : "x";
}
function getAxisLength(axis) {
  return axis === "y" ? "height" : "width";
}
function getSideAxis(placement) {
  return ["top", "bottom"].includes(getSide(placement)) ? "y" : "x";
}
function getAlignmentAxis(placement) {
  return getOppositeAxis(getSideAxis(placement));
}
function getAlignmentSides(placement, rects, rtl) {
  if (rtl === void 0) {
    rtl = false;
  }
  const alignment = getAlignment(placement);
  const alignmentAxis = getAlignmentAxis(placement);
  const length = getAxisLength(alignmentAxis);
  let mainAlignmentSide = alignmentAxis === "x" ? alignment === (rtl ? "end" : "start") ? "right" : "left" : alignment === "start" ? "bottom" : "top";
  if (rects.reference[length] > rects.floating[length]) {
    mainAlignmentSide = getOppositePlacement(mainAlignmentSide);
  }
  return [mainAlignmentSide, getOppositePlacement(mainAlignmentSide)];
}
function getExpandedPlacements(placement) {
  const oppositePlacement = getOppositePlacement(placement);
  return [getOppositeAlignmentPlacement(placement), oppositePlacement, getOppositeAlignmentPlacement(oppositePlacement)];
}
function getOppositeAlignmentPlacement(placement) {
  return placement.replace(/start|end/g, (alignment) => oppositeAlignmentMap[alignment]);
}
function getSideList(side, isStart, rtl) {
  const lr = ["left", "right"];
  const rl = ["right", "left"];
  const tb = ["top", "bottom"];
  const bt = ["bottom", "top"];
  switch (side) {
    case "top":
    case "bottom":
      if (rtl) return isStart ? rl : lr;
      return isStart ? lr : rl;
    case "left":
    case "right":
      return isStart ? tb : bt;
    default:
      return [];
  }
}
function getOppositeAxisPlacements(placement, flipAlignment, direction, rtl) {
  const alignment = getAlignment(placement);
  let list = getSideList(getSide(placement), direction === "start", rtl);
  if (alignment) {
    list = list.map((side) => side + "-" + alignment);
    if (flipAlignment) {
      list = list.concat(list.map(getOppositeAlignmentPlacement));
    }
  }
  return list;
}
function getOppositePlacement(placement) {
  return placement.replace(/left|right|bottom|top/g, (side) => oppositeSideMap[side]);
}
function expandPaddingObject(padding) {
  return {
    top: 0,
    right: 0,
    bottom: 0,
    left: 0,
    ...padding
  };
}
function getPaddingObject(padding) {
  return typeof padding !== "number" ? expandPaddingObject(padding) : {
    top: padding,
    right: padding,
    bottom: padding,
    left: padding
  };
}
function rectToClientRect(rect) {
  const {
    x,
    y,
    width,
    height
  } = rect;
  return {
    width,
    height,
    top: y,
    left: x,
    right: x + width,
    bottom: y + height,
    x,
    y
  };
}
var sides, alignments, placements, min, max, round, floor, createCoords, oppositeSideMap, oppositeAlignmentMap;
var init_floating_ui_utils = __esm({
  "node_modules/@floating-ui/utils/dist/floating-ui.utils.mjs"() {
    sides = ["top", "right", "bottom", "left"];
    alignments = ["start", "end"];
    placements = sides.reduce((acc, side) => acc.concat(side, side + "-" + alignments[0], side + "-" + alignments[1]), []);
    min = Math.min;
    max = Math.max;
    round = Math.round;
    floor = Math.floor;
    createCoords = (v) => ({
      x: v,
      y: v
    });
    oppositeSideMap = {
      left: "right",
      right: "left",
      bottom: "top",
      top: "bottom"
    };
    oppositeAlignmentMap = {
      start: "end",
      end: "start"
    };
  }
});

// node_modules/@floating-ui/core/dist/floating-ui.core.mjs
function computeCoordsFromPlacement(_ref, placement, rtl) {
  let {
    reference,
    floating
  } = _ref;
  const sideAxis = getSideAxis(placement);
  const alignmentAxis = getAlignmentAxis(placement);
  const alignLength = getAxisLength(alignmentAxis);
  const side = getSide(placement);
  const isVertical = sideAxis === "y";
  const commonX = reference.x + reference.width / 2 - floating.width / 2;
  const commonY = reference.y + reference.height / 2 - floating.height / 2;
  const commonAlign = reference[alignLength] / 2 - floating[alignLength] / 2;
  let coords;
  switch (side) {
    case "top":
      coords = {
        x: commonX,
        y: reference.y - floating.height
      };
      break;
    case "bottom":
      coords = {
        x: commonX,
        y: reference.y + reference.height
      };
      break;
    case "right":
      coords = {
        x: reference.x + reference.width,
        y: commonY
      };
      break;
    case "left":
      coords = {
        x: reference.x - floating.width,
        y: commonY
      };
      break;
    default:
      coords = {
        x: reference.x,
        y: reference.y
      };
  }
  switch (getAlignment(placement)) {
    case "start":
      coords[alignmentAxis] -= commonAlign * (rtl && isVertical ? -1 : 1);
      break;
    case "end":
      coords[alignmentAxis] += commonAlign * (rtl && isVertical ? -1 : 1);
      break;
  }
  return coords;
}
async function detectOverflow(state, options) {
  var _await$platform$isEle;
  if (options === void 0) {
    options = {};
  }
  const {
    x,
    y,
    platform: platform2,
    rects,
    elements,
    strategy
  } = state;
  const {
    boundary = "clippingAncestors",
    rootBoundary = "viewport",
    elementContext = "floating",
    altBoundary = false,
    padding = 0
  } = evaluate(options, state);
  const paddingObject = getPaddingObject(padding);
  const altContext = elementContext === "floating" ? "reference" : "floating";
  const element = elements[altBoundary ? altContext : elementContext];
  const clippingClientRect = rectToClientRect(await platform2.getClippingRect({
    element: ((_await$platform$isEle = await (platform2.isElement == null ? void 0 : platform2.isElement(element))) != null ? _await$platform$isEle : true) ? element : element.contextElement || await (platform2.getDocumentElement == null ? void 0 : platform2.getDocumentElement(elements.floating)),
    boundary,
    rootBoundary,
    strategy
  }));
  const rect = elementContext === "floating" ? {
    x,
    y,
    width: rects.floating.width,
    height: rects.floating.height
  } : rects.reference;
  const offsetParent = await (platform2.getOffsetParent == null ? void 0 : platform2.getOffsetParent(elements.floating));
  const offsetScale = await (platform2.isElement == null ? void 0 : platform2.isElement(offsetParent)) ? await (platform2.getScale == null ? void 0 : platform2.getScale(offsetParent)) || {
    x: 1,
    y: 1
  } : {
    x: 1,
    y: 1
  };
  const elementClientRect = rectToClientRect(platform2.convertOffsetParentRelativeRectToViewportRelativeRect ? await platform2.convertOffsetParentRelativeRectToViewportRelativeRect({
    elements,
    rect,
    offsetParent,
    strategy
  }) : rect);
  return {
    top: (clippingClientRect.top - elementClientRect.top + paddingObject.top) / offsetScale.y,
    bottom: (elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom) / offsetScale.y,
    left: (clippingClientRect.left - elementClientRect.left + paddingObject.left) / offsetScale.x,
    right: (elementClientRect.right - clippingClientRect.right + paddingObject.right) / offsetScale.x
  };
}
function getPlacementList(alignment, autoAlignment, allowedPlacements) {
  const allowedPlacementsSortedByAlignment = alignment ? [...allowedPlacements.filter((placement) => getAlignment(placement) === alignment), ...allowedPlacements.filter((placement) => getAlignment(placement) !== alignment)] : allowedPlacements.filter((placement) => getSide(placement) === placement);
  return allowedPlacementsSortedByAlignment.filter((placement) => {
    if (alignment) {
      return getAlignment(placement) === alignment || (autoAlignment ? getOppositeAlignmentPlacement(placement) !== placement : false);
    }
    return true;
  });
}
function getSideOffsets(overflow, rect) {
  return {
    top: overflow.top - rect.height,
    right: overflow.right - rect.width,
    bottom: overflow.bottom - rect.height,
    left: overflow.left - rect.width
  };
}
function isAnySideFullyClipped(overflow) {
  return sides.some((side) => overflow[side] >= 0);
}
function getBoundingRect(rects) {
  const minX = min(...rects.map((rect) => rect.left));
  const minY = min(...rects.map((rect) => rect.top));
  const maxX = max(...rects.map((rect) => rect.right));
  const maxY = max(...rects.map((rect) => rect.bottom));
  return {
    x: minX,
    y: minY,
    width: maxX - minX,
    height: maxY - minY
  };
}
function getRectsByLine(rects) {
  const sortedRects = rects.slice().sort((a, b) => a.y - b.y);
  const groups = [];
  let prevRect = null;
  for (let i = 0; i < sortedRects.length; i++) {
    const rect = sortedRects[i];
    if (!prevRect || rect.y - prevRect.y > prevRect.height / 2) {
      groups.push([rect]);
    } else {
      groups[groups.length - 1].push(rect);
    }
    prevRect = rect;
  }
  return groups.map((rect) => rectToClientRect(getBoundingRect(rect)));
}
async function convertValueToCoords(state, options) {
  const {
    placement,
    platform: platform2,
    elements
  } = state;
  const rtl = await (platform2.isRTL == null ? void 0 : platform2.isRTL(elements.floating));
  const side = getSide(placement);
  const alignment = getAlignment(placement);
  const isVertical = getSideAxis(placement) === "y";
  const mainAxisMulti = ["left", "top"].includes(side) ? -1 : 1;
  const crossAxisMulti = rtl && isVertical ? -1 : 1;
  const rawValue = evaluate(options, state);
  let {
    mainAxis,
    crossAxis,
    alignmentAxis
  } = typeof rawValue === "number" ? {
    mainAxis: rawValue,
    crossAxis: 0,
    alignmentAxis: null
  } : {
    mainAxis: rawValue.mainAxis || 0,
    crossAxis: rawValue.crossAxis || 0,
    alignmentAxis: rawValue.alignmentAxis
  };
  if (alignment && typeof alignmentAxis === "number") {
    crossAxis = alignment === "end" ? alignmentAxis * -1 : alignmentAxis;
  }
  return isVertical ? {
    x: crossAxis * crossAxisMulti,
    y: mainAxis * mainAxisMulti
  } : {
    x: mainAxis * mainAxisMulti,
    y: crossAxis * crossAxisMulti
  };
}
var computePosition, arrow, autoPlacement, flip, hide, inline, offset, shift, limitShift, size;
var init_floating_ui_core = __esm({
  "node_modules/@floating-ui/core/dist/floating-ui.core.mjs"() {
    init_floating_ui_utils();
    init_floating_ui_utils();
    computePosition = async (reference, floating, config) => {
      const {
        placement = "bottom",
        strategy = "absolute",
        middleware = [],
        platform: platform2
      } = config;
      const validMiddleware = middleware.filter(Boolean);
      const rtl = await (platform2.isRTL == null ? void 0 : platform2.isRTL(floating));
      let rects = await platform2.getElementRects({
        reference,
        floating,
        strategy
      });
      let {
        x,
        y
      } = computeCoordsFromPlacement(rects, placement, rtl);
      let statefulPlacement = placement;
      let middlewareData = {};
      let resetCount = 0;
      for (let i = 0; i < validMiddleware.length; i++) {
        const {
          name,
          fn
        } = validMiddleware[i];
        const {
          x: nextX,
          y: nextY,
          data,
          reset
        } = await fn({
          x,
          y,
          initialPlacement: placement,
          placement: statefulPlacement,
          strategy,
          middlewareData,
          rects,
          platform: platform2,
          elements: {
            reference,
            floating
          }
        });
        x = nextX != null ? nextX : x;
        y = nextY != null ? nextY : y;
        middlewareData = {
          ...middlewareData,
          [name]: {
            ...middlewareData[name],
            ...data
          }
        };
        if (reset && resetCount <= 50) {
          resetCount++;
          if (typeof reset === "object") {
            if (reset.placement) {
              statefulPlacement = reset.placement;
            }
            if (reset.rects) {
              rects = reset.rects === true ? await platform2.getElementRects({
                reference,
                floating,
                strategy
              }) : reset.rects;
            }
            ({
              x,
              y
            } = computeCoordsFromPlacement(rects, statefulPlacement, rtl));
          }
          i = -1;
        }
      }
      return {
        x,
        y,
        placement: statefulPlacement,
        strategy,
        middlewareData
      };
    };
    arrow = (options) => ({
      name: "arrow",
      options,
      async fn(state) {
        const {
          x,
          y,
          placement,
          rects,
          platform: platform2,
          elements,
          middlewareData
        } = state;
        const {
          element,
          padding = 0
        } = evaluate(options, state) || {};
        if (element == null) {
          return {};
        }
        const paddingObject = getPaddingObject(padding);
        const coords = {
          x,
          y
        };
        const axis = getAlignmentAxis(placement);
        const length = getAxisLength(axis);
        const arrowDimensions = await platform2.getDimensions(element);
        const isYAxis = axis === "y";
        const minProp = isYAxis ? "top" : "left";
        const maxProp = isYAxis ? "bottom" : "right";
        const clientProp = isYAxis ? "clientHeight" : "clientWidth";
        const endDiff = rects.reference[length] + rects.reference[axis] - coords[axis] - rects.floating[length];
        const startDiff = coords[axis] - rects.reference[axis];
        const arrowOffsetParent = await (platform2.getOffsetParent == null ? void 0 : platform2.getOffsetParent(element));
        let clientSize = arrowOffsetParent ? arrowOffsetParent[clientProp] : 0;
        if (!clientSize || !await (platform2.isElement == null ? void 0 : platform2.isElement(arrowOffsetParent))) {
          clientSize = elements.floating[clientProp] || rects.floating[length];
        }
        const centerToReference = endDiff / 2 - startDiff / 2;
        const largestPossiblePadding = clientSize / 2 - arrowDimensions[length] / 2 - 1;
        const minPadding = min(paddingObject[minProp], largestPossiblePadding);
        const maxPadding = min(paddingObject[maxProp], largestPossiblePadding);
        const min$1 = minPadding;
        const max2 = clientSize - arrowDimensions[length] - maxPadding;
        const center = clientSize / 2 - arrowDimensions[length] / 2 + centerToReference;
        const offset3 = clamp(min$1, center, max2);
        const shouldAddOffset = !middlewareData.arrow && getAlignment(placement) != null && center !== offset3 && rects.reference[length] / 2 - (center < min$1 ? minPadding : maxPadding) - arrowDimensions[length] / 2 < 0;
        const alignmentOffset = shouldAddOffset ? center < min$1 ? center - min$1 : center - max2 : 0;
        return {
          [axis]: coords[axis] + alignmentOffset,
          data: {
            [axis]: offset3,
            centerOffset: center - offset3 - alignmentOffset,
            ...shouldAddOffset && {
              alignmentOffset
            }
          },
          reset: shouldAddOffset
        };
      }
    });
    autoPlacement = function(options) {
      if (options === void 0) {
        options = {};
      }
      return {
        name: "autoPlacement",
        options,
        async fn(state) {
          var _middlewareData$autoP, _middlewareData$autoP2, _placementsThatFitOnE;
          const {
            rects,
            middlewareData,
            placement,
            platform: platform2,
            elements
          } = state;
          const {
            crossAxis = false,
            alignment,
            allowedPlacements = placements,
            autoAlignment = true,
            ...detectOverflowOptions
          } = evaluate(options, state);
          const placements$1 = alignment !== void 0 || allowedPlacements === placements ? getPlacementList(alignment || null, autoAlignment, allowedPlacements) : allowedPlacements;
          const overflow = await detectOverflow(state, detectOverflowOptions);
          const currentIndex = ((_middlewareData$autoP = middlewareData.autoPlacement) == null ? void 0 : _middlewareData$autoP.index) || 0;
          const currentPlacement = placements$1[currentIndex];
          if (currentPlacement == null) {
            return {};
          }
          const alignmentSides = getAlignmentSides(currentPlacement, rects, await (platform2.isRTL == null ? void 0 : platform2.isRTL(elements.floating)));
          if (placement !== currentPlacement) {
            return {
              reset: {
                placement: placements$1[0]
              }
            };
          }
          const currentOverflows = [overflow[getSide(currentPlacement)], overflow[alignmentSides[0]], overflow[alignmentSides[1]]];
          const allOverflows = [...((_middlewareData$autoP2 = middlewareData.autoPlacement) == null ? void 0 : _middlewareData$autoP2.overflows) || [], {
            placement: currentPlacement,
            overflows: currentOverflows
          }];
          const nextPlacement = placements$1[currentIndex + 1];
          if (nextPlacement) {
            return {
              data: {
                index: currentIndex + 1,
                overflows: allOverflows
              },
              reset: {
                placement: nextPlacement
              }
            };
          }
          const placementsSortedByMostSpace = allOverflows.map((d) => {
            const alignment2 = getAlignment(d.placement);
            return [d.placement, alignment2 && crossAxis ? (
              // Check along the mainAxis and main crossAxis side.
              d.overflows.slice(0, 2).reduce((acc, v) => acc + v, 0)
            ) : (
              // Check only the mainAxis.
              d.overflows[0]
            ), d.overflows];
          }).sort((a, b) => a[1] - b[1]);
          const placementsThatFitOnEachSide = placementsSortedByMostSpace.filter((d) => d[2].slice(
            0,
            // Aligned placements should not check their opposite crossAxis
            // side.
            getAlignment(d[0]) ? 2 : 3
          ).every((v) => v <= 0));
          const resetPlacement = ((_placementsThatFitOnE = placementsThatFitOnEachSide[0]) == null ? void 0 : _placementsThatFitOnE[0]) || placementsSortedByMostSpace[0][0];
          if (resetPlacement !== placement) {
            return {
              data: {
                index: currentIndex + 1,
                overflows: allOverflows
              },
              reset: {
                placement: resetPlacement
              }
            };
          }
          return {};
        }
      };
    };
    flip = function(options) {
      if (options === void 0) {
        options = {};
      }
      return {
        name: "flip",
        options,
        async fn(state) {
          var _middlewareData$arrow, _middlewareData$flip;
          const {
            placement,
            middlewareData,
            rects,
            initialPlacement,
            platform: platform2,
            elements
          } = state;
          const {
            mainAxis: checkMainAxis = true,
            crossAxis: checkCrossAxis = true,
            fallbackPlacements: specifiedFallbackPlacements,
            fallbackStrategy = "bestFit",
            fallbackAxisSideDirection = "none",
            flipAlignment = true,
            ...detectOverflowOptions
          } = evaluate(options, state);
          if ((_middlewareData$arrow = middlewareData.arrow) != null && _middlewareData$arrow.alignmentOffset) {
            return {};
          }
          const side = getSide(placement);
          const initialSideAxis = getSideAxis(initialPlacement);
          const isBasePlacement = getSide(initialPlacement) === initialPlacement;
          const rtl = await (platform2.isRTL == null ? void 0 : platform2.isRTL(elements.floating));
          const fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipAlignment ? [getOppositePlacement(initialPlacement)] : getExpandedPlacements(initialPlacement));
          const hasFallbackAxisSideDirection = fallbackAxisSideDirection !== "none";
          if (!specifiedFallbackPlacements && hasFallbackAxisSideDirection) {
            fallbackPlacements.push(...getOppositeAxisPlacements(initialPlacement, flipAlignment, fallbackAxisSideDirection, rtl));
          }
          const placements2 = [initialPlacement, ...fallbackPlacements];
          const overflow = await detectOverflow(state, detectOverflowOptions);
          const overflows = [];
          let overflowsData = ((_middlewareData$flip = middlewareData.flip) == null ? void 0 : _middlewareData$flip.overflows) || [];
          if (checkMainAxis) {
            overflows.push(overflow[side]);
          }
          if (checkCrossAxis) {
            const sides2 = getAlignmentSides(placement, rects, rtl);
            overflows.push(overflow[sides2[0]], overflow[sides2[1]]);
          }
          overflowsData = [...overflowsData, {
            placement,
            overflows
          }];
          if (!overflows.every((side2) => side2 <= 0)) {
            var _middlewareData$flip2, _overflowsData$filter;
            const nextIndex = (((_middlewareData$flip2 = middlewareData.flip) == null ? void 0 : _middlewareData$flip2.index) || 0) + 1;
            const nextPlacement = placements2[nextIndex];
            if (nextPlacement) {
              var _overflowsData$;
              const ignoreCrossAxisOverflow = checkCrossAxis === "alignment" ? initialSideAxis !== getSideAxis(nextPlacement) : false;
              const hasInitialMainAxisOverflow = ((_overflowsData$ = overflowsData[0]) == null ? void 0 : _overflowsData$.overflows[0]) > 0;
              if (!ignoreCrossAxisOverflow || hasInitialMainAxisOverflow) {
                return {
                  data: {
                    index: nextIndex,
                    overflows: overflowsData
                  },
                  reset: {
                    placement: nextPlacement
                  }
                };
              }
            }
            let resetPlacement = (_overflowsData$filter = overflowsData.filter((d) => d.overflows[0] <= 0).sort((a, b) => a.overflows[1] - b.overflows[1])[0]) == null ? void 0 : _overflowsData$filter.placement;
            if (!resetPlacement) {
              switch (fallbackStrategy) {
                case "bestFit": {
                  var _overflowsData$filter2;
                  const placement2 = (_overflowsData$filter2 = overflowsData.filter((d) => {
                    if (hasFallbackAxisSideDirection) {
                      const currentSideAxis = getSideAxis(d.placement);
                      return currentSideAxis === initialSideAxis || // Create a bias to the `y` side axis due to horizontal
                      // reading directions favoring greater width.
                      currentSideAxis === "y";
                    }
                    return true;
                  }).map((d) => [d.placement, d.overflows.filter((overflow2) => overflow2 > 0).reduce((acc, overflow2) => acc + overflow2, 0)]).sort((a, b) => a[1] - b[1])[0]) == null ? void 0 : _overflowsData$filter2[0];
                  if (placement2) {
                    resetPlacement = placement2;
                  }
                  break;
                }
                case "initialPlacement":
                  resetPlacement = initialPlacement;
                  break;
              }
            }
            if (placement !== resetPlacement) {
              return {
                reset: {
                  placement: resetPlacement
                }
              };
            }
          }
          return {};
        }
      };
    };
    hide = function(options) {
      if (options === void 0) {
        options = {};
      }
      return {
        name: "hide",
        options,
        async fn(state) {
          const {
            rects
          } = state;
          const {
            strategy = "referenceHidden",
            ...detectOverflowOptions
          } = evaluate(options, state);
          switch (strategy) {
            case "referenceHidden": {
              const overflow = await detectOverflow(state, {
                ...detectOverflowOptions,
                elementContext: "reference"
              });
              const offsets = getSideOffsets(overflow, rects.reference);
              return {
                data: {
                  referenceHiddenOffsets: offsets,
                  referenceHidden: isAnySideFullyClipped(offsets)
                }
              };
            }
            case "escaped": {
              const overflow = await detectOverflow(state, {
                ...detectOverflowOptions,
                altBoundary: true
              });
              const offsets = getSideOffsets(overflow, rects.floating);
              return {
                data: {
                  escapedOffsets: offsets,
                  escaped: isAnySideFullyClipped(offsets)
                }
              };
            }
            default: {
              return {};
            }
          }
        }
      };
    };
    inline = function(options) {
      if (options === void 0) {
        options = {};
      }
      return {
        name: "inline",
        options,
        async fn(state) {
          const {
            placement,
            elements,
            rects,
            platform: platform2,
            strategy
          } = state;
          const {
            padding = 2,
            x,
            y
          } = evaluate(options, state);
          const nativeClientRects = Array.from(await (platform2.getClientRects == null ? void 0 : platform2.getClientRects(elements.reference)) || []);
          const clientRects = getRectsByLine(nativeClientRects);
          const fallback = rectToClientRect(getBoundingRect(nativeClientRects));
          const paddingObject = getPaddingObject(padding);
          function getBoundingClientRect2() {
            if (clientRects.length === 2 && clientRects[0].left > clientRects[1].right && x != null && y != null) {
              return clientRects.find((rect) => x > rect.left - paddingObject.left && x < rect.right + paddingObject.right && y > rect.top - paddingObject.top && y < rect.bottom + paddingObject.bottom) || fallback;
            }
            if (clientRects.length >= 2) {
              if (getSideAxis(placement) === "y") {
                const firstRect = clientRects[0];
                const lastRect = clientRects[clientRects.length - 1];
                const isTop = getSide(placement) === "top";
                const top2 = firstRect.top;
                const bottom2 = lastRect.bottom;
                const left2 = isTop ? firstRect.left : lastRect.left;
                const right2 = isTop ? firstRect.right : lastRect.right;
                const width2 = right2 - left2;
                const height2 = bottom2 - top2;
                return {
                  top: top2,
                  bottom: bottom2,
                  left: left2,
                  right: right2,
                  width: width2,
                  height: height2,
                  x: left2,
                  y: top2
                };
              }
              const isLeftSide = getSide(placement) === "left";
              const maxRight = max(...clientRects.map((rect) => rect.right));
              const minLeft = min(...clientRects.map((rect) => rect.left));
              const measureRects = clientRects.filter((rect) => isLeftSide ? rect.left === minLeft : rect.right === maxRight);
              const top = measureRects[0].top;
              const bottom = measureRects[measureRects.length - 1].bottom;
              const left = minLeft;
              const right = maxRight;
              const width = right - left;
              const height = bottom - top;
              return {
                top,
                bottom,
                left,
                right,
                width,
                height,
                x: left,
                y: top
              };
            }
            return fallback;
          }
          const resetRects = await platform2.getElementRects({
            reference: {
              getBoundingClientRect: getBoundingClientRect2
            },
            floating: elements.floating,
            strategy
          });
          if (rects.reference.x !== resetRects.reference.x || rects.reference.y !== resetRects.reference.y || rects.reference.width !== resetRects.reference.width || rects.reference.height !== resetRects.reference.height) {
            return {
              reset: {
                rects: resetRects
              }
            };
          }
          return {};
        }
      };
    };
    offset = function(options) {
      if (options === void 0) {
        options = 0;
      }
      return {
        name: "offset",
        options,
        async fn(state) {
          var _middlewareData$offse, _middlewareData$arrow;
          const {
            x,
            y,
            placement,
            middlewareData
          } = state;
          const diffCoords = await convertValueToCoords(state, options);
          if (placement === ((_middlewareData$offse = middlewareData.offset) == null ? void 0 : _middlewareData$offse.placement) && (_middlewareData$arrow = middlewareData.arrow) != null && _middlewareData$arrow.alignmentOffset) {
            return {};
          }
          return {
            x: x + diffCoords.x,
            y: y + diffCoords.y,
            data: {
              ...diffCoords,
              placement
            }
          };
        }
      };
    };
    shift = function(options) {
      if (options === void 0) {
        options = {};
      }
      return {
        name: "shift",
        options,
        async fn(state) {
          const {
            x,
            y,
            placement
          } = state;
          const {
            mainAxis: checkMainAxis = true,
            crossAxis: checkCrossAxis = false,
            limiter = {
              fn: (_ref) => {
                let {
                  x: x2,
                  y: y2
                } = _ref;
                return {
                  x: x2,
                  y: y2
                };
              }
            },
            ...detectOverflowOptions
          } = evaluate(options, state);
          const coords = {
            x,
            y
          };
          const overflow = await detectOverflow(state, detectOverflowOptions);
          const crossAxis = getSideAxis(getSide(placement));
          const mainAxis = getOppositeAxis(crossAxis);
          let mainAxisCoord = coords[mainAxis];
          let crossAxisCoord = coords[crossAxis];
          if (checkMainAxis) {
            const minSide = mainAxis === "y" ? "top" : "left";
            const maxSide = mainAxis === "y" ? "bottom" : "right";
            const min2 = mainAxisCoord + overflow[minSide];
            const max2 = mainAxisCoord - overflow[maxSide];
            mainAxisCoord = clamp(min2, mainAxisCoord, max2);
          }
          if (checkCrossAxis) {
            const minSide = crossAxis === "y" ? "top" : "left";
            const maxSide = crossAxis === "y" ? "bottom" : "right";
            const min2 = crossAxisCoord + overflow[minSide];
            const max2 = crossAxisCoord - overflow[maxSide];
            crossAxisCoord = clamp(min2, crossAxisCoord, max2);
          }
          const limitedCoords = limiter.fn({
            ...state,
            [mainAxis]: mainAxisCoord,
            [crossAxis]: crossAxisCoord
          });
          return {
            ...limitedCoords,
            data: {
              x: limitedCoords.x - x,
              y: limitedCoords.y - y,
              enabled: {
                [mainAxis]: checkMainAxis,
                [crossAxis]: checkCrossAxis
              }
            }
          };
        }
      };
    };
    limitShift = function(options) {
      if (options === void 0) {
        options = {};
      }
      return {
        options,
        fn(state) {
          const {
            x,
            y,
            placement,
            rects,
            middlewareData
          } = state;
          const {
            offset: offset3 = 0,
            mainAxis: checkMainAxis = true,
            crossAxis: checkCrossAxis = true
          } = evaluate(options, state);
          const coords = {
            x,
            y
          };
          const crossAxis = getSideAxis(placement);
          const mainAxis = getOppositeAxis(crossAxis);
          let mainAxisCoord = coords[mainAxis];
          let crossAxisCoord = coords[crossAxis];
          const rawOffset = evaluate(offset3, state);
          const computedOffset = typeof rawOffset === "number" ? {
            mainAxis: rawOffset,
            crossAxis: 0
          } : {
            mainAxis: 0,
            crossAxis: 0,
            ...rawOffset
          };
          if (checkMainAxis) {
            const len = mainAxis === "y" ? "height" : "width";
            const limitMin = rects.reference[mainAxis] - rects.floating[len] + computedOffset.mainAxis;
            const limitMax = rects.reference[mainAxis] + rects.reference[len] - computedOffset.mainAxis;
            if (mainAxisCoord < limitMin) {
              mainAxisCoord = limitMin;
            } else if (mainAxisCoord > limitMax) {
              mainAxisCoord = limitMax;
            }
          }
          if (checkCrossAxis) {
            var _middlewareData$offse, _middlewareData$offse2;
            const len = mainAxis === "y" ? "width" : "height";
            const isOriginSide = ["top", "left"].includes(getSide(placement));
            const limitMin = rects.reference[crossAxis] - rects.floating[len] + (isOriginSide ? ((_middlewareData$offse = middlewareData.offset) == null ? void 0 : _middlewareData$offse[crossAxis]) || 0 : 0) + (isOriginSide ? 0 : computedOffset.crossAxis);
            const limitMax = rects.reference[crossAxis] + rects.reference[len] + (isOriginSide ? 0 : ((_middlewareData$offse2 = middlewareData.offset) == null ? void 0 : _middlewareData$offse2[crossAxis]) || 0) - (isOriginSide ? computedOffset.crossAxis : 0);
            if (crossAxisCoord < limitMin) {
              crossAxisCoord = limitMin;
            } else if (crossAxisCoord > limitMax) {
              crossAxisCoord = limitMax;
            }
          }
          return {
            [mainAxis]: mainAxisCoord,
            [crossAxis]: crossAxisCoord
          };
        }
      };
    };
    size = function(options) {
      if (options === void 0) {
        options = {};
      }
      return {
        name: "size",
        options,
        async fn(state) {
          var _state$middlewareData, _state$middlewareData2;
          const {
            placement,
            rects,
            platform: platform2,
            elements
          } = state;
          const {
            apply = () => {
            },
            ...detectOverflowOptions
          } = evaluate(options, state);
          const overflow = await detectOverflow(state, detectOverflowOptions);
          const side = getSide(placement);
          const alignment = getAlignment(placement);
          const isYAxis = getSideAxis(placement) === "y";
          const {
            width,
            height
          } = rects.floating;
          let heightSide;
          let widthSide;
          if (side === "top" || side === "bottom") {
            heightSide = side;
            widthSide = alignment === (await (platform2.isRTL == null ? void 0 : platform2.isRTL(elements.floating)) ? "start" : "end") ? "left" : "right";
          } else {
            widthSide = side;
            heightSide = alignment === "end" ? "top" : "bottom";
          }
          const maximumClippingHeight = height - overflow.top - overflow.bottom;
          const maximumClippingWidth = width - overflow.left - overflow.right;
          const overflowAvailableHeight = min(height - overflow[heightSide], maximumClippingHeight);
          const overflowAvailableWidth = min(width - overflow[widthSide], maximumClippingWidth);
          const noShift = !state.middlewareData.shift;
          let availableHeight = overflowAvailableHeight;
          let availableWidth = overflowAvailableWidth;
          if ((_state$middlewareData = state.middlewareData.shift) != null && _state$middlewareData.enabled.x) {
            availableWidth = maximumClippingWidth;
          }
          if ((_state$middlewareData2 = state.middlewareData.shift) != null && _state$middlewareData2.enabled.y) {
            availableHeight = maximumClippingHeight;
          }
          if (noShift && !alignment) {
            const xMin = max(overflow.left, 0);
            const xMax = max(overflow.right, 0);
            const yMin = max(overflow.top, 0);
            const yMax = max(overflow.bottom, 0);
            if (isYAxis) {
              availableWidth = width - 2 * (xMin !== 0 || xMax !== 0 ? xMin + xMax : max(overflow.left, overflow.right));
            } else {
              availableHeight = height - 2 * (yMin !== 0 || yMax !== 0 ? yMin + yMax : max(overflow.top, overflow.bottom));
            }
          }
          await apply({
            ...state,
            availableWidth,
            availableHeight
          });
          const nextDimensions = await platform2.getDimensions(elements.floating);
          if (width !== nextDimensions.width || height !== nextDimensions.height) {
            return {
              reset: {
                rects: true
              }
            };
          }
          return {};
        }
      };
    };
  }
});

// node_modules/@floating-ui/utils/dist/floating-ui.utils.dom.mjs
function hasWindow() {
  return typeof window !== "undefined";
}
function getNodeName(node) {
  if (isNode(node)) {
    return (node.nodeName || "").toLowerCase();
  }
  return "#document";
}
function getWindow(node) {
  var _node$ownerDocument;
  return (node == null || (_node$ownerDocument = node.ownerDocument) == null ? void 0 : _node$ownerDocument.defaultView) || window;
}
function getDocumentElement(node) {
  var _ref;
  return (_ref = (isNode(node) ? node.ownerDocument : node.document) || window.document) == null ? void 0 : _ref.documentElement;
}
function isNode(value) {
  if (!hasWindow()) {
    return false;
  }
  return value instanceof Node || value instanceof getWindow(value).Node;
}
function isElement(value) {
  if (!hasWindow()) {
    return false;
  }
  return value instanceof Element || value instanceof getWindow(value).Element;
}
function isHTMLElement(value) {
  if (!hasWindow()) {
    return false;
  }
  return value instanceof HTMLElement || value instanceof getWindow(value).HTMLElement;
}
function isShadowRoot(value) {
  if (!hasWindow() || typeof ShadowRoot === "undefined") {
    return false;
  }
  return value instanceof ShadowRoot || value instanceof getWindow(value).ShadowRoot;
}
function isOverflowElement(element) {
  const {
    overflow,
    overflowX,
    overflowY,
    display
  } = getComputedStyle2(element);
  return /auto|scroll|overlay|hidden|clip/.test(overflow + overflowY + overflowX) && !["inline", "contents"].includes(display);
}
function isTableElement(element) {
  return ["table", "td", "th"].includes(getNodeName(element));
}
function isTopLayer(element) {
  return [":popover-open", ":modal"].some((selector) => {
    try {
      return element.matches(selector);
    } catch (e) {
      return false;
    }
  });
}
function isContainingBlock(elementOrCss) {
  const webkit = isWebKit();
  const css = isElement(elementOrCss) ? getComputedStyle2(elementOrCss) : elementOrCss;
  return ["transform", "translate", "scale", "rotate", "perspective"].some((value) => css[value] ? css[value] !== "none" : false) || (css.containerType ? css.containerType !== "normal" : false) || !webkit && (css.backdropFilter ? css.backdropFilter !== "none" : false) || !webkit && (css.filter ? css.filter !== "none" : false) || ["transform", "translate", "scale", "rotate", "perspective", "filter"].some((value) => (css.willChange || "").includes(value)) || ["paint", "layout", "strict", "content"].some((value) => (css.contain || "").includes(value));
}
function getContainingBlock(element) {
  let currentNode = getParentNode(element);
  while (isHTMLElement(currentNode) && !isLastTraversableNode(currentNode)) {
    if (isContainingBlock(currentNode)) {
      return currentNode;
    } else if (isTopLayer(currentNode)) {
      return null;
    }
    currentNode = getParentNode(currentNode);
  }
  return null;
}
function isWebKit() {
  if (typeof CSS === "undefined" || !CSS.supports) return false;
  return CSS.supports("-webkit-backdrop-filter", "none");
}
function isLastTraversableNode(node) {
  return ["html", "body", "#document"].includes(getNodeName(node));
}
function getComputedStyle2(element) {
  return getWindow(element).getComputedStyle(element);
}
function getNodeScroll(element) {
  if (isElement(element)) {
    return {
      scrollLeft: element.scrollLeft,
      scrollTop: element.scrollTop
    };
  }
  return {
    scrollLeft: element.scrollX,
    scrollTop: element.scrollY
  };
}
function getParentNode(node) {
  if (getNodeName(node) === "html") {
    return node;
  }
  const result = (
    // Step into the shadow DOM of the parent of a slotted node.
    node.assignedSlot || // DOM Element detected.
    node.parentNode || // ShadowRoot detected.
    isShadowRoot(node) && node.host || // Fallback.
    getDocumentElement(node)
  );
  return isShadowRoot(result) ? result.host : result;
}
function getNearestOverflowAncestor(node) {
  const parentNode = getParentNode(node);
  if (isLastTraversableNode(parentNode)) {
    return node.ownerDocument ? node.ownerDocument.body : node.body;
  }
  if (isHTMLElement(parentNode) && isOverflowElement(parentNode)) {
    return parentNode;
  }
  return getNearestOverflowAncestor(parentNode);
}
function getOverflowAncestors(node, list, traverseIframes) {
  var _node$ownerDocument2;
  if (list === void 0) {
    list = [];
  }
  if (traverseIframes === void 0) {
    traverseIframes = true;
  }
  const scrollableAncestor = getNearestOverflowAncestor(node);
  const isBody = scrollableAncestor === ((_node$ownerDocument2 = node.ownerDocument) == null ? void 0 : _node$ownerDocument2.body);
  const win = getWindow(scrollableAncestor);
  if (isBody) {
    const frameElement = getFrameElement(win);
    return list.concat(win, win.visualViewport || [], isOverflowElement(scrollableAncestor) ? scrollableAncestor : [], frameElement && traverseIframes ? getOverflowAncestors(frameElement) : []);
  }
  return list.concat(scrollableAncestor, getOverflowAncestors(scrollableAncestor, [], traverseIframes));
}
function getFrameElement(win) {
  return win.parent && Object.getPrototypeOf(win.parent) ? win.frameElement : null;
}
var init_floating_ui_utils_dom = __esm({
  "node_modules/@floating-ui/utils/dist/floating-ui.utils.dom.mjs"() {
  }
});

// node_modules/@floating-ui/dom/dist/floating-ui.dom.mjs
function getCssDimensions(element) {
  const css = getComputedStyle2(element);
  let width = parseFloat(css.width) || 0;
  let height = parseFloat(css.height) || 0;
  const hasOffset = isHTMLElement(element);
  const offsetWidth = hasOffset ? element.offsetWidth : width;
  const offsetHeight = hasOffset ? element.offsetHeight : height;
  const shouldFallback = round(width) !== offsetWidth || round(height) !== offsetHeight;
  if (shouldFallback) {
    width = offsetWidth;
    height = offsetHeight;
  }
  return {
    width,
    height,
    $: shouldFallback
  };
}
function unwrapElement(element) {
  return !isElement(element) ? element.contextElement : element;
}
function getScale(element) {
  const domElement = unwrapElement(element);
  if (!isHTMLElement(domElement)) {
    return createCoords(1);
  }
  const rect = domElement.getBoundingClientRect();
  const {
    width,
    height,
    $
  } = getCssDimensions(domElement);
  let x = ($ ? round(rect.width) : rect.width) / width;
  let y = ($ ? round(rect.height) : rect.height) / height;
  if (!x || !Number.isFinite(x)) {
    x = 1;
  }
  if (!y || !Number.isFinite(y)) {
    y = 1;
  }
  return {
    x,
    y
  };
}
function getVisualOffsets(element) {
  const win = getWindow(element);
  if (!isWebKit() || !win.visualViewport) {
    return noOffsets;
  }
  return {
    x: win.visualViewport.offsetLeft,
    y: win.visualViewport.offsetTop
  };
}
function shouldAddVisualOffsets(element, isFixed, floatingOffsetParent) {
  if (isFixed === void 0) {
    isFixed = false;
  }
  if (!floatingOffsetParent || isFixed && floatingOffsetParent !== getWindow(element)) {
    return false;
  }
  return isFixed;
}
function getBoundingClientRect(element, includeScale, isFixedStrategy, offsetParent) {
  if (includeScale === void 0) {
    includeScale = false;
  }
  if (isFixedStrategy === void 0) {
    isFixedStrategy = false;
  }
  const clientRect = element.getBoundingClientRect();
  const domElement = unwrapElement(element);
  let scale = createCoords(1);
  if (includeScale) {
    if (offsetParent) {
      if (isElement(offsetParent)) {
        scale = getScale(offsetParent);
      }
    } else {
      scale = getScale(element);
    }
  }
  const visualOffsets = shouldAddVisualOffsets(domElement, isFixedStrategy, offsetParent) ? getVisualOffsets(domElement) : createCoords(0);
  let x = (clientRect.left + visualOffsets.x) / scale.x;
  let y = (clientRect.top + visualOffsets.y) / scale.y;
  let width = clientRect.width / scale.x;
  let height = clientRect.height / scale.y;
  if (domElement) {
    const win = getWindow(domElement);
    const offsetWin = offsetParent && isElement(offsetParent) ? getWindow(offsetParent) : offsetParent;
    let currentWin = win;
    let currentIFrame = getFrameElement(currentWin);
    while (currentIFrame && offsetParent && offsetWin !== currentWin) {
      const iframeScale = getScale(currentIFrame);
      const iframeRect = currentIFrame.getBoundingClientRect();
      const css = getComputedStyle2(currentIFrame);
      const left = iframeRect.left + (currentIFrame.clientLeft + parseFloat(css.paddingLeft)) * iframeScale.x;
      const top = iframeRect.top + (currentIFrame.clientTop + parseFloat(css.paddingTop)) * iframeScale.y;
      x *= iframeScale.x;
      y *= iframeScale.y;
      width *= iframeScale.x;
      height *= iframeScale.y;
      x += left;
      y += top;
      currentWin = getWindow(currentIFrame);
      currentIFrame = getFrameElement(currentWin);
    }
  }
  return rectToClientRect({
    width,
    height,
    x,
    y
  });
}
function getWindowScrollBarX(element, rect) {
  const leftScroll = getNodeScroll(element).scrollLeft;
  if (!rect) {
    return getBoundingClientRect(getDocumentElement(element)).left + leftScroll;
  }
  return rect.left + leftScroll;
}
function getHTMLOffset(documentElement, scroll, ignoreScrollbarX) {
  if (ignoreScrollbarX === void 0) {
    ignoreScrollbarX = false;
  }
  const htmlRect = documentElement.getBoundingClientRect();
  const x = htmlRect.left + scroll.scrollLeft - (ignoreScrollbarX ? 0 : (
    // RTL <body> scrollbar.
    getWindowScrollBarX(documentElement, htmlRect)
  ));
  const y = htmlRect.top + scroll.scrollTop;
  return {
    x,
    y
  };
}
function convertOffsetParentRelativeRectToViewportRelativeRect(_ref) {
  let {
    elements,
    rect,
    offsetParent,
    strategy
  } = _ref;
  const isFixed = strategy === "fixed";
  const documentElement = getDocumentElement(offsetParent);
  const topLayer = elements ? isTopLayer(elements.floating) : false;
  if (offsetParent === documentElement || topLayer && isFixed) {
    return rect;
  }
  let scroll = {
    scrollLeft: 0,
    scrollTop: 0
  };
  let scale = createCoords(1);
  const offsets = createCoords(0);
  const isOffsetParentAnElement = isHTMLElement(offsetParent);
  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
    if (getNodeName(offsetParent) !== "body" || isOverflowElement(documentElement)) {
      scroll = getNodeScroll(offsetParent);
    }
    if (isHTMLElement(offsetParent)) {
      const offsetRect = getBoundingClientRect(offsetParent);
      scale = getScale(offsetParent);
      offsets.x = offsetRect.x + offsetParent.clientLeft;
      offsets.y = offsetRect.y + offsetParent.clientTop;
    }
  }
  const htmlOffset = documentElement && !isOffsetParentAnElement && !isFixed ? getHTMLOffset(documentElement, scroll, true) : createCoords(0);
  return {
    width: rect.width * scale.x,
    height: rect.height * scale.y,
    x: rect.x * scale.x - scroll.scrollLeft * scale.x + offsets.x + htmlOffset.x,
    y: rect.y * scale.y - scroll.scrollTop * scale.y + offsets.y + htmlOffset.y
  };
}
function getClientRects(element) {
  return Array.from(element.getClientRects());
}
function getDocumentRect(element) {
  const html = getDocumentElement(element);
  const scroll = getNodeScroll(element);
  const body = element.ownerDocument.body;
  const width = max(html.scrollWidth, html.clientWidth, body.scrollWidth, body.clientWidth);
  const height = max(html.scrollHeight, html.clientHeight, body.scrollHeight, body.clientHeight);
  let x = -scroll.scrollLeft + getWindowScrollBarX(element);
  const y = -scroll.scrollTop;
  if (getComputedStyle2(body).direction === "rtl") {
    x += max(html.clientWidth, body.clientWidth) - width;
  }
  return {
    width,
    height,
    x,
    y
  };
}
function getViewportRect(element, strategy) {
  const win = getWindow(element);
  const html = getDocumentElement(element);
  const visualViewport = win.visualViewport;
  let width = html.clientWidth;
  let height = html.clientHeight;
  let x = 0;
  let y = 0;
  if (visualViewport) {
    width = visualViewport.width;
    height = visualViewport.height;
    const visualViewportBased = isWebKit();
    if (!visualViewportBased || visualViewportBased && strategy === "fixed") {
      x = visualViewport.offsetLeft;
      y = visualViewport.offsetTop;
    }
  }
  return {
    width,
    height,
    x,
    y
  };
}
function getInnerBoundingClientRect(element, strategy) {
  const clientRect = getBoundingClientRect(element, true, strategy === "fixed");
  const top = clientRect.top + element.clientTop;
  const left = clientRect.left + element.clientLeft;
  const scale = isHTMLElement(element) ? getScale(element) : createCoords(1);
  const width = element.clientWidth * scale.x;
  const height = element.clientHeight * scale.y;
  const x = left * scale.x;
  const y = top * scale.y;
  return {
    width,
    height,
    x,
    y
  };
}
function getClientRectFromClippingAncestor(element, clippingAncestor, strategy) {
  let rect;
  if (clippingAncestor === "viewport") {
    rect = getViewportRect(element, strategy);
  } else if (clippingAncestor === "document") {
    rect = getDocumentRect(getDocumentElement(element));
  } else if (isElement(clippingAncestor)) {
    rect = getInnerBoundingClientRect(clippingAncestor, strategy);
  } else {
    const visualOffsets = getVisualOffsets(element);
    rect = {
      x: clippingAncestor.x - visualOffsets.x,
      y: clippingAncestor.y - visualOffsets.y,
      width: clippingAncestor.width,
      height: clippingAncestor.height
    };
  }
  return rectToClientRect(rect);
}
function hasFixedPositionAncestor(element, stopNode) {
  const parentNode = getParentNode(element);
  if (parentNode === stopNode || !isElement(parentNode) || isLastTraversableNode(parentNode)) {
    return false;
  }
  return getComputedStyle2(parentNode).position === "fixed" || hasFixedPositionAncestor(parentNode, stopNode);
}
function getClippingElementAncestors(element, cache) {
  const cachedResult = cache.get(element);
  if (cachedResult) {
    return cachedResult;
  }
  let result = getOverflowAncestors(element, [], false).filter((el) => isElement(el) && getNodeName(el) !== "body");
  let currentContainingBlockComputedStyle = null;
  const elementIsFixed = getComputedStyle2(element).position === "fixed";
  let currentNode = elementIsFixed ? getParentNode(element) : element;
  while (isElement(currentNode) && !isLastTraversableNode(currentNode)) {
    const computedStyle = getComputedStyle2(currentNode);
    const currentNodeIsContaining = isContainingBlock(currentNode);
    if (!currentNodeIsContaining && computedStyle.position === "fixed") {
      currentContainingBlockComputedStyle = null;
    }
    const shouldDropCurrentNode = elementIsFixed ? !currentNodeIsContaining && !currentContainingBlockComputedStyle : !currentNodeIsContaining && computedStyle.position === "static" && !!currentContainingBlockComputedStyle && ["absolute", "fixed"].includes(currentContainingBlockComputedStyle.position) || isOverflowElement(currentNode) && !currentNodeIsContaining && hasFixedPositionAncestor(element, currentNode);
    if (shouldDropCurrentNode) {
      result = result.filter((ancestor) => ancestor !== currentNode);
    } else {
      currentContainingBlockComputedStyle = computedStyle;
    }
    currentNode = getParentNode(currentNode);
  }
  cache.set(element, result);
  return result;
}
function getClippingRect(_ref) {
  let {
    element,
    boundary,
    rootBoundary,
    strategy
  } = _ref;
  const elementClippingAncestors = boundary === "clippingAncestors" ? isTopLayer(element) ? [] : getClippingElementAncestors(element, this._c) : [].concat(boundary);
  const clippingAncestors = [...elementClippingAncestors, rootBoundary];
  const firstClippingAncestor = clippingAncestors[0];
  const clippingRect = clippingAncestors.reduce((accRect, clippingAncestor) => {
    const rect = getClientRectFromClippingAncestor(element, clippingAncestor, strategy);
    accRect.top = max(rect.top, accRect.top);
    accRect.right = min(rect.right, accRect.right);
    accRect.bottom = min(rect.bottom, accRect.bottom);
    accRect.left = max(rect.left, accRect.left);
    return accRect;
  }, getClientRectFromClippingAncestor(element, firstClippingAncestor, strategy));
  return {
    width: clippingRect.right - clippingRect.left,
    height: clippingRect.bottom - clippingRect.top,
    x: clippingRect.left,
    y: clippingRect.top
  };
}
function getDimensions(element) {
  const {
    width,
    height
  } = getCssDimensions(element);
  return {
    width,
    height
  };
}
function getRectRelativeToOffsetParent(element, offsetParent, strategy) {
  const isOffsetParentAnElement = isHTMLElement(offsetParent);
  const documentElement = getDocumentElement(offsetParent);
  const isFixed = strategy === "fixed";
  const rect = getBoundingClientRect(element, true, isFixed, offsetParent);
  let scroll = {
    scrollLeft: 0,
    scrollTop: 0
  };
  const offsets = createCoords(0);
  function setLeftRTLScrollbarOffset() {
    offsets.x = getWindowScrollBarX(documentElement);
  }
  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
    if (getNodeName(offsetParent) !== "body" || isOverflowElement(documentElement)) {
      scroll = getNodeScroll(offsetParent);
    }
    if (isOffsetParentAnElement) {
      const offsetRect = getBoundingClientRect(offsetParent, true, isFixed, offsetParent);
      offsets.x = offsetRect.x + offsetParent.clientLeft;
      offsets.y = offsetRect.y + offsetParent.clientTop;
    } else if (documentElement) {
      setLeftRTLScrollbarOffset();
    }
  }
  if (isFixed && !isOffsetParentAnElement && documentElement) {
    setLeftRTLScrollbarOffset();
  }
  const htmlOffset = documentElement && !isOffsetParentAnElement && !isFixed ? getHTMLOffset(documentElement, scroll) : createCoords(0);
  const x = rect.left + scroll.scrollLeft - offsets.x - htmlOffset.x;
  const y = rect.top + scroll.scrollTop - offsets.y - htmlOffset.y;
  return {
    x,
    y,
    width: rect.width,
    height: rect.height
  };
}
function isStaticPositioned(element) {
  return getComputedStyle2(element).position === "static";
}
function getTrueOffsetParent(element, polyfill) {
  if (!isHTMLElement(element) || getComputedStyle2(element).position === "fixed") {
    return null;
  }
  if (polyfill) {
    return polyfill(element);
  }
  let rawOffsetParent = element.offsetParent;
  if (getDocumentElement(element) === rawOffsetParent) {
    rawOffsetParent = rawOffsetParent.ownerDocument.body;
  }
  return rawOffsetParent;
}
function getOffsetParent(element, polyfill) {
  const win = getWindow(element);
  if (isTopLayer(element)) {
    return win;
  }
  if (!isHTMLElement(element)) {
    let svgOffsetParent = getParentNode(element);
    while (svgOffsetParent && !isLastTraversableNode(svgOffsetParent)) {
      if (isElement(svgOffsetParent) && !isStaticPositioned(svgOffsetParent)) {
        return svgOffsetParent;
      }
      svgOffsetParent = getParentNode(svgOffsetParent);
    }
    return win;
  }
  let offsetParent = getTrueOffsetParent(element, polyfill);
  while (offsetParent && isTableElement(offsetParent) && isStaticPositioned(offsetParent)) {
    offsetParent = getTrueOffsetParent(offsetParent, polyfill);
  }
  if (offsetParent && isLastTraversableNode(offsetParent) && isStaticPositioned(offsetParent) && !isContainingBlock(offsetParent)) {
    return win;
  }
  return offsetParent || getContainingBlock(element) || win;
}
function isRTL(element) {
  return getComputedStyle2(element).direction === "rtl";
}
function rectsAreEqual(a, b) {
  return a.x === b.x && a.y === b.y && a.width === b.width && a.height === b.height;
}
function observeMove(element, onMove) {
  let io = null;
  let timeoutId2;
  const root = getDocumentElement(element);
  function cleanup() {
    var _io;
    clearTimeout(timeoutId2);
    (_io = io) == null || _io.disconnect();
    io = null;
  }
  function refresh(skip, threshold) {
    if (skip === void 0) {
      skip = false;
    }
    if (threshold === void 0) {
      threshold = 1;
    }
    cleanup();
    const elementRectForRootMargin = element.getBoundingClientRect();
    const {
      left,
      top,
      width,
      height
    } = elementRectForRootMargin;
    if (!skip) {
      onMove();
    }
    if (!width || !height) {
      return;
    }
    const insetTop = floor(top);
    const insetRight = floor(root.clientWidth - (left + width));
    const insetBottom = floor(root.clientHeight - (top + height));
    const insetLeft = floor(left);
    const rootMargin = -insetTop + "px " + -insetRight + "px " + -insetBottom + "px " + -insetLeft + "px";
    const options = {
      rootMargin,
      threshold: max(0, min(1, threshold)) || 1
    };
    let isFirstUpdate = true;
    function handleObserve(entries) {
      const ratio = entries[0].intersectionRatio;
      if (ratio !== threshold) {
        if (!isFirstUpdate) {
          return refresh();
        }
        if (!ratio) {
          timeoutId2 = setTimeout(() => {
            refresh(false, 1e-7);
          }, 1e3);
        } else {
          refresh(false, ratio);
        }
      }
      if (ratio === 1 && !rectsAreEqual(elementRectForRootMargin, element.getBoundingClientRect())) {
        refresh();
      }
      isFirstUpdate = false;
    }
    try {
      io = new IntersectionObserver(handleObserve, {
        ...options,
        // Handle <iframe>s
        root: root.ownerDocument
      });
    } catch (_e) {
      io = new IntersectionObserver(handleObserve, options);
    }
    io.observe(element);
  }
  refresh(true);
  return cleanup;
}
function autoUpdate(reference, floating, update, options) {
  if (options === void 0) {
    options = {};
  }
  const {
    ancestorScroll = true,
    ancestorResize = true,
    elementResize = typeof ResizeObserver === "function",
    layoutShift = typeof IntersectionObserver === "function",
    animationFrame = false
  } = options;
  const referenceEl = unwrapElement(reference);
  const ancestors = ancestorScroll || ancestorResize ? [...referenceEl ? getOverflowAncestors(referenceEl) : [], ...getOverflowAncestors(floating)] : [];
  ancestors.forEach((ancestor) => {
    ancestorScroll && ancestor.addEventListener("scroll", update, {
      passive: true
    });
    ancestorResize && ancestor.addEventListener("resize", update);
  });
  const cleanupIo = referenceEl && layoutShift ? observeMove(referenceEl, update) : null;
  let reobserveFrame = -1;
  let resizeObserver = null;
  if (elementResize) {
    resizeObserver = new ResizeObserver((_ref) => {
      let [firstEntry] = _ref;
      if (firstEntry && firstEntry.target === referenceEl && resizeObserver) {
        resizeObserver.unobserve(floating);
        cancelAnimationFrame(reobserveFrame);
        reobserveFrame = requestAnimationFrame(() => {
          var _resizeObserver;
          (_resizeObserver = resizeObserver) == null || _resizeObserver.observe(floating);
        });
      }
      update();
    });
    if (referenceEl && !animationFrame) {
      resizeObserver.observe(referenceEl);
    }
    resizeObserver.observe(floating);
  }
  let frameId;
  let prevRefRect = animationFrame ? getBoundingClientRect(reference) : null;
  if (animationFrame) {
    frameLoop();
  }
  function frameLoop() {
    const nextRefRect = getBoundingClientRect(reference);
    if (prevRefRect && !rectsAreEqual(prevRefRect, nextRefRect)) {
      update();
    }
    prevRefRect = nextRefRect;
    frameId = requestAnimationFrame(frameLoop);
  }
  update();
  return () => {
    var _resizeObserver2;
    ancestors.forEach((ancestor) => {
      ancestorScroll && ancestor.removeEventListener("scroll", update);
      ancestorResize && ancestor.removeEventListener("resize", update);
    });
    cleanupIo == null || cleanupIo();
    (_resizeObserver2 = resizeObserver) == null || _resizeObserver2.disconnect();
    resizeObserver = null;
    if (animationFrame) {
      cancelAnimationFrame(frameId);
    }
  };
}
var noOffsets, getElementRects, platform, detectOverflow2, offset2, autoPlacement2, shift2, flip2, size2, hide2, arrow2, inline2, limitShift2, computePosition2;
var init_floating_ui_dom = __esm({
  "node_modules/@floating-ui/dom/dist/floating-ui.dom.mjs"() {
    init_floating_ui_core();
    init_floating_ui_utils();
    init_floating_ui_utils_dom();
    init_floating_ui_utils_dom();
    noOffsets = createCoords(0);
    getElementRects = async function(data) {
      const getOffsetParentFn = this.getOffsetParent || getOffsetParent;
      const getDimensionsFn = this.getDimensions;
      const floatingDimensions = await getDimensionsFn(data.floating);
      return {
        reference: getRectRelativeToOffsetParent(data.reference, await getOffsetParentFn(data.floating), data.strategy),
        floating: {
          x: 0,
          y: 0,
          width: floatingDimensions.width,
          height: floatingDimensions.height
        }
      };
    };
    platform = {
      convertOffsetParentRelativeRectToViewportRelativeRect,
      getDocumentElement,
      getClippingRect,
      getOffsetParent,
      getElementRects,
      getClientRects,
      getDimensions,
      getScale,
      isElement,
      isRTL
    };
    detectOverflow2 = detectOverflow;
    offset2 = offset;
    autoPlacement2 = autoPlacement;
    shift2 = shift;
    flip2 = flip;
    size2 = size;
    hide2 = hide;
    arrow2 = arrow;
    inline2 = inline;
    limitShift2 = limitShift;
    computePosition2 = (reference, floating, options) => {
      const cache = /* @__PURE__ */ new Map();
      const mergedOptions = {
        platform,
        ...options
      };
      const platformWithCache = {
        ...mergedOptions.platform,
        _c: cache
      };
      return computePosition(reference, floating, {
        ...mergedOptions,
        platform: platformWithCache
      });
    };
  }
});

// node_modules/@floating-ui/react-dom/dist/floating-ui.react-dom.esm.js
function deepEqual(a, b) {
  if (a === b) {
    return true;
  }
  if (typeof a !== typeof b) {
    return false;
  }
  if (typeof a === "function" && a.toString() === b.toString()) {
    return true;
  }
  let length, i, keys;
  if (a && b && typeof a == "object") {
    if (Array.isArray(a)) {
      length = a.length;
      if (length != b.length) return false;
      for (i = length; i-- !== 0; ) {
        if (!deepEqual(a[i], b[i])) {
          return false;
        }
      }
      return true;
    }
    keys = Object.keys(a);
    length = keys.length;
    if (length !== Object.keys(b).length) {
      return false;
    }
    for (i = length; i-- !== 0; ) {
      if (!Object.prototype.hasOwnProperty.call(b, keys[i])) {
        return false;
      }
    }
    for (i = length; i-- !== 0; ) {
      const key = keys[i];
      if (key === "_owner" && a.$$typeof) {
        continue;
      }
      if (!deepEqual(a[key], b[key])) {
        return false;
      }
    }
    return true;
  }
  return a !== a && b !== b;
}
function useLatestRef(value) {
  const ref = React.useRef(value);
  index(() => {
    ref.current = value;
  });
  return ref;
}
function useFloating(options) {
  if (options === void 0) {
    options = {};
  }
  const {
    placement = "bottom",
    strategy = "absolute",
    middleware = [],
    platform: platform2,
    whileElementsMounted,
    open
  } = options;
  const [data, setData] = React.useState({
    x: null,
    y: null,
    strategy,
    placement,
    middlewareData: {},
    isPositioned: false
  });
  const [latestMiddleware, setLatestMiddleware] = React.useState(middleware);
  if (!deepEqual(latestMiddleware, middleware)) {
    setLatestMiddleware(middleware);
  }
  const referenceRef = React.useRef(null);
  const floatingRef = React.useRef(null);
  const dataRef = React.useRef(data);
  const whileElementsMountedRef = useLatestRef(whileElementsMounted);
  const platformRef = useLatestRef(platform2);
  const [reference, _setReference] = React.useState(null);
  const [floating, _setFloating] = React.useState(null);
  const setReference = React.useCallback((node) => {
    if (referenceRef.current !== node) {
      referenceRef.current = node;
      _setReference(node);
    }
  }, []);
  const setFloating = React.useCallback((node) => {
    if (floatingRef.current !== node) {
      floatingRef.current = node;
      _setFloating(node);
    }
  }, []);
  const update = React.useCallback(() => {
    if (!referenceRef.current || !floatingRef.current) {
      return;
    }
    const config = {
      placement,
      strategy,
      middleware: latestMiddleware
    };
    if (platformRef.current) {
      config.platform = platformRef.current;
    }
    computePosition2(referenceRef.current, floatingRef.current, config).then((data2) => {
      const fullData = {
        ...data2,
        isPositioned: true
      };
      if (isMountedRef.current && !deepEqual(dataRef.current, fullData)) {
        dataRef.current = fullData;
        ReactDOM.flushSync(() => {
          setData(fullData);
        });
      }
    });
  }, [latestMiddleware, placement, strategy, platformRef]);
  index(() => {
    if (open === false && dataRef.current.isPositioned) {
      dataRef.current.isPositioned = false;
      setData((data2) => ({
        ...data2,
        isPositioned: false
      }));
    }
  }, [open]);
  const isMountedRef = React.useRef(false);
  index(() => {
    isMountedRef.current = true;
    return () => {
      isMountedRef.current = false;
    };
  }, []);
  index(() => {
    if (reference && floating) {
      if (whileElementsMountedRef.current) {
        return whileElementsMountedRef.current(reference, floating, update);
      } else {
        update();
      }
    }
  }, [reference, floating, update, whileElementsMountedRef]);
  const refs = React.useMemo(() => ({
    reference: referenceRef,
    floating: floatingRef,
    setReference,
    setFloating
  }), [setReference, setFloating]);
  const elements = React.useMemo(() => ({
    reference,
    floating
  }), [reference, floating]);
  return React.useMemo(() => ({
    ...data,
    update,
    refs,
    elements,
    reference: setReference,
    floating: setFloating
  }), [data, update, refs, elements, setReference, setFloating]);
}
var React, import_react, ReactDOM, arrow3, index;
var init_floating_ui_react_dom_esm = __esm({
  "node_modules/@floating-ui/react-dom/dist/floating-ui.react-dom.esm.js"() {
    init_floating_ui_dom();
    init_floating_ui_dom();
    React = __toESM(require_react());
    import_react = __toESM(require_react());
    ReactDOM = __toESM(require_react_dom());
    arrow3 = (options) => {
      const {
        element,
        padding
      } = options;
      function isRef(value) {
        return Object.prototype.hasOwnProperty.call(value, "current");
      }
      return {
        name: "arrow",
        options,
        fn(args) {
          if (isRef(element)) {
            if (element.current != null) {
              return arrow2({
                element: element.current,
                padding
              }).fn(args);
            }
            return {};
          } else if (element) {
            return arrow2({
              element,
              padding
            }).fn(args);
          }
          return {};
        }
      };
    };
    index = typeof document !== "undefined" ? import_react.useLayoutEffect : import_react.useEffect;
  }
});

// node_modules/@floating-ui/react/dist/floating-ui.react.esm.js
var floating_ui_react_esm_exports = {};
__export(floating_ui_react_esm_exports, {
  FloatingDelayGroup: () => FloatingDelayGroup,
  FloatingFocusManager: () => FloatingFocusManager,
  FloatingNode: () => FloatingNode,
  FloatingOverlay: () => FloatingOverlay,
  FloatingPortal: () => FloatingPortal,
  FloatingTree: () => FloatingTree,
  arrow: () => arrow3,
  autoPlacement: () => autoPlacement2,
  autoUpdate: () => autoUpdate,
  computePosition: () => computePosition2,
  detectOverflow: () => detectOverflow2,
  flip: () => flip2,
  getOverflowAncestors: () => getOverflowAncestors,
  hide: () => hide2,
  inline: () => inline2,
  inner: () => inner,
  limitShift: () => limitShift2,
  offset: () => offset2,
  platform: () => platform,
  safePolygon: () => safePolygon,
  shift: () => shift2,
  size: () => size2,
  useClick: () => useClick,
  useDelayGroup: () => useDelayGroup,
  useDelayGroupContext: () => useDelayGroupContext,
  useDismiss: () => useDismiss,
  useFloating: () => useFloating2,
  useFloatingNodeId: () => useFloatingNodeId,
  useFloatingParentNodeId: () => useFloatingParentNodeId,
  useFloatingPortalNode: () => useFloatingPortalNode,
  useFloatingTree: () => useFloatingTree,
  useFocus: () => useFocus,
  useHover: () => useHover,
  useId: () => useId,
  useInnerOffset: () => useInnerOffset,
  useInteractions: () => useInteractions,
  useListNavigation: () => useListNavigation,
  useMergeRefs: () => useMergeRefs,
  useRole: () => useRole,
  useTransitionStatus: () => useTransitionStatus,
  useTransitionStyles: () => useTransitionStyles,
  useTypeahead: () => useTypeahead
});
function useFloatingId() {
  const [id, setId] = React2.useState(() => serverHandoffComplete ? genId() : void 0);
  index2(() => {
    if (id == null) {
      setId(genId());
    }
  }, []);
  React2.useEffect(() => {
    if (!serverHandoffComplete) {
      serverHandoffComplete = true;
    }
  }, []);
  return id;
}
function createPubSub() {
  const map = /* @__PURE__ */ new Map();
  return {
    emit(event, data) {
      var _map$get;
      (_map$get = map.get(event)) == null ? void 0 : _map$get.forEach((handler) => handler(data));
    },
    on(event, listener) {
      map.set(event, [...map.get(event) || [], listener]);
    },
    off(event, listener) {
      map.set(event, (map.get(event) || []).filter((l) => l !== listener));
    }
  };
}
function getDocument(node) {
  return (node == null ? void 0 : node.ownerDocument) || document;
}
function getPlatform() {
  const uaData = navigator.userAgentData;
  if (uaData != null && uaData.platform) {
    return uaData.platform;
  }
  return navigator.platform;
}
function getUserAgent() {
  const uaData = navigator.userAgentData;
  if (uaData && Array.isArray(uaData.brands)) {
    return uaData.brands.map((_ref) => {
      let {
        brand,
        version
      } = _ref;
      return brand + "/" + version;
    }).join(" ");
  }
  return navigator.userAgent;
}
function getWindow2(value) {
  return getDocument(value).defaultView || window;
}
function isElement2(value) {
  return value ? value instanceof getWindow2(value).Element : false;
}
function isHTMLElement2(value) {
  return value ? value instanceof getWindow2(value).HTMLElement : false;
}
function isShadowRoot2(node) {
  if (typeof ShadowRoot === "undefined") {
    return false;
  }
  const OwnElement = getWindow2(node).ShadowRoot;
  return node instanceof OwnElement || node instanceof ShadowRoot;
}
function isVirtualClick(event) {
  if (event.mozInputSource === 0 && event.isTrusted) {
    return true;
  }
  const androidRe = /Android/i;
  if ((androidRe.test(getPlatform()) || androidRe.test(getUserAgent())) && event.pointerType) {
    return event.type === "click" && event.buttons === 1;
  }
  return event.detail === 0 && !event.pointerType;
}
function isVirtualPointerEvent(event) {
  return event.width === 0 && event.height === 0 || event.width === 1 && event.height === 1 && event.pressure === 0 && event.detail === 0 && event.pointerType !== "mouse" || // iOS VoiceOver returns 0.333• for width/height.
  event.width < 1 && event.height < 1 && event.pressure === 0 && event.detail === 0;
}
function isSafari() {
  return /apple/i.test(navigator.vendor);
}
function isMac() {
  return getPlatform().toLowerCase().startsWith("mac") && !navigator.maxTouchPoints;
}
function isMouseLikePointerType(pointerType, strict) {
  const values = ["mouse", "pen"];
  if (!strict) {
    values.push("", void 0);
  }
  return values.includes(pointerType);
}
function useLatestRef2(value) {
  const ref = (0, import_react2.useRef)(value);
  index2(() => {
    ref.current = value;
  });
  return ref;
}
function getDelay(value, prop, pointerType) {
  if (pointerType && !isMouseLikePointerType(pointerType)) {
    return 0;
  }
  if (typeof value === "number") {
    return value;
  }
  return value == null ? void 0 : value[prop];
}
function _extends() {
  _extends = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
function activeElement$1(doc) {
  let activeElement2 = doc.activeElement;
  while (((_activeElement = activeElement2) == null ? void 0 : (_activeElement$shadow = _activeElement.shadowRoot) == null ? void 0 : _activeElement$shadow.activeElement) != null) {
    var _activeElement, _activeElement$shadow;
    activeElement2 = activeElement2.shadowRoot.activeElement;
  }
  return activeElement2;
}
function contains(parent, child) {
  if (!parent || !child) {
    return false;
  }
  const rootNode = child.getRootNode && child.getRootNode();
  if (parent.contains(child)) {
    return true;
  } else if (rootNode && isShadowRoot2(rootNode)) {
    let next = child;
    do {
      if (next && parent === next) {
        return true;
      }
      next = next.parentNode || next.host;
    } while (next);
  }
  return false;
}
function enqueueFocus(el, options) {
  if (options === void 0) {
    options = {};
  }
  const {
    preventScroll = false,
    cancelPrevious = true,
    sync = false
  } = options;
  cancelPrevious && cancelAnimationFrame(rafId);
  const exec = () => el == null ? void 0 : el.focus({
    preventScroll
  });
  if (sync) {
    exec();
  } else {
    rafId = requestAnimationFrame(exec);
  }
}
function getAncestors(nodes, id) {
  var _nodes$find;
  let allAncestors = [];
  let currentParentId = (_nodes$find = nodes.find((node) => node.id === id)) == null ? void 0 : _nodes$find.parentId;
  while (currentParentId) {
    const currentNode = nodes.find((node) => node.id === currentParentId);
    currentParentId = currentNode == null ? void 0 : currentNode.parentId;
    if (currentNode) {
      allAncestors = allAncestors.concat(currentNode);
    }
  }
  return allAncestors;
}
function getChildren(nodes, id) {
  let allChildren = nodes.filter((node) => {
    var _node$context;
    return node.parentId === id && ((_node$context = node.context) == null ? void 0 : _node$context.open);
  }) || [];
  let currentChildren = allChildren;
  while (currentChildren.length) {
    currentChildren = nodes.filter((node) => {
      var _currentChildren;
      return (_currentChildren = currentChildren) == null ? void 0 : _currentChildren.some((n) => {
        var _node$context2;
        return node.parentId === n.id && ((_node$context2 = node.context) == null ? void 0 : _node$context2.open);
      });
    }) || [];
    allChildren = allChildren.concat(currentChildren);
  }
  return allChildren;
}
function getTarget(event) {
  if ("composedPath" in event) {
    return event.composedPath()[0];
  }
  return event.target;
}
function isTypeableElement(element) {
  return isHTMLElement2(element) && element.matches(TYPEABLE_SELECTOR);
}
function stopEvent(event) {
  event.preventDefault();
  event.stopPropagation();
}
function getTabbableIn(container, direction) {
  const allTabbable = tabbable(container, getTabbableOptions());
  if (direction === "prev") {
    allTabbable.reverse();
  }
  const activeIndex = allTabbable.indexOf(activeElement$1(getDocument(container)));
  const nextTabbableElements = allTabbable.slice(activeIndex + 1);
  return nextTabbableElements[0];
}
function getNextTabbable() {
  return getTabbableIn(document.body, "next");
}
function getPreviousTabbable() {
  return getTabbableIn(document.body, "prev");
}
function isOutsideEvent(event, container) {
  const containerElement = container || event.currentTarget;
  const relatedTarget = event.relatedTarget;
  return !relatedTarget || !contains(containerElement, relatedTarget);
}
function disableFocusInside(container) {
  const tabbableElements = tabbable(container, getTabbableOptions());
  tabbableElements.forEach((element) => {
    element.dataset.tabindex = element.getAttribute("tabindex") || "";
    element.setAttribute("tabindex", "-1");
  });
}
function enableFocusInside(container) {
  const elements = container.querySelectorAll("[data-tabindex]");
  elements.forEach((element) => {
    const tabindex = element.dataset.tabindex;
    delete element.dataset.tabindex;
    if (tabindex) {
      element.setAttribute("tabindex", tabindex);
    } else {
      element.removeAttribute("tabindex");
    }
  });
}
function useEvent(callback) {
  const ref = React2.useRef(() => {
    if (true) {
      throw new Error("Cannot call an event handler while rendering.");
    }
  });
  useSafeInsertionEffect(() => {
    ref.current = callback;
  });
  return React2.useCallback(function() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    return ref.current == null ? void 0 : ref.current(...args);
  }, []);
}
function setActiveElementOnTab(event) {
  if (event.key === "Tab") {
    activeElement = event.target;
    clearTimeout(timeoutId);
  }
}
function isTabFocus(event) {
  const result = activeElement === event.relatedTarget;
  activeElement = event.relatedTarget;
  clearTimeout(timeoutId);
  return result;
}
function FloatingFocusManager(_ref) {
  let {
    context,
    children,
    order = ["content"],
    guards = true,
    initialFocus = 0,
    returnFocus = true,
    modal = true,
    visuallyHiddenDismiss = false,
    closeOnFocusOut = true
  } = _ref;
  const {
    refs,
    nodeId,
    onOpenChange,
    events,
    dataRef,
    elements: {
      domReference,
      floating
    }
  } = context;
  const orderRef = useLatestRef2(order);
  const tree = useFloatingTree();
  const portalContext = usePortalContext();
  const [tabbableContentLength, setTabbableContentLength] = React2.useState(null);
  const ignoreInitialFocus = typeof initialFocus === "number" && initialFocus < 0;
  const startDismissButtonRef = React2.useRef(null);
  const endDismissButtonRef = React2.useRef(null);
  const preventReturnFocusRef = React2.useRef(false);
  const previouslyFocusedElementRef = React2.useRef(null);
  const isPointerDownRef = React2.useRef(false);
  const isInsidePortal = portalContext != null;
  const isTypeableCombobox = domReference && domReference.getAttribute("role") === "combobox" && isTypeableElement(domReference);
  const getTabbableContent = React2.useCallback(function(container) {
    if (container === void 0) {
      container = floating;
    }
    return container ? tabbable(container, getTabbableOptions()) : [];
  }, [floating]);
  const getTabbableElements = React2.useCallback((container) => {
    const content = getTabbableContent(container);
    return orderRef.current.map((type) => {
      if (domReference && type === "reference") {
        return domReference;
      }
      if (floating && type === "floating") {
        return floating;
      }
      return content;
    }).filter(Boolean).flat();
  }, [domReference, floating, orderRef, getTabbableContent]);
  React2.useEffect(() => {
    if (!modal) {
      return;
    }
    function onKeyDown(event) {
      if (event.key === "Tab") {
        if (getTabbableContent().length === 0 && !isTypeableCombobox) {
          stopEvent(event);
        }
        const els = getTabbableElements();
        const target = getTarget(event);
        if (orderRef.current[0] === "reference" && target === domReference) {
          stopEvent(event);
          if (event.shiftKey) {
            enqueueFocus(els[els.length - 1]);
          } else {
            enqueueFocus(els[1]);
          }
        }
        if (orderRef.current[1] === "floating" && target === floating && event.shiftKey) {
          stopEvent(event);
          enqueueFocus(els[0]);
        }
      }
    }
    const doc = getDocument(floating);
    doc.addEventListener("keydown", onKeyDown);
    return () => {
      doc.removeEventListener("keydown", onKeyDown);
    };
  }, [domReference, floating, modal, orderRef, refs, isTypeableCombobox, getTabbableContent, getTabbableElements]);
  React2.useEffect(() => {
    if (!closeOnFocusOut) {
      return;
    }
    function handlePointerDown() {
      isPointerDownRef.current = true;
      setTimeout(() => {
        isPointerDownRef.current = false;
      });
    }
    function handleFocusOutside(event) {
      const relatedTarget = event.relatedTarget;
      const movedToUnrelatedNode = !(contains(domReference, relatedTarget) || contains(floating, relatedTarget) || contains(relatedTarget, floating) || contains(portalContext == null ? void 0 : portalContext.portalNode, relatedTarget) || relatedTarget != null && relatedTarget.hasAttribute("data-floating-ui-focus-guard") || tree && (getChildren(tree.nodesRef.current, nodeId).find((node) => {
        var _node$context, _node$context2;
        return contains((_node$context = node.context) == null ? void 0 : _node$context.elements.floating, relatedTarget) || contains((_node$context2 = node.context) == null ? void 0 : _node$context2.elements.domReference, relatedTarget);
      }) || getAncestors(tree.nodesRef.current, nodeId).find((node) => {
        var _node$context3, _node$context4;
        return ((_node$context3 = node.context) == null ? void 0 : _node$context3.elements.floating) === relatedTarget || ((_node$context4 = node.context) == null ? void 0 : _node$context4.elements.domReference) === relatedTarget;
      })));
      if (relatedTarget && movedToUnrelatedNode && !isPointerDownRef.current && // Fix React 18 Strict Mode returnFocus due to double rendering.
      relatedTarget !== previouslyFocusedElementRef.current) {
        preventReturnFocusRef.current = true;
        setTimeout(() => onOpenChange(false));
      }
    }
    if (floating && isHTMLElement2(domReference)) {
      domReference.addEventListener("focusout", handleFocusOutside);
      domReference.addEventListener("pointerdown", handlePointerDown);
      !modal && floating.addEventListener("focusout", handleFocusOutside);
      return () => {
        domReference.removeEventListener("focusout", handleFocusOutside);
        domReference.removeEventListener("pointerdown", handlePointerDown);
        !modal && floating.removeEventListener("focusout", handleFocusOutside);
      };
    }
  }, [domReference, floating, modal, nodeId, tree, portalContext, onOpenChange, closeOnFocusOut]);
  React2.useEffect(() => {
    var _portalContext$portal;
    const portalNodes = Array.from((portalContext == null ? void 0 : (_portalContext$portal = portalContext.portalNode) == null ? void 0 : _portalContext$portal.querySelectorAll("[data-floating-ui-portal]")) || []);
    function getDismissButtons() {
      return [startDismissButtonRef.current, endDismissButtonRef.current].filter(Boolean);
    }
    if (floating && modal) {
      const insideNodes = [floating, ...portalNodes, ...getDismissButtons()];
      const cleanup = hideOthers(orderRef.current.includes("reference") || isTypeableCombobox ? insideNodes.concat(domReference || []) : insideNodes);
      return () => {
        cleanup();
      };
    }
  }, [domReference, floating, modal, orderRef, portalContext, isTypeableCombobox]);
  React2.useEffect(() => {
    if (modal && !guards && floating) {
      const tabIndexValues = [];
      const options = getTabbableOptions();
      const allTabbable = tabbable(getDocument(floating).body, options);
      const floatingTabbable = getTabbableElements();
      const elements = allTabbable.filter((el) => !floatingTabbable.includes(el));
      elements.forEach((el, i) => {
        tabIndexValues[i] = el.getAttribute("tabindex");
        el.setAttribute("tabindex", "-1");
      });
      return () => {
        elements.forEach((el, i) => {
          const value = tabIndexValues[i];
          if (value == null) {
            el.removeAttribute("tabindex");
          } else {
            el.setAttribute("tabindex", value);
          }
        });
      };
    }
  }, [floating, modal, guards, getTabbableElements]);
  index2(() => {
    if (!floating) return;
    const doc = getDocument(floating);
    let returnFocusValue = returnFocus;
    let preventReturnFocusScroll = false;
    const previouslyFocusedElement = activeElement$1(doc);
    const contextData = dataRef.current;
    previouslyFocusedElementRef.current = previouslyFocusedElement;
    const focusableElements = getTabbableElements(floating);
    const elToFocus = (typeof initialFocus === "number" ? focusableElements[initialFocus] : initialFocus.current) || floating;
    !ignoreInitialFocus && enqueueFocus(elToFocus, {
      preventScroll: elToFocus === floating
    });
    function onDismiss(payload) {
      if (payload.type === "escapeKey" && refs.domReference.current) {
        previouslyFocusedElementRef.current = refs.domReference.current;
      }
      if (["referencePress", "escapeKey"].includes(payload.type)) {
        return;
      }
      const returnFocus2 = payload.data.returnFocus;
      if (typeof returnFocus2 === "object") {
        returnFocusValue = true;
        preventReturnFocusScroll = returnFocus2.preventScroll;
      } else {
        returnFocusValue = returnFocus2;
      }
    }
    events.on("dismiss", onDismiss);
    return () => {
      events.off("dismiss", onDismiss);
      if (contains(floating, activeElement$1(doc)) && refs.domReference.current) {
        previouslyFocusedElementRef.current = refs.domReference.current;
      }
      if (returnFocusValue && isHTMLElement2(previouslyFocusedElementRef.current) && !preventReturnFocusRef.current) {
        if (!refs.domReference.current || isPointerDownRef.current) {
          enqueueFocus(previouslyFocusedElementRef.current, {
            // When dismissing nested floating elements, by the time the rAF has
            // executed, the menus will all have been unmounted. When they try
            // to get focused, the calls get ignored — leaving the root
            // reference focused as desired.
            cancelPrevious: false,
            preventScroll: preventReturnFocusScroll
          });
        } else {
          var _previouslyFocusedEle;
          contextData.__syncReturnFocus = true;
          (_previouslyFocusedEle = previouslyFocusedElementRef.current) == null ? void 0 : _previouslyFocusedEle.focus({
            preventScroll: preventReturnFocusScroll
          });
          setTimeout(() => {
            delete contextData.__syncReturnFocus;
          });
        }
      }
    };
  }, [floating, getTabbableElements, initialFocus, returnFocus, dataRef, refs, events, ignoreInitialFocus]);
  index2(() => {
    if (!portalContext) return;
    portalContext.setFocusManagerState({
      ...context,
      modal,
      closeOnFocusOut
      // Not concerned about the <RT> generic type.
    });
    return () => {
      portalContext.setFocusManagerState(null);
    };
  }, [portalContext, modal, closeOnFocusOut, context]);
  index2(() => {
    if (ignoreInitialFocus || !floating) return;
    function setState() {
      setTabbableContentLength(getTabbableContent().length);
    }
    setState();
    if (typeof MutationObserver === "function") {
      const observer = new MutationObserver(setState);
      observer.observe(floating, {
        childList: true,
        subtree: true
      });
      return () => {
        observer.disconnect();
      };
    }
  }, [floating, getTabbableContent, ignoreInitialFocus, refs]);
  const shouldRenderGuards = guards && (isInsidePortal || modal) && !isTypeableCombobox;
  function renderDismissButton(location) {
    return visuallyHiddenDismiss && modal ? React2.createElement(VisuallyHiddenDismiss, {
      ref: location === "start" ? startDismissButtonRef : endDismissButtonRef,
      onClick: () => onOpenChange(false)
    }, typeof visuallyHiddenDismiss === "string" ? visuallyHiddenDismiss : "Dismiss") : null;
  }
  return React2.createElement(React2.Fragment, null, shouldRenderGuards && React2.createElement(FocusGuard, {
    "data-type": "inside",
    ref: portalContext == null ? void 0 : portalContext.beforeInsideRef,
    onFocus: (event) => {
      if (modal) {
        const els = getTabbableElements();
        enqueueFocus(order[0] === "reference" ? els[0] : els[els.length - 1]);
      } else if (portalContext != null && portalContext.preserveTabOrder && portalContext.portalNode) {
        preventReturnFocusRef.current = false;
        if (isOutsideEvent(event, portalContext.portalNode)) {
          const nextTabbable = getNextTabbable() || domReference;
          nextTabbable == null ? void 0 : nextTabbable.focus();
        } else {
          var _portalContext$before;
          (_portalContext$before = portalContext.beforeOutsideRef.current) == null ? void 0 : _portalContext$before.focus();
        }
      }
    }
  }), isTypeableCombobox ? null : renderDismissButton("start"), React2.cloneElement(children, tabbableContentLength === 0 || order.includes("floating") ? {
    tabIndex: 0
  } : {}), renderDismissButton("end"), shouldRenderGuards && React2.createElement(FocusGuard, {
    "data-type": "inside",
    ref: portalContext == null ? void 0 : portalContext.afterInsideRef,
    onFocus: (event) => {
      if (modal) {
        enqueueFocus(getTabbableElements()[0]);
      } else if (portalContext != null && portalContext.preserveTabOrder && portalContext.portalNode) {
        preventReturnFocusRef.current = true;
        if (isOutsideEvent(event, portalContext.portalNode)) {
          const prevTabbable = getPreviousTabbable() || domReference;
          prevTabbable == null ? void 0 : prevTabbable.focus();
        } else {
          var _portalContext$afterO;
          (_portalContext$afterO = portalContext.afterOutsideRef.current) == null ? void 0 : _portalContext$afterO.focus();
        }
      }
    }
  }));
}
function isButtonTarget(event) {
  return isHTMLElement2(event.target) && event.target.tagName === "BUTTON";
}
function isSpaceIgnored(element) {
  return isTypeableElement(element);
}
function isEventTargetWithin(event, node) {
  if (node == null) {
    return false;
  }
  if ("composedPath" in event) {
    return event.composedPath().includes(node);
  }
  const e = event;
  return e.target != null && node.contains(e.target);
}
function isDifferentRow(index3, cols, prevRow) {
  return Math.floor(index3 / cols) !== prevRow;
}
function isIndexOutOfBounds(listRef, index3) {
  return index3 < 0 || index3 >= listRef.current.length;
}
function findNonDisabledIndex(listRef, _temp) {
  let {
    startingIndex = -1,
    decrement = false,
    disabledIndices,
    amount = 1
  } = _temp === void 0 ? {} : _temp;
  const list = listRef.current;
  let index3 = startingIndex;
  do {
    var _list$index, _list$index2;
    index3 = index3 + (decrement ? -amount : amount);
  } while (index3 >= 0 && index3 <= list.length - 1 && (disabledIndices ? disabledIndices.includes(index3) : list[index3] == null || ((_list$index = list[index3]) == null ? void 0 : _list$index.hasAttribute("disabled")) || ((_list$index2 = list[index3]) == null ? void 0 : _list$index2.getAttribute("aria-disabled")) === "true"));
  return index3;
}
function doSwitch(orientation, vertical, horizontal) {
  switch (orientation) {
    case "vertical":
      return vertical;
    case "horizontal":
      return horizontal;
    default:
      return vertical || horizontal;
  }
}
function isMainOrientationKey(key, orientation) {
  const vertical = key === ARROW_UP || key === ARROW_DOWN;
  const horizontal = key === ARROW_LEFT || key === ARROW_RIGHT;
  return doSwitch(orientation, vertical, horizontal);
}
function isMainOrientationToEndKey(key, orientation, rtl) {
  const vertical = key === ARROW_DOWN;
  const horizontal = rtl ? key === ARROW_LEFT : key === ARROW_RIGHT;
  return doSwitch(orientation, vertical, horizontal) || key === "Enter" || key == " " || key === "";
}
function isCrossOrientationOpenKey(key, orientation, rtl) {
  const vertical = rtl ? key === ARROW_LEFT : key === ARROW_RIGHT;
  const horizontal = key === ARROW_DOWN;
  return doSwitch(orientation, vertical, horizontal);
}
function isCrossOrientationCloseKey(key, orientation, rtl) {
  const vertical = rtl ? key === ARROW_RIGHT : key === ARROW_LEFT;
  const horizontal = key === ARROW_UP;
  return doSwitch(orientation, vertical, horizontal);
}
function getMinIndex(listRef, disabledIndices) {
  return findNonDisabledIndex(listRef, {
    disabledIndices
  });
}
function getMaxIndex(listRef, disabledIndices) {
  return findNonDisabledIndex(listRef, {
    decrement: true,
    startingIndex: listRef.current.length,
    disabledIndices
  });
}
function useMergeRefs(refs) {
  return React2.useMemo(() => {
    if (refs.every((ref) => ref == null)) {
      return null;
    }
    return (value) => {
      refs.forEach((ref) => {
        if (typeof ref === "function") {
          ref(value);
        } else if (ref != null) {
          ref.current = value;
        }
      });
    };
  }, refs);
}
function useDelayUnmount(open, durationMs) {
  const [isMounted, setIsMounted] = React2.useState(open);
  if (open && !isMounted) {
    setIsMounted(true);
  }
  React2.useEffect(() => {
    if (!open) {
      const timeout = setTimeout(() => setIsMounted(false), durationMs);
      return () => clearTimeout(timeout);
    }
  }, [open, durationMs]);
  return isMounted;
}
function useTransitionStatus(_ref, _temp) {
  let {
    open,
    elements: {
      floating
    }
  } = _ref;
  let {
    duration = 250
  } = _temp === void 0 ? {} : _temp;
  const isNumberDuration = typeof duration === "number";
  const closeDuration = (isNumberDuration ? duration : duration.close) || 0;
  const [initiated, setInitiated] = React2.useState(false);
  const [status, setStatus] = React2.useState("unmounted");
  const isMounted = useDelayUnmount(open, closeDuration);
  index2(() => {
    if (initiated && !isMounted) {
      setStatus("unmounted");
    }
  }, [initiated, isMounted]);
  index2(() => {
    if (!floating) return;
    if (open) {
      setStatus("initial");
      const frame = requestAnimationFrame(() => {
        setStatus("open");
      });
      return () => {
        cancelAnimationFrame(frame);
      };
    } else {
      setInitiated(true);
      setStatus("close");
    }
  }, [open, floating]);
  return {
    isMounted,
    status
  };
}
function useTransitionStyles(context, _temp2) {
  let {
    initial: unstable_initial = {
      opacity: 0
    },
    open: unstable_open,
    close: unstable_close,
    common: unstable_common,
    duration = 250
  } = _temp2 === void 0 ? {} : _temp2;
  const placement = context.placement;
  const side = placement.split("-")[0];
  const [styles, setStyles] = React2.useState({});
  const {
    isMounted,
    status
  } = useTransitionStatus(context, {
    duration
  });
  const initialRef = useLatestRef2(unstable_initial);
  const openRef = useLatestRef2(unstable_open);
  const closeRef = useLatestRef2(unstable_close);
  const commonRef = useLatestRef2(unstable_common);
  const isNumberDuration = typeof duration === "number";
  const openDuration = (isNumberDuration ? duration : duration.open) || 0;
  const closeDuration = (isNumberDuration ? duration : duration.close) || 0;
  index2(() => {
    const fnArgs = {
      side,
      placement
    };
    const initial = initialRef.current;
    const close = closeRef.current;
    const open = openRef.current;
    const common = commonRef.current;
    const initialStyles = typeof initial === "function" ? initial(fnArgs) : initial;
    const closeStyles = typeof close === "function" ? close(fnArgs) : close;
    const commonStyles = typeof common === "function" ? common(fnArgs) : common;
    const openStyles = (typeof open === "function" ? open(fnArgs) : open) || Object.keys(initialStyles).reduce((acc, key) => {
      acc[key] = "";
      return acc;
    }, {});
    if (status === "initial") {
      setStyles((styles2) => ({
        transitionProperty: styles2.transitionProperty,
        ...commonStyles,
        ...initialStyles
      }));
    }
    if (status === "open") {
      setStyles({
        transitionProperty: Object.keys(openStyles).map(camelCaseToKebabCase).join(","),
        transitionDuration: openDuration + "ms",
        ...commonStyles,
        ...openStyles
      });
    }
    if (status === "close") {
      const styles2 = closeStyles || initialStyles;
      setStyles({
        transitionProperty: Object.keys(styles2).map(camelCaseToKebabCase).join(","),
        transitionDuration: closeDuration + "ms",
        ...commonStyles,
        ...styles2
      });
    }
  }, [side, placement, closeDuration, closeRef, initialRef, openRef, commonRef, openDuration, status]);
  return {
    isMounted,
    styles
  };
}
function getArgsWithCustomFloatingHeight(args, height) {
  return {
    ...args,
    rects: {
      ...args.rects,
      floating: {
        ...args.rects.floating,
        height
      }
    }
  };
}
function isPointInPolygon(point, polygon) {
  const [x, y] = point;
  let isInside2 = false;
  const length = polygon.length;
  for (let i = 0, j = length - 1; i < length; j = i++) {
    const [xi, yi] = polygon[i] || [0, 0];
    const [xj, yj] = polygon[j] || [0, 0];
    const intersect = yi >= y !== yj >= y && x <= (xj - xi) * (y - yi) / (yj - yi) + xi;
    if (intersect) {
      isInside2 = !isInside2;
    }
  }
  return isInside2;
}
function isInside(point, rect) {
  return point[0] >= rect.x && point[0] <= rect.x + rect.width && point[1] >= rect.y && point[1] <= rect.y + rect.height;
}
function safePolygon(_temp) {
  let {
    restMs = 0,
    buffer = 0.5,
    blockPointerEvents = false
  } = _temp === void 0 ? {} : _temp;
  let timeoutId2;
  let isInsideRect = false;
  let hasLanded = false;
  const fn = (_ref) => {
    let {
      x,
      y,
      placement,
      elements,
      onClose,
      nodeId,
      tree
    } = _ref;
    return function onMouseMove(event) {
      function close() {
        clearTimeout(timeoutId2);
        onClose();
      }
      clearTimeout(timeoutId2);
      if (!elements.domReference || !elements.floating || placement == null || x == null || y == null) {
        return;
      }
      const {
        clientX,
        clientY
      } = event;
      const clientPoint = [clientX, clientY];
      const target = getTarget(event);
      const isLeave = event.type === "mouseleave";
      const isOverFloatingEl = contains(elements.floating, target);
      const isOverReferenceEl = contains(elements.domReference, target);
      const refRect = elements.domReference.getBoundingClientRect();
      const rect = elements.floating.getBoundingClientRect();
      const side = placement.split("-")[0];
      const cursorLeaveFromRight = x > rect.right - rect.width / 2;
      const cursorLeaveFromBottom = y > rect.bottom - rect.height / 2;
      const isOverReferenceRect = isInside(clientPoint, refRect);
      if (isOverFloatingEl) {
        hasLanded = true;
      }
      if (isOverReferenceEl) {
        hasLanded = false;
      }
      if (isOverReferenceEl && !isLeave) {
        hasLanded = true;
        return;
      }
      if (isLeave && isElement2(event.relatedTarget) && contains(elements.floating, event.relatedTarget)) {
        return;
      }
      if (tree && getChildren(tree.nodesRef.current, nodeId).some((_ref2) => {
        let {
          context
        } = _ref2;
        return context == null ? void 0 : context.open;
      })) {
        return;
      }
      if (side === "top" && y >= refRect.bottom - 1 || side === "bottom" && y <= refRect.top + 1 || side === "left" && x >= refRect.right - 1 || side === "right" && x <= refRect.left + 1) {
        return close();
      }
      let rectPoly = [];
      switch (side) {
        case "top":
          rectPoly = [[rect.left, refRect.top + 1], [rect.left, rect.bottom - 1], [rect.right, rect.bottom - 1], [rect.right, refRect.top + 1]];
          isInsideRect = clientX >= rect.left && clientX <= rect.right && clientY >= rect.top && clientY <= refRect.top + 1;
          break;
        case "bottom":
          rectPoly = [[rect.left, rect.top + 1], [rect.left, refRect.bottom - 1], [rect.right, refRect.bottom - 1], [rect.right, rect.top + 1]];
          isInsideRect = clientX >= rect.left && clientX <= rect.right && clientY >= refRect.bottom - 1 && clientY <= rect.bottom;
          break;
        case "left":
          rectPoly = [[rect.right - 1, rect.bottom], [rect.right - 1, rect.top], [refRect.left + 1, rect.top], [refRect.left + 1, rect.bottom]];
          isInsideRect = clientX >= rect.left && clientX <= refRect.left + 1 && clientY >= rect.top && clientY <= rect.bottom;
          break;
        case "right":
          rectPoly = [[refRect.right - 1, rect.bottom], [refRect.right - 1, rect.top], [rect.left + 1, rect.top], [rect.left + 1, rect.bottom]];
          isInsideRect = clientX >= refRect.right - 1 && clientX <= rect.right && clientY >= rect.top && clientY <= rect.bottom;
          break;
      }
      function getPolygon(_ref3) {
        let [x2, y2] = _ref3;
        const isFloatingWider = rect.width > refRect.width;
        const isFloatingTaller = rect.height > refRect.height;
        switch (side) {
          case "top": {
            const cursorPointOne = [isFloatingWider ? x2 + buffer / 2 : cursorLeaveFromRight ? x2 + buffer * 4 : x2 - buffer * 4, y2 + buffer + 1];
            const cursorPointTwo = [isFloatingWider ? x2 - buffer / 2 : cursorLeaveFromRight ? x2 + buffer * 4 : x2 - buffer * 4, y2 + buffer + 1];
            const commonPoints = [[rect.left, cursorLeaveFromRight ? rect.bottom - buffer : isFloatingWider ? rect.bottom - buffer : rect.top], [rect.right, cursorLeaveFromRight ? isFloatingWider ? rect.bottom - buffer : rect.top : rect.bottom - buffer]];
            return [cursorPointOne, cursorPointTwo, ...commonPoints];
          }
          case "bottom": {
            const cursorPointOne = [isFloatingWider ? x2 + buffer / 2 : cursorLeaveFromRight ? x2 + buffer * 4 : x2 - buffer * 4, y2 - buffer];
            const cursorPointTwo = [isFloatingWider ? x2 - buffer / 2 : cursorLeaveFromRight ? x2 + buffer * 4 : x2 - buffer * 4, y2 - buffer];
            const commonPoints = [[rect.left, cursorLeaveFromRight ? rect.top + buffer : isFloatingWider ? rect.top + buffer : rect.bottom], [rect.right, cursorLeaveFromRight ? isFloatingWider ? rect.top + buffer : rect.bottom : rect.top + buffer]];
            return [cursorPointOne, cursorPointTwo, ...commonPoints];
          }
          case "left": {
            const cursorPointOne = [x2 + buffer + 1, isFloatingTaller ? y2 + buffer / 2 : cursorLeaveFromBottom ? y2 + buffer * 4 : y2 - buffer * 4];
            const cursorPointTwo = [x2 + buffer + 1, isFloatingTaller ? y2 - buffer / 2 : cursorLeaveFromBottom ? y2 + buffer * 4 : y2 - buffer * 4];
            const commonPoints = [[cursorLeaveFromBottom ? rect.right - buffer : isFloatingTaller ? rect.right - buffer : rect.left, rect.top], [cursorLeaveFromBottom ? isFloatingTaller ? rect.right - buffer : rect.left : rect.right - buffer, rect.bottom]];
            return [...commonPoints, cursorPointOne, cursorPointTwo];
          }
          case "right": {
            const cursorPointOne = [x2 - buffer, isFloatingTaller ? y2 + buffer / 2 : cursorLeaveFromBottom ? y2 + buffer * 4 : y2 - buffer * 4];
            const cursorPointTwo = [x2 - buffer, isFloatingTaller ? y2 - buffer / 2 : cursorLeaveFromBottom ? y2 + buffer * 4 : y2 - buffer * 4];
            const commonPoints = [[cursorLeaveFromBottom ? rect.left + buffer : isFloatingTaller ? rect.left + buffer : rect.right, rect.top], [cursorLeaveFromBottom ? isFloatingTaller ? rect.left + buffer : rect.right : rect.left + buffer, rect.bottom]];
            return [cursorPointOne, cursorPointTwo, ...commonPoints];
          }
        }
      }
      const poly = isInsideRect ? rectPoly : getPolygon([x, y]);
      if (isInsideRect) {
        return;
      } else if (hasLanded && !isOverReferenceRect) {
        return close();
      }
      if (!isPointInPolygon([clientX, clientY], poly)) {
        close();
      } else if (restMs && !hasLanded) {
        timeoutId2 = setTimeout(close, restMs);
      }
    };
  };
  fn.__options = {
    blockPointerEvents
  };
  return fn;
}
function useFloating2(options) {
  if (options === void 0) {
    options = {};
  }
  const {
    open = false,
    onOpenChange: unstable_onOpenChange,
    nodeId
  } = options;
  const position = useFloating(options);
  const tree = useFloatingTree();
  const domReferenceRef = React2.useRef(null);
  const dataRef = React2.useRef({});
  const events = React2.useState(() => createPubSub())[0];
  const [domReference, setDomReference] = React2.useState(null);
  const setPositionReference = React2.useCallback((node) => {
    const positionReference = isElement2(node) ? {
      getBoundingClientRect: () => node.getBoundingClientRect(),
      contextElement: node
    } : node;
    position.refs.setReference(positionReference);
  }, [position.refs]);
  const setReference = React2.useCallback((node) => {
    if (isElement2(node) || node === null) {
      domReferenceRef.current = node;
      setDomReference(node);
    }
    if (isElement2(position.refs.reference.current) || position.refs.reference.current === null || // Don't allow setting virtual elements using the old technique back to
    // `null` to support `positionReference` + an unstable `reference`
    // callback ref.
    node !== null && !isElement2(node)) {
      position.refs.setReference(node);
    }
  }, [position.refs]);
  const refs = React2.useMemo(() => ({
    ...position.refs,
    setReference,
    setPositionReference,
    domReference: domReferenceRef
  }), [position.refs, setReference, setPositionReference]);
  const elements = React2.useMemo(() => ({
    ...position.elements,
    domReference
  }), [position.elements, domReference]);
  const onOpenChange = useEvent(unstable_onOpenChange);
  const context = React2.useMemo(() => ({
    ...position,
    refs,
    elements,
    dataRef,
    nodeId,
    events,
    open,
    onOpenChange
  }), [position, nodeId, events, open, onOpenChange, refs, elements]);
  index2(() => {
    const node = tree == null ? void 0 : tree.nodesRef.current.find((node2) => node2.id === nodeId);
    if (node) {
      node.context = context;
    }
  });
  return React2.useMemo(() => ({
    ...position,
    context,
    refs,
    reference: setReference,
    positionReference: setPositionReference
  }), [position, refs, context, setReference, setPositionReference]);
}
function mergeProps(userProps, propsList, elementKey) {
  const map = /* @__PURE__ */ new Map();
  return {
    ...elementKey === "floating" && {
      tabIndex: -1
    },
    ...userProps,
    ...propsList.map((value) => value ? value[elementKey] : null).concat(userProps).reduce((acc, props) => {
      if (!props) {
        return acc;
      }
      Object.entries(props).forEach((_ref) => {
        let [key, value] = _ref;
        if (key.indexOf("on") === 0) {
          if (!map.has(key)) {
            map.set(key, []);
          }
          if (typeof value === "function") {
            var _map$get;
            (_map$get = map.get(key)) == null ? void 0 : _map$get.push(value);
            acc[key] = function() {
              var _map$get2;
              for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
              }
              (_map$get2 = map.get(key)) == null ? void 0 : _map$get2.forEach((fn) => fn(...args));
            };
          }
        } else {
          acc[key] = value;
        }
      });
      return acc;
    }, {})
  };
}
var React2, import_react2, import_react_dom, index2, serverHandoffComplete, count, genId, useReactId, useId, FloatingNodeContext, FloatingTreeContext, useFloatingParentNodeId, useFloatingTree, useFloatingNodeId, FloatingNode, FloatingTree, safePolygonIdentifier, useHover, FloatingDelayGroupContext, useDelayGroupContext, FloatingDelayGroup, useDelayGroup, rafId, TYPEABLE_SELECTOR, getTabbableOptions, useInsertionEffect, useSafeInsertionEffect, HIDDEN_STYLES, activeElement, timeoutId, FocusGuard, PortalContext, useFloatingPortalNode, FloatingPortal, usePortalContext, VisuallyHiddenDismiss, identifier, FloatingOverlay, useClick, bubbleHandlerKeys, captureHandlerKeys, normalizeBubblesProp, useDismiss, useFocus, isPreventScrollSupported, ARROW_UP, ARROW_DOWN, ARROW_LEFT, ARROW_RIGHT, useListNavigation, useRole, camelCaseToKebabCase, useTypeahead, inner, useInnerOffset, useInteractions;
var init_floating_ui_react_esm = __esm({
  "node_modules/@floating-ui/react/dist/floating-ui.react.esm.js"() {
    React2 = __toESM(require_react());
    import_react2 = __toESM(require_react());
    init_es2015();
    init_index_esm();
    import_react_dom = __toESM(require_react_dom());
    init_floating_ui_react_dom_esm();
    init_floating_ui_react_dom_esm();
    init_floating_ui_dom();
    index2 = typeof document !== "undefined" ? import_react2.useLayoutEffect : import_react2.useEffect;
    serverHandoffComplete = false;
    count = 0;
    genId = () => "floating-ui-" + count++;
    useReactId = React2["useId".toString()];
    useId = useReactId || useFloatingId;
    FloatingNodeContext = React2.createContext(null);
    FloatingTreeContext = React2.createContext(null);
    useFloatingParentNodeId = () => {
      var _React$useContext;
      return ((_React$useContext = React2.useContext(FloatingNodeContext)) == null ? void 0 : _React$useContext.id) || null;
    };
    useFloatingTree = () => React2.useContext(FloatingTreeContext);
    useFloatingNodeId = (customParentId) => {
      const id = useId();
      const tree = useFloatingTree();
      const reactParentId = useFloatingParentNodeId();
      const parentId = customParentId || reactParentId;
      index2(() => {
        const node = {
          id,
          parentId
        };
        tree == null ? void 0 : tree.addNode(node);
        return () => {
          tree == null ? void 0 : tree.removeNode(node);
        };
      }, [tree, id, parentId]);
      return id;
    };
    FloatingNode = (_ref) => {
      let {
        children,
        id
      } = _ref;
      const parentId = useFloatingParentNodeId();
      return React2.createElement(FloatingNodeContext.Provider, {
        value: React2.useMemo(() => ({
          id,
          parentId
        }), [id, parentId])
      }, children);
    };
    FloatingTree = (_ref2) => {
      let {
        children
      } = _ref2;
      const nodesRef = React2.useRef([]);
      const addNode = React2.useCallback((node) => {
        nodesRef.current = [...nodesRef.current, node];
      }, []);
      const removeNode = React2.useCallback((node) => {
        nodesRef.current = nodesRef.current.filter((n) => n !== node);
      }, []);
      const events = React2.useState(() => createPubSub())[0];
      return React2.createElement(FloatingTreeContext.Provider, {
        value: React2.useMemo(() => ({
          nodesRef,
          addNode,
          removeNode,
          events
        }), [nodesRef, addNode, removeNode, events])
      }, children);
    };
    safePolygonIdentifier = "data-floating-ui-safe-polygon";
    useHover = function(context, _temp) {
      let {
        enabled = true,
        delay = 0,
        handleClose = null,
        mouseOnly = false,
        restMs = 0,
        move = true
      } = _temp === void 0 ? {} : _temp;
      const {
        open,
        onOpenChange,
        dataRef,
        events,
        elements: {
          domReference,
          floating
        },
        refs
      } = context;
      const tree = useFloatingTree();
      const parentId = useFloatingParentNodeId();
      const handleCloseRef = useLatestRef2(handleClose);
      const delayRef = useLatestRef2(delay);
      const pointerTypeRef = React2.useRef();
      const timeoutRef = React2.useRef();
      const handlerRef = React2.useRef();
      const restTimeoutRef = React2.useRef();
      const blockMouseMoveRef = React2.useRef(true);
      const performedPointerEventsMutationRef = React2.useRef(false);
      const unbindMouseMoveRef = React2.useRef(() => {
      });
      const isHoverOpen = React2.useCallback(() => {
        var _dataRef$current$open;
        const type = (_dataRef$current$open = dataRef.current.openEvent) == null ? void 0 : _dataRef$current$open.type;
        return (type == null ? void 0 : type.includes("mouse")) && type !== "mousedown";
      }, [dataRef]);
      React2.useEffect(() => {
        if (!enabled) {
          return;
        }
        function onDismiss() {
          clearTimeout(timeoutRef.current);
          clearTimeout(restTimeoutRef.current);
          blockMouseMoveRef.current = true;
        }
        events.on("dismiss", onDismiss);
        return () => {
          events.off("dismiss", onDismiss);
        };
      }, [enabled, events]);
      React2.useEffect(() => {
        if (!enabled || !handleCloseRef.current || !open) {
          return;
        }
        function onLeave() {
          if (isHoverOpen()) {
            onOpenChange(false);
          }
        }
        const html = getDocument(floating).documentElement;
        html.addEventListener("mouseleave", onLeave);
        return () => {
          html.removeEventListener("mouseleave", onLeave);
        };
      }, [floating, open, onOpenChange, enabled, handleCloseRef, dataRef, isHoverOpen]);
      const closeWithDelay = React2.useCallback(function(runElseBranch) {
        if (runElseBranch === void 0) {
          runElseBranch = true;
        }
        const closeDelay = getDelay(delayRef.current, "close", pointerTypeRef.current);
        if (closeDelay && !handlerRef.current) {
          clearTimeout(timeoutRef.current);
          timeoutRef.current = setTimeout(() => onOpenChange(false), closeDelay);
        } else if (runElseBranch) {
          clearTimeout(timeoutRef.current);
          onOpenChange(false);
        }
      }, [delayRef, onOpenChange]);
      const cleanupMouseMoveHandler = React2.useCallback(() => {
        unbindMouseMoveRef.current();
        handlerRef.current = void 0;
      }, []);
      const clearPointerEvents = React2.useCallback(() => {
        if (performedPointerEventsMutationRef.current) {
          const body = getDocument(refs.floating.current).body;
          body.style.pointerEvents = "";
          body.removeAttribute(safePolygonIdentifier);
          performedPointerEventsMutationRef.current = false;
        }
      }, [refs]);
      React2.useEffect(() => {
        if (!enabled) {
          return;
        }
        function isClickLikeOpenEvent() {
          return dataRef.current.openEvent ? ["click", "mousedown"].includes(dataRef.current.openEvent.type) : false;
        }
        function onMouseEnter(event) {
          clearTimeout(timeoutRef.current);
          blockMouseMoveRef.current = false;
          if (mouseOnly && !isMouseLikePointerType(pointerTypeRef.current) || restMs > 0 && getDelay(delayRef.current, "open") === 0) {
            return;
          }
          dataRef.current.openEvent = event;
          const openDelay = getDelay(delayRef.current, "open", pointerTypeRef.current);
          if (openDelay) {
            timeoutRef.current = setTimeout(() => {
              onOpenChange(true);
            }, openDelay);
          } else {
            onOpenChange(true);
          }
        }
        function onMouseLeave(event) {
          if (isClickLikeOpenEvent()) {
            return;
          }
          unbindMouseMoveRef.current();
          const doc = getDocument(floating);
          clearTimeout(restTimeoutRef.current);
          if (handleCloseRef.current) {
            clearTimeout(timeoutRef.current);
            handlerRef.current = handleCloseRef.current({
              ...context,
              tree,
              x: event.clientX,
              y: event.clientY,
              onClose() {
                clearPointerEvents();
                cleanupMouseMoveHandler();
                closeWithDelay();
              }
            });
            const handler = handlerRef.current;
            doc.addEventListener("mousemove", handler);
            unbindMouseMoveRef.current = () => {
              doc.removeEventListener("mousemove", handler);
            };
            return;
          }
          closeWithDelay();
        }
        function onScrollMouseLeave(event) {
          if (isClickLikeOpenEvent()) {
            return;
          }
          handleCloseRef.current == null ? void 0 : handleCloseRef.current({
            ...context,
            tree,
            x: event.clientX,
            y: event.clientY,
            onClose() {
              cleanupMouseMoveHandler();
              closeWithDelay();
            }
          })(event);
        }
        if (isElement2(domReference)) {
          const ref = domReference;
          open && ref.addEventListener("mouseleave", onScrollMouseLeave);
          floating == null ? void 0 : floating.addEventListener("mouseleave", onScrollMouseLeave);
          move && ref.addEventListener("mousemove", onMouseEnter, {
            once: true
          });
          ref.addEventListener("mouseenter", onMouseEnter);
          ref.addEventListener("mouseleave", onMouseLeave);
          return () => {
            open && ref.removeEventListener("mouseleave", onScrollMouseLeave);
            floating == null ? void 0 : floating.removeEventListener("mouseleave", onScrollMouseLeave);
            move && ref.removeEventListener("mousemove", onMouseEnter);
            ref.removeEventListener("mouseenter", onMouseEnter);
            ref.removeEventListener("mouseleave", onMouseLeave);
          };
        }
      }, [domReference, floating, enabled, context, mouseOnly, restMs, move, closeWithDelay, cleanupMouseMoveHandler, clearPointerEvents, onOpenChange, open, tree, delayRef, handleCloseRef, dataRef]);
      index2(() => {
        var _handleCloseRef$curre;
        if (!enabled) {
          return;
        }
        if (open && (_handleCloseRef$curre = handleCloseRef.current) != null && _handleCloseRef$curre.__options.blockPointerEvents && isHoverOpen()) {
          const body = getDocument(floating).body;
          body.setAttribute(safePolygonIdentifier, "");
          body.style.pointerEvents = "none";
          performedPointerEventsMutationRef.current = true;
          if (isElement2(domReference) && floating) {
            var _tree$nodesRef$curren, _tree$nodesRef$curren2;
            const ref = domReference;
            const parentFloating = tree == null ? void 0 : (_tree$nodesRef$curren = tree.nodesRef.current.find((node) => node.id === parentId)) == null ? void 0 : (_tree$nodesRef$curren2 = _tree$nodesRef$curren.context) == null ? void 0 : _tree$nodesRef$curren2.elements.floating;
            if (parentFloating) {
              parentFloating.style.pointerEvents = "";
            }
            ref.style.pointerEvents = "auto";
            floating.style.pointerEvents = "auto";
            return () => {
              ref.style.pointerEvents = "";
              floating.style.pointerEvents = "";
            };
          }
        }
      }, [enabled, open, parentId, floating, domReference, tree, handleCloseRef, dataRef, isHoverOpen]);
      index2(() => {
        if (!open) {
          pointerTypeRef.current = void 0;
          cleanupMouseMoveHandler();
          clearPointerEvents();
        }
      }, [open, cleanupMouseMoveHandler, clearPointerEvents]);
      React2.useEffect(() => {
        return () => {
          cleanupMouseMoveHandler();
          clearTimeout(timeoutRef.current);
          clearTimeout(restTimeoutRef.current);
          clearPointerEvents();
        };
      }, [enabled, cleanupMouseMoveHandler, clearPointerEvents]);
      return React2.useMemo(() => {
        if (!enabled) {
          return {};
        }
        function setPointerRef(event) {
          pointerTypeRef.current = event.pointerType;
        }
        return {
          reference: {
            onPointerDown: setPointerRef,
            onPointerEnter: setPointerRef,
            onMouseMove() {
              if (open || restMs === 0) {
                return;
              }
              clearTimeout(restTimeoutRef.current);
              restTimeoutRef.current = setTimeout(() => {
                if (!blockMouseMoveRef.current) {
                  onOpenChange(true);
                }
              }, restMs);
            }
          },
          floating: {
            onMouseEnter() {
              clearTimeout(timeoutRef.current);
            },
            onMouseLeave() {
              events.emit("dismiss", {
                type: "mouseLeave",
                data: {
                  returnFocus: false
                }
              });
              closeWithDelay(false);
            }
          }
        };
      }, [events, enabled, restMs, open, onOpenChange, closeWithDelay]);
    };
    FloatingDelayGroupContext = React2.createContext({
      delay: 0,
      initialDelay: 0,
      timeoutMs: 0,
      currentId: null,
      setCurrentId: () => {
      },
      setState: () => {
      },
      isInstantPhase: false
    });
    useDelayGroupContext = () => React2.useContext(FloatingDelayGroupContext);
    FloatingDelayGroup = (_ref) => {
      let {
        children,
        delay,
        timeoutMs = 0
      } = _ref;
      const [state, setState] = React2.useReducer((prev, next) => ({
        ...prev,
        ...next
      }), {
        delay,
        timeoutMs,
        initialDelay: delay,
        currentId: null,
        isInstantPhase: false
      });
      const initialCurrentIdRef = React2.useRef(null);
      const setCurrentId = React2.useCallback((currentId) => {
        setState({
          currentId
        });
      }, []);
      index2(() => {
        if (state.currentId) {
          if (initialCurrentIdRef.current === null) {
            initialCurrentIdRef.current = state.currentId;
          } else {
            setState({
              isInstantPhase: true
            });
          }
        } else {
          setState({
            isInstantPhase: false
          });
          initialCurrentIdRef.current = null;
        }
      }, [state.currentId]);
      return React2.createElement(FloatingDelayGroupContext.Provider, {
        value: React2.useMemo(() => ({
          ...state,
          setState,
          setCurrentId
        }), [state, setState, setCurrentId])
      }, children);
    };
    useDelayGroup = (_ref2, _ref3) => {
      let {
        open,
        onOpenChange
      } = _ref2;
      let {
        id
      } = _ref3;
      const {
        currentId,
        setCurrentId,
        initialDelay,
        setState,
        timeoutMs
      } = useDelayGroupContext();
      React2.useEffect(() => {
        if (currentId) {
          setState({
            delay: {
              open: 1,
              close: getDelay(initialDelay, "close")
            }
          });
          if (currentId !== id) {
            onOpenChange(false);
          }
        }
      }, [id, onOpenChange, setState, currentId, initialDelay]);
      React2.useEffect(() => {
        function unset() {
          onOpenChange(false);
          setState({
            delay: initialDelay,
            currentId: null
          });
        }
        if (!open && currentId === id) {
          if (timeoutMs) {
            const timeout = window.setTimeout(unset, timeoutMs);
            return () => {
              clearTimeout(timeout);
            };
          } else {
            unset();
          }
        }
      }, [open, setState, currentId, id, onOpenChange, initialDelay, timeoutMs]);
      React2.useEffect(() => {
        if (open) {
          setCurrentId(id);
        }
      }, [open, setCurrentId, id]);
    };
    rafId = 0;
    TYPEABLE_SELECTOR = "input:not([type='hidden']):not([disabled]),[contenteditable]:not([contenteditable='false']),textarea:not([disabled])";
    getTabbableOptions = () => ({
      getShadowRoot: true,
      displayCheck: (
        // JSDOM does not support the `tabbable` library. To solve this we can
        // check if `ResizeObserver` is a real function (not polyfilled), which
        // determines if the current environment is JSDOM-like.
        typeof ResizeObserver === "function" && ResizeObserver.toString().includes("[native code]") ? "full" : "none"
      )
    });
    useInsertionEffect = React2["useInsertionEffect".toString()];
    useSafeInsertionEffect = useInsertionEffect || ((fn) => fn());
    HIDDEN_STYLES = {
      border: 0,
      clip: "rect(0 0 0 0)",
      height: "1px",
      margin: "-1px",
      overflow: "hidden",
      padding: 0,
      position: "fixed",
      whiteSpace: "nowrap",
      width: "1px",
      top: 0,
      left: 0
    };
    FocusGuard = React2.forwardRef(function FocusGuard2(props, ref) {
      const onFocus = useEvent(props.onFocus);
      const [role, setRole] = React2.useState();
      index2(() => {
        if (isSafari()) {
          setRole("button");
        }
        document.addEventListener("keydown", setActiveElementOnTab);
        return () => {
          document.removeEventListener("keydown", setActiveElementOnTab);
        };
      }, []);
      return React2.createElement("span", _extends({}, props, {
        ref,
        tabIndex: 0,
        role,
        "aria-hidden": role ? void 0 : true,
        "data-floating-ui-focus-guard": "",
        style: HIDDEN_STYLES,
        onFocus: (event) => {
          if (isSafari() && isMac() && !isTabFocus(event)) {
            event.persist();
            timeoutId = window.setTimeout(() => {
              onFocus(event);
            }, 50);
          } else {
            onFocus(event);
          }
        }
      }));
    });
    PortalContext = React2.createContext(null);
    useFloatingPortalNode = function(_temp) {
      let {
        id,
        enabled = true
      } = _temp === void 0 ? {} : _temp;
      const [portalEl, setPortalEl] = React2.useState(null);
      const uniqueId = useId();
      const portalContext = usePortalContext();
      index2(() => {
        if (!enabled) {
          return;
        }
        const rootNode = id ? document.getElementById(id) : null;
        if (rootNode) {
          rootNode.setAttribute("data-floating-ui-portal", "");
          setPortalEl(rootNode);
        } else {
          const newPortalEl = document.createElement("div");
          if (id !== "") {
            newPortalEl.id = id || uniqueId;
          }
          newPortalEl.setAttribute("data-floating-ui-portal", "");
          setPortalEl(newPortalEl);
          const container = (portalContext == null ? void 0 : portalContext.portalNode) || document.body;
          container.appendChild(newPortalEl);
          return () => {
            container.removeChild(newPortalEl);
          };
        }
      }, [id, portalContext, uniqueId, enabled]);
      return portalEl;
    };
    FloatingPortal = (_ref) => {
      let {
        children,
        id,
        root = null,
        preserveTabOrder = true
      } = _ref;
      const portalNode = useFloatingPortalNode({
        id,
        enabled: !root
      });
      const [focusManagerState, setFocusManagerState] = React2.useState(null);
      const beforeOutsideRef = React2.useRef(null);
      const afterOutsideRef = React2.useRef(null);
      const beforeInsideRef = React2.useRef(null);
      const afterInsideRef = React2.useRef(null);
      const shouldRenderGuards = (
        // The FocusManager and therefore floating element are currently open/
        // rendered.
        !!focusManagerState && // Guards are only for non-modal focus management.
        !focusManagerState.modal && !!(root || portalNode) && preserveTabOrder
      );
      React2.useEffect(() => {
        if (!portalNode || !preserveTabOrder || focusManagerState != null && focusManagerState.modal) {
          return;
        }
        function onFocus(event) {
          if (portalNode && isOutsideEvent(event)) {
            const focusing = event.type === "focusin";
            const manageFocus = focusing ? enableFocusInside : disableFocusInside;
            manageFocus(portalNode);
          }
        }
        portalNode.addEventListener("focusin", onFocus, true);
        portalNode.addEventListener("focusout", onFocus, true);
        return () => {
          portalNode.removeEventListener("focusin", onFocus, true);
          portalNode.removeEventListener("focusout", onFocus, true);
        };
      }, [portalNode, preserveTabOrder, focusManagerState == null ? void 0 : focusManagerState.modal]);
      return React2.createElement(PortalContext.Provider, {
        value: React2.useMemo(() => ({
          preserveTabOrder,
          beforeOutsideRef,
          afterOutsideRef,
          beforeInsideRef,
          afterInsideRef,
          portalNode,
          setFocusManagerState
        }), [preserveTabOrder, portalNode])
      }, shouldRenderGuards && portalNode && React2.createElement(FocusGuard, {
        "data-type": "outside",
        ref: beforeOutsideRef,
        onFocus: (event) => {
          if (isOutsideEvent(event, portalNode)) {
            var _beforeInsideRef$curr;
            (_beforeInsideRef$curr = beforeInsideRef.current) == null ? void 0 : _beforeInsideRef$curr.focus();
          } else {
            const prevTabbable = getPreviousTabbable() || (focusManagerState == null ? void 0 : focusManagerState.refs.domReference.current);
            prevTabbable == null ? void 0 : prevTabbable.focus();
          }
        }
      }), shouldRenderGuards && portalNode && React2.createElement("span", {
        "aria-owns": portalNode.id,
        style: HIDDEN_STYLES
      }), root ? (0, import_react_dom.createPortal)(children, root) : portalNode ? (0, import_react_dom.createPortal)(children, portalNode) : null, shouldRenderGuards && portalNode && React2.createElement(FocusGuard, {
        "data-type": "outside",
        ref: afterOutsideRef,
        onFocus: (event) => {
          if (isOutsideEvent(event, portalNode)) {
            var _afterInsideRef$curre;
            (_afterInsideRef$curre = afterInsideRef.current) == null ? void 0 : _afterInsideRef$curre.focus();
          } else {
            const nextTabbable = getNextTabbable() || (focusManagerState == null ? void 0 : focusManagerState.refs.domReference.current);
            nextTabbable == null ? void 0 : nextTabbable.focus();
            (focusManagerState == null ? void 0 : focusManagerState.closeOnFocusOut) && (focusManagerState == null ? void 0 : focusManagerState.onOpenChange(false));
          }
        }
      }));
    };
    usePortalContext = () => React2.useContext(PortalContext);
    VisuallyHiddenDismiss = React2.forwardRef(function VisuallyHiddenDismiss2(props, ref) {
      return React2.createElement("button", _extends({}, props, {
        type: "button",
        ref,
        tabIndex: -1,
        style: HIDDEN_STYLES
      }));
    });
    identifier = "data-floating-ui-scroll-lock";
    FloatingOverlay = React2.forwardRef(function FloatingOverlay2(_ref, ref) {
      let {
        lockScroll = false,
        ...rest
      } = _ref;
      index2(() => {
        var _window$visualViewpor, _window$visualViewpor2;
        if (!lockScroll) {
          return;
        }
        const alreadyLocked = document.body.hasAttribute(identifier);
        if (alreadyLocked) {
          return;
        }
        document.body.setAttribute(identifier, "");
        const scrollbarX = Math.round(document.documentElement.getBoundingClientRect().left) + document.documentElement.scrollLeft;
        const paddingProp = scrollbarX ? "paddingLeft" : "paddingRight";
        const scrollbarWidth = window.innerWidth - document.documentElement.clientWidth;
        if (!/iP(hone|ad|od)|iOS/.test(getPlatform())) {
          Object.assign(document.body.style, {
            overflow: "hidden",
            [paddingProp]: scrollbarWidth + "px"
          });
          return () => {
            document.body.removeAttribute(identifier);
            Object.assign(document.body.style, {
              overflow: "",
              [paddingProp]: ""
            });
          };
        }
        const offsetLeft = ((_window$visualViewpor = window.visualViewport) == null ? void 0 : _window$visualViewpor.offsetLeft) || 0;
        const offsetTop = ((_window$visualViewpor2 = window.visualViewport) == null ? void 0 : _window$visualViewpor2.offsetTop) || 0;
        const scrollX = window.pageXOffset;
        const scrollY = window.pageYOffset;
        Object.assign(document.body.style, {
          position: "fixed",
          overflow: "hidden",
          top: -(scrollY - Math.floor(offsetTop)) + "px",
          left: -(scrollX - Math.floor(offsetLeft)) + "px",
          right: "0",
          [paddingProp]: scrollbarWidth + "px"
        });
        return () => {
          Object.assign(document.body.style, {
            position: "",
            overflow: "",
            top: "",
            left: "",
            right: "",
            [paddingProp]: ""
          });
          document.body.removeAttribute(identifier);
          window.scrollTo(scrollX, scrollY);
        };
      }, [lockScroll]);
      return React2.createElement("div", _extends({
        ref
      }, rest, {
        style: {
          position: "fixed",
          overflow: "auto",
          top: 0,
          right: 0,
          bottom: 0,
          left: 0,
          ...rest.style
        }
      }));
    });
    useClick = function(_ref, _temp) {
      let {
        open,
        onOpenChange,
        dataRef,
        elements: {
          domReference
        }
      } = _ref;
      let {
        enabled = true,
        event: eventOption = "click",
        toggle = true,
        ignoreMouse = false,
        keyboardHandlers = true
      } = _temp === void 0 ? {} : _temp;
      const pointerTypeRef = React2.useRef();
      return React2.useMemo(() => {
        if (!enabled) {
          return {};
        }
        return {
          reference: {
            onPointerDown(event) {
              pointerTypeRef.current = event.pointerType;
            },
            onMouseDown(event) {
              if (event.button !== 0) {
                return;
              }
              if (isMouseLikePointerType(pointerTypeRef.current, true) && ignoreMouse) {
                return;
              }
              if (eventOption === "click") {
                return;
              }
              if (open) {
                if (toggle && (dataRef.current.openEvent ? dataRef.current.openEvent.type === "mousedown" : true)) {
                  onOpenChange(false);
                }
              } else {
                event.preventDefault();
                onOpenChange(true);
              }
              dataRef.current.openEvent = event.nativeEvent;
            },
            onClick(event) {
              if (dataRef.current.__syncReturnFocus) {
                return;
              }
              if (eventOption === "mousedown" && pointerTypeRef.current) {
                pointerTypeRef.current = void 0;
                return;
              }
              if (isMouseLikePointerType(pointerTypeRef.current, true) && ignoreMouse) {
                return;
              }
              if (open) {
                if (toggle && (dataRef.current.openEvent ? dataRef.current.openEvent.type === "click" : true)) {
                  onOpenChange(false);
                }
              } else {
                onOpenChange(true);
              }
              dataRef.current.openEvent = event.nativeEvent;
            },
            onKeyDown(event) {
              pointerTypeRef.current = void 0;
              if (!keyboardHandlers) {
                return;
              }
              if (isButtonTarget(event)) {
                return;
              }
              if (event.key === " " && !isSpaceIgnored(domReference)) {
                event.preventDefault();
              }
              if (event.key === "Enter") {
                if (open) {
                  if (toggle) {
                    onOpenChange(false);
                  }
                } else {
                  onOpenChange(true);
                }
              }
            },
            onKeyUp(event) {
              if (!keyboardHandlers) {
                return;
              }
              if (isButtonTarget(event) || isSpaceIgnored(domReference)) {
                return;
              }
              if (event.key === " ") {
                if (open) {
                  if (toggle) {
                    onOpenChange(false);
                  }
                } else {
                  onOpenChange(true);
                }
              }
            }
          }
        };
      }, [enabled, dataRef, eventOption, ignoreMouse, keyboardHandlers, domReference, toggle, open, onOpenChange]);
    };
    bubbleHandlerKeys = {
      pointerdown: "onPointerDown",
      mousedown: "onMouseDown",
      click: "onClick"
    };
    captureHandlerKeys = {
      pointerdown: "onPointerDownCapture",
      mousedown: "onMouseDownCapture",
      click: "onClickCapture"
    };
    normalizeBubblesProp = function(bubbles) {
      var _bubbles$escapeKey, _bubbles$outsidePress;
      if (bubbles === void 0) {
        bubbles = true;
      }
      return {
        escapeKeyBubbles: typeof bubbles === "boolean" ? bubbles : (_bubbles$escapeKey = bubbles.escapeKey) != null ? _bubbles$escapeKey : true,
        outsidePressBubbles: typeof bubbles === "boolean" ? bubbles : (_bubbles$outsidePress = bubbles.outsidePress) != null ? _bubbles$outsidePress : true
      };
    };
    useDismiss = function(_ref, _temp) {
      let {
        open,
        onOpenChange,
        events,
        nodeId,
        elements: {
          reference,
          domReference,
          floating
        },
        dataRef
      } = _ref;
      let {
        enabled = true,
        escapeKey = true,
        outsidePress: unstable_outsidePress = true,
        outsidePressEvent = "pointerdown",
        referencePress = false,
        referencePressEvent = "pointerdown",
        ancestorScroll = false,
        bubbles = true
      } = _temp === void 0 ? {} : _temp;
      const tree = useFloatingTree();
      const nested = useFloatingParentNodeId() != null;
      const outsidePressFn = useEvent(typeof unstable_outsidePress === "function" ? unstable_outsidePress : () => false);
      const outsidePress = typeof unstable_outsidePress === "function" ? outsidePressFn : unstable_outsidePress;
      const insideReactTreeRef = React2.useRef(false);
      const {
        escapeKeyBubbles,
        outsidePressBubbles
      } = normalizeBubblesProp(bubbles);
      React2.useEffect(() => {
        if (!open || !enabled) {
          return;
        }
        dataRef.current.__escapeKeyBubbles = escapeKeyBubbles;
        dataRef.current.__outsidePressBubbles = outsidePressBubbles;
        function onKeyDown(event) {
          if (event.key === "Escape") {
            const children = tree ? getChildren(tree.nodesRef.current, nodeId) : [];
            if (children.length > 0) {
              let shouldDismiss = true;
              children.forEach((child) => {
                var _child$context;
                if ((_child$context = child.context) != null && _child$context.open && !child.context.dataRef.current.__escapeKeyBubbles) {
                  shouldDismiss = false;
                  return;
                }
              });
              if (!shouldDismiss) {
                return;
              }
            }
            events.emit("dismiss", {
              type: "escapeKey",
              data: {
                returnFocus: {
                  preventScroll: false
                }
              }
            });
            onOpenChange(false);
          }
        }
        function onOutsidePress(event) {
          const insideReactTree = insideReactTreeRef.current;
          insideReactTreeRef.current = false;
          if (insideReactTree) {
            return;
          }
          if (typeof outsidePress === "function" && !outsidePress(event)) {
            return;
          }
          const target = getTarget(event);
          if (isHTMLElement2(target) && floating) {
            const win = floating.ownerDocument.defaultView || window;
            const canScrollX = target.scrollWidth > target.clientWidth;
            const canScrollY = target.scrollHeight > target.clientHeight;
            let xCond = canScrollY && event.offsetX > target.clientWidth;
            if (canScrollY) {
              const isRTL2 = win.getComputedStyle(target).direction === "rtl";
              if (isRTL2) {
                xCond = event.offsetX <= target.offsetWidth - target.clientWidth;
              }
            }
            if (xCond || canScrollX && event.offsetY > target.clientHeight) {
              return;
            }
          }
          const targetIsInsideChildren = tree && getChildren(tree.nodesRef.current, nodeId).some((node) => {
            var _node$context;
            return isEventTargetWithin(event, (_node$context = node.context) == null ? void 0 : _node$context.elements.floating);
          });
          if (isEventTargetWithin(event, floating) || isEventTargetWithin(event, domReference) || targetIsInsideChildren) {
            return;
          }
          const children = tree ? getChildren(tree.nodesRef.current, nodeId) : [];
          if (children.length > 0) {
            let shouldDismiss = true;
            children.forEach((child) => {
              var _child$context2;
              if ((_child$context2 = child.context) != null && _child$context2.open && !child.context.dataRef.current.__outsidePressBubbles) {
                shouldDismiss = false;
                return;
              }
            });
            if (!shouldDismiss) {
              return;
            }
          }
          events.emit("dismiss", {
            type: "outsidePress",
            data: {
              returnFocus: nested ? {
                preventScroll: true
              } : isVirtualClick(event) || isVirtualPointerEvent(event)
            }
          });
          onOpenChange(false);
        }
        function onScroll() {
          onOpenChange(false);
        }
        const doc = getDocument(floating);
        escapeKey && doc.addEventListener("keydown", onKeyDown);
        outsidePress && doc.addEventListener(outsidePressEvent, onOutsidePress);
        let ancestors = [];
        if (ancestorScroll) {
          if (isElement2(domReference)) {
            ancestors = getOverflowAncestors(domReference);
          }
          if (isElement2(floating)) {
            ancestors = ancestors.concat(getOverflowAncestors(floating));
          }
          if (!isElement2(reference) && reference && reference.contextElement) {
            ancestors = ancestors.concat(getOverflowAncestors(reference.contextElement));
          }
        }
        ancestors = ancestors.filter((ancestor) => {
          var _doc$defaultView;
          return ancestor !== ((_doc$defaultView = doc.defaultView) == null ? void 0 : _doc$defaultView.visualViewport);
        });
        ancestors.forEach((ancestor) => {
          ancestor.addEventListener("scroll", onScroll, {
            passive: true
          });
        });
        return () => {
          escapeKey && doc.removeEventListener("keydown", onKeyDown);
          outsidePress && doc.removeEventListener(outsidePressEvent, onOutsidePress);
          ancestors.forEach((ancestor) => {
            ancestor.removeEventListener("scroll", onScroll);
          });
        };
      }, [dataRef, floating, domReference, reference, escapeKey, outsidePress, outsidePressEvent, events, tree, nodeId, open, onOpenChange, ancestorScroll, enabled, escapeKeyBubbles, outsidePressBubbles, nested]);
      React2.useEffect(() => {
        insideReactTreeRef.current = false;
      }, [outsidePress, outsidePressEvent]);
      return React2.useMemo(() => {
        if (!enabled) {
          return {};
        }
        return {
          reference: {
            [bubbleHandlerKeys[referencePressEvent]]: () => {
              if (referencePress) {
                events.emit("dismiss", {
                  type: "referencePress",
                  data: {
                    returnFocus: false
                  }
                });
                onOpenChange(false);
              }
            }
          },
          floating: {
            [captureHandlerKeys[outsidePressEvent]]: () => {
              insideReactTreeRef.current = true;
            }
          }
        };
      }, [enabled, events, referencePress, outsidePressEvent, referencePressEvent, onOpenChange]);
    };
    useFocus = function(_ref, _temp) {
      let {
        open,
        onOpenChange,
        dataRef,
        events,
        refs,
        elements: {
          floating,
          domReference
        }
      } = _ref;
      let {
        enabled = true,
        keyboardOnly = true
      } = _temp === void 0 ? {} : _temp;
      const pointerTypeRef = React2.useRef("");
      const blockFocusRef = React2.useRef(false);
      const timeoutRef = React2.useRef();
      React2.useEffect(() => {
        if (!enabled) {
          return;
        }
        const doc = getDocument(floating);
        const win = doc.defaultView || window;
        function onBlur() {
          if (!open && isHTMLElement2(domReference) && domReference === activeElement$1(getDocument(domReference))) {
            blockFocusRef.current = true;
          }
        }
        win.addEventListener("blur", onBlur);
        return () => {
          win.removeEventListener("blur", onBlur);
        };
      }, [floating, domReference, open, enabled]);
      React2.useEffect(() => {
        if (!enabled) {
          return;
        }
        function onDismiss(payload) {
          if (payload.type === "referencePress" || payload.type === "escapeKey") {
            blockFocusRef.current = true;
          }
        }
        events.on("dismiss", onDismiss);
        return () => {
          events.off("dismiss", onDismiss);
        };
      }, [events, enabled]);
      React2.useEffect(() => {
        return () => {
          clearTimeout(timeoutRef.current);
        };
      }, []);
      return React2.useMemo(() => {
        if (!enabled) {
          return {};
        }
        return {
          reference: {
            onPointerDown(_ref2) {
              let {
                pointerType
              } = _ref2;
              pointerTypeRef.current = pointerType;
              blockFocusRef.current = !!(pointerType && keyboardOnly);
            },
            onMouseLeave() {
              blockFocusRef.current = false;
            },
            onFocus(event) {
              var _dataRef$current$open;
              if (blockFocusRef.current) {
                return;
              }
              if (event.type === "focus" && ((_dataRef$current$open = dataRef.current.openEvent) == null ? void 0 : _dataRef$current$open.type) === "mousedown" && dataRef.current.openEvent && isEventTargetWithin(dataRef.current.openEvent, domReference)) {
                return;
              }
              dataRef.current.openEvent = event.nativeEvent;
              onOpenChange(true);
            },
            onBlur(event) {
              blockFocusRef.current = false;
              const relatedTarget = event.relatedTarget;
              const movedToFocusGuard = isElement2(relatedTarget) && relatedTarget.hasAttribute("data-floating-ui-focus-guard") && relatedTarget.getAttribute("data-type") === "outside";
              timeoutRef.current = setTimeout(() => {
                if (contains(refs.floating.current, relatedTarget) || contains(domReference, relatedTarget) || movedToFocusGuard) {
                  return;
                }
                onOpenChange(false);
              });
            }
          }
        };
      }, [enabled, keyboardOnly, domReference, refs, dataRef, onOpenChange]);
    };
    isPreventScrollSupported = false;
    ARROW_UP = "ArrowUp";
    ARROW_DOWN = "ArrowDown";
    ARROW_LEFT = "ArrowLeft";
    ARROW_RIGHT = "ArrowRight";
    useListNavigation = function(_ref, _temp2) {
      let {
        open,
        onOpenChange,
        refs,
        elements: {
          domReference
        }
      } = _ref;
      let {
        listRef,
        activeIndex,
        onNavigate: unstable_onNavigate = () => {
        },
        enabled = true,
        selectedIndex = null,
        allowEscape = false,
        loop = false,
        nested = false,
        rtl = false,
        virtual = false,
        focusItemOnOpen = "auto",
        focusItemOnHover = true,
        openOnArrowKeyDown = true,
        disabledIndices = void 0,
        orientation = "vertical",
        cols = 1,
        scrollItemIntoView = true
      } = _temp2 === void 0 ? {
        listRef: {
          current: []
        },
        activeIndex: null,
        onNavigate: () => {
        }
      } : _temp2;
      if (true) {
        if (allowEscape) {
          if (!loop) {
            console.warn(["Floating UI: `useListNavigation` looping must be enabled to allow", "escaping."].join(" "));
          }
          if (!virtual) {
            console.warn(["Floating UI: `useListNavigation` must be virtual to allow", "escaping."].join(" "));
          }
        }
        if (orientation === "vertical" && cols > 1) {
          console.warn(["Floating UI: In grid list navigation mode (`cols` > 1), the", '`orientation` should be either "horizontal" or "both".'].join(" "));
        }
      }
      const parentId = useFloatingParentNodeId();
      const tree = useFloatingTree();
      const onNavigate = useEvent(unstable_onNavigate);
      const focusItemOnOpenRef = React2.useRef(focusItemOnOpen);
      const indexRef = React2.useRef(selectedIndex != null ? selectedIndex : -1);
      const keyRef = React2.useRef(null);
      const isPointerModalityRef = React2.useRef(true);
      const previousOnNavigateRef = React2.useRef(onNavigate);
      const previousOpenRef = React2.useRef(open);
      const forceSyncFocus = React2.useRef(false);
      const forceScrollIntoViewRef = React2.useRef(false);
      const disabledIndicesRef = useLatestRef2(disabledIndices);
      const latestOpenRef = useLatestRef2(open);
      const scrollItemIntoViewRef = useLatestRef2(scrollItemIntoView);
      const [activeId, setActiveId] = React2.useState();
      const focusItem = React2.useCallback(function(listRef2, indexRef2, forceScrollIntoView) {
        if (forceScrollIntoView === void 0) {
          forceScrollIntoView = false;
        }
        const item2 = listRef2.current[indexRef2.current];
        if (virtual) {
          setActiveId(item2 == null ? void 0 : item2.id);
        } else {
          enqueueFocus(item2, {
            preventScroll: true,
            // Mac Safari does not move the virtual cursor unless the focus call
            // is sync. However, for the very first focus call, we need to wait
            // for the position to be ready in order to prevent unwanted
            // scrolling. This means the virtual cursor will not move to the first
            // item when first opening the floating element, but will on
            // subsequent calls. `preventScroll` is supported in modern Safari,
            // so we can use that instead.
            // iOS Safari must be async or the first item will not be focused.
            sync: isMac() && isSafari() ? isPreventScrollSupported || forceSyncFocus.current : false
          });
        }
        requestAnimationFrame(() => {
          const scrollIntoViewOptions = scrollItemIntoViewRef.current;
          const shouldScrollIntoView = scrollIntoViewOptions && item2 && (forceScrollIntoView || !isPointerModalityRef.current);
          if (shouldScrollIntoView) {
            item2.scrollIntoView == null ? void 0 : item2.scrollIntoView(typeof scrollIntoViewOptions === "boolean" ? {
              block: "nearest",
              inline: "nearest"
            } : scrollIntoViewOptions);
          }
        });
      }, [virtual, scrollItemIntoViewRef]);
      index2(() => {
        document.createElement("div").focus({
          get preventScroll() {
            isPreventScrollSupported = true;
            return false;
          }
        });
      }, []);
      index2(() => {
        if (!enabled) {
          return;
        }
        if (open) {
          if (focusItemOnOpenRef.current && selectedIndex != null) {
            forceScrollIntoViewRef.current = true;
            onNavigate(selectedIndex);
          }
        } else if (previousOpenRef.current) {
          indexRef.current = -1;
          previousOnNavigateRef.current(null);
        }
      }, [enabled, open, selectedIndex, onNavigate]);
      index2(() => {
        if (!enabled) {
          return;
        }
        if (open) {
          if (activeIndex == null) {
            forceSyncFocus.current = false;
            if (selectedIndex != null) {
              return;
            }
            if (previousOpenRef.current) {
              indexRef.current = -1;
              focusItem(listRef, indexRef);
            }
            if (!previousOpenRef.current && focusItemOnOpenRef.current && (keyRef.current != null || focusItemOnOpenRef.current === true && keyRef.current == null)) {
              indexRef.current = keyRef.current == null || isMainOrientationToEndKey(keyRef.current, orientation, rtl) || nested ? getMinIndex(listRef, disabledIndicesRef.current) : getMaxIndex(listRef, disabledIndicesRef.current);
              onNavigate(indexRef.current);
            }
          } else if (!isIndexOutOfBounds(listRef, activeIndex)) {
            indexRef.current = activeIndex;
            focusItem(listRef, indexRef, forceScrollIntoViewRef.current);
            forceScrollIntoViewRef.current = false;
          }
        }
      }, [enabled, open, activeIndex, selectedIndex, nested, listRef, orientation, rtl, onNavigate, focusItem, disabledIndicesRef]);
      index2(() => {
        if (!enabled) {
          return;
        }
        if (previousOpenRef.current && !open) {
          var _tree$nodesRef$curren, _tree$nodesRef$curren2;
          const parentFloating = tree == null ? void 0 : (_tree$nodesRef$curren = tree.nodesRef.current.find((node) => node.id === parentId)) == null ? void 0 : (_tree$nodesRef$curren2 = _tree$nodesRef$curren.context) == null ? void 0 : _tree$nodesRef$curren2.elements.floating;
          if (parentFloating && !contains(parentFloating, activeElement$1(getDocument(parentFloating)))) {
            parentFloating.focus({
              preventScroll: true
            });
          }
        }
      }, [enabled, open, tree, parentId]);
      index2(() => {
        keyRef.current = null;
        previousOnNavigateRef.current = onNavigate;
        previousOpenRef.current = open;
      });
      const hasActiveIndex = activeIndex != null;
      const item = React2.useMemo(() => {
        function syncCurrentTarget(currentTarget) {
          if (!open) return;
          const index3 = listRef.current.indexOf(currentTarget);
          if (index3 !== -1) {
            onNavigate(index3);
          }
        }
        const props = {
          onFocus(_ref2) {
            let {
              currentTarget
            } = _ref2;
            syncCurrentTarget(currentTarget);
          },
          onClick: (_ref3) => {
            let {
              currentTarget
            } = _ref3;
            return currentTarget.focus({
              preventScroll: true
            });
          },
          // Safari
          ...focusItemOnHover && {
            onMouseMove(_ref4) {
              let {
                currentTarget
              } = _ref4;
              syncCurrentTarget(currentTarget);
            },
            onPointerLeave() {
              if (!isPointerModalityRef.current) {
                return;
              }
              indexRef.current = -1;
              focusItem(listRef, indexRef);
              (0, import_react_dom.flushSync)(() => onNavigate(null));
              if (!virtual) {
                var _refs$floating$curren;
                (_refs$floating$curren = refs.floating.current) == null ? void 0 : _refs$floating$curren.focus({
                  preventScroll: true
                });
              }
            }
          }
        };
        return props;
      }, [open, refs, focusItem, focusItemOnHover, listRef, onNavigate, virtual]);
      return React2.useMemo(() => {
        if (!enabled) {
          return {};
        }
        const disabledIndices2 = disabledIndicesRef.current;
        function onKeyDown(event) {
          isPointerModalityRef.current = false;
          forceSyncFocus.current = true;
          if (!latestOpenRef.current && event.currentTarget === refs.floating.current) {
            return;
          }
          if (nested && isCrossOrientationCloseKey(event.key, orientation, rtl)) {
            stopEvent(event);
            onOpenChange(false);
            if (isHTMLElement2(domReference)) {
              domReference.focus();
            }
            return;
          }
          const currentIndex = indexRef.current;
          const minIndex = getMinIndex(listRef, disabledIndices2);
          const maxIndex = getMaxIndex(listRef, disabledIndices2);
          if (event.key === "Home") {
            indexRef.current = minIndex;
            onNavigate(indexRef.current);
          }
          if (event.key === "End") {
            indexRef.current = maxIndex;
            onNavigate(indexRef.current);
          }
          if (cols > 1) {
            const prevIndex = indexRef.current;
            if (event.key === ARROW_UP) {
              stopEvent(event);
              if (prevIndex === -1) {
                indexRef.current = maxIndex;
              } else {
                indexRef.current = findNonDisabledIndex(listRef, {
                  startingIndex: prevIndex,
                  amount: cols,
                  decrement: true,
                  disabledIndices: disabledIndices2
                });
                if (loop && (prevIndex - cols < minIndex || indexRef.current < 0)) {
                  const col = prevIndex % cols;
                  const maxCol = maxIndex % cols;
                  const offset3 = maxIndex - (maxCol - col);
                  if (maxCol === col) {
                    indexRef.current = maxIndex;
                  } else {
                    indexRef.current = maxCol > col ? offset3 : offset3 - cols;
                  }
                }
              }
              if (isIndexOutOfBounds(listRef, indexRef.current)) {
                indexRef.current = prevIndex;
              }
              onNavigate(indexRef.current);
            }
            if (event.key === ARROW_DOWN) {
              stopEvent(event);
              if (prevIndex === -1) {
                indexRef.current = minIndex;
              } else {
                indexRef.current = findNonDisabledIndex(listRef, {
                  startingIndex: prevIndex,
                  amount: cols,
                  disabledIndices: disabledIndices2
                });
                if (loop && prevIndex + cols > maxIndex) {
                  indexRef.current = findNonDisabledIndex(listRef, {
                    startingIndex: prevIndex % cols - cols,
                    amount: cols,
                    disabledIndices: disabledIndices2
                  });
                }
              }
              if (isIndexOutOfBounds(listRef, indexRef.current)) {
                indexRef.current = prevIndex;
              }
              onNavigate(indexRef.current);
            }
            if (orientation === "both") {
              const prevRow = Math.floor(prevIndex / cols);
              if (event.key === ARROW_RIGHT) {
                stopEvent(event);
                if (prevIndex % cols !== cols - 1) {
                  indexRef.current = findNonDisabledIndex(listRef, {
                    startingIndex: prevIndex,
                    disabledIndices: disabledIndices2
                  });
                  if (loop && isDifferentRow(indexRef.current, cols, prevRow)) {
                    indexRef.current = findNonDisabledIndex(listRef, {
                      startingIndex: prevIndex - prevIndex % cols - 1,
                      disabledIndices: disabledIndices2
                    });
                  }
                } else if (loop) {
                  indexRef.current = findNonDisabledIndex(listRef, {
                    startingIndex: prevIndex - prevIndex % cols - 1,
                    disabledIndices: disabledIndices2
                  });
                }
                if (isDifferentRow(indexRef.current, cols, prevRow)) {
                  indexRef.current = prevIndex;
                }
              }
              if (event.key === ARROW_LEFT) {
                stopEvent(event);
                if (prevIndex % cols !== 0) {
                  indexRef.current = findNonDisabledIndex(listRef, {
                    startingIndex: prevIndex,
                    disabledIndices: disabledIndices2,
                    decrement: true
                  });
                  if (loop && isDifferentRow(indexRef.current, cols, prevRow)) {
                    indexRef.current = findNonDisabledIndex(listRef, {
                      startingIndex: prevIndex + (cols - prevIndex % cols),
                      decrement: true,
                      disabledIndices: disabledIndices2
                    });
                  }
                } else if (loop) {
                  indexRef.current = findNonDisabledIndex(listRef, {
                    startingIndex: prevIndex + (cols - prevIndex % cols),
                    decrement: true,
                    disabledIndices: disabledIndices2
                  });
                }
                if (isDifferentRow(indexRef.current, cols, prevRow)) {
                  indexRef.current = prevIndex;
                }
              }
              const lastRow = Math.floor(maxIndex / cols) === prevRow;
              if (isIndexOutOfBounds(listRef, indexRef.current)) {
                if (loop && lastRow) {
                  indexRef.current = event.key === ARROW_LEFT ? maxIndex : findNonDisabledIndex(listRef, {
                    startingIndex: prevIndex - prevIndex % cols - 1,
                    disabledIndices: disabledIndices2
                  });
                } else {
                  indexRef.current = prevIndex;
                }
              }
              onNavigate(indexRef.current);
              return;
            }
          }
          if (isMainOrientationKey(event.key, orientation)) {
            stopEvent(event);
            if (open && !virtual && activeElement$1(event.currentTarget.ownerDocument) === event.currentTarget) {
              indexRef.current = isMainOrientationToEndKey(event.key, orientation, rtl) ? minIndex : maxIndex;
              onNavigate(indexRef.current);
              return;
            }
            if (isMainOrientationToEndKey(event.key, orientation, rtl)) {
              if (loop) {
                indexRef.current = currentIndex >= maxIndex ? allowEscape && currentIndex !== listRef.current.length ? -1 : minIndex : findNonDisabledIndex(listRef, {
                  startingIndex: currentIndex,
                  disabledIndices: disabledIndices2
                });
              } else {
                indexRef.current = Math.min(maxIndex, findNonDisabledIndex(listRef, {
                  startingIndex: currentIndex,
                  disabledIndices: disabledIndices2
                }));
              }
            } else {
              if (loop) {
                indexRef.current = currentIndex <= minIndex ? allowEscape && currentIndex !== -1 ? listRef.current.length : maxIndex : findNonDisabledIndex(listRef, {
                  startingIndex: currentIndex,
                  decrement: true,
                  disabledIndices: disabledIndices2
                });
              } else {
                indexRef.current = Math.max(minIndex, findNonDisabledIndex(listRef, {
                  startingIndex: currentIndex,
                  decrement: true,
                  disabledIndices: disabledIndices2
                }));
              }
            }
            if (isIndexOutOfBounds(listRef, indexRef.current)) {
              onNavigate(null);
            } else {
              onNavigate(indexRef.current);
            }
          }
        }
        function checkVirtualMouse(event) {
          if (focusItemOnOpen === "auto" && isVirtualClick(event.nativeEvent)) {
            focusItemOnOpenRef.current = true;
          }
        }
        function checkVirtualPointer(event) {
          focusItemOnOpenRef.current = focusItemOnOpen;
          if (focusItemOnOpen === "auto" && isVirtualPointerEvent(event.nativeEvent)) {
            focusItemOnOpenRef.current = true;
          }
        }
        const ariaActiveDescendantProp = virtual && open && hasActiveIndex && {
          "aria-activedescendant": activeId
        };
        return {
          reference: {
            ...ariaActiveDescendantProp,
            onKeyDown(event) {
              isPointerModalityRef.current = false;
              const isArrowKey = event.key.indexOf("Arrow") === 0;
              if (virtual && open) {
                return onKeyDown(event);
              }
              if (!open && !openOnArrowKeyDown && isArrowKey) {
                return;
              }
              const isNavigationKey = isArrowKey || event.key === "Enter" || event.key === " " || event.key === "";
              if (isNavigationKey) {
                keyRef.current = event.key;
              }
              if (nested) {
                if (isCrossOrientationOpenKey(event.key, orientation, rtl)) {
                  stopEvent(event);
                  if (open) {
                    indexRef.current = getMinIndex(listRef, disabledIndices2);
                    onNavigate(indexRef.current);
                  } else {
                    onOpenChange(true);
                  }
                }
                return;
              }
              if (isMainOrientationKey(event.key, orientation)) {
                if (selectedIndex != null) {
                  indexRef.current = selectedIndex;
                }
                stopEvent(event);
                if (!open && openOnArrowKeyDown) {
                  onOpenChange(true);
                } else {
                  onKeyDown(event);
                }
                if (open) {
                  onNavigate(indexRef.current);
                }
              }
            },
            onFocus() {
              if (open) {
                onNavigate(null);
              }
            },
            onPointerDown: checkVirtualPointer,
            onMouseDown: checkVirtualMouse,
            onClick: checkVirtualMouse
          },
          floating: {
            "aria-orientation": orientation === "both" ? void 0 : orientation,
            ...ariaActiveDescendantProp,
            onKeyDown,
            onPointerMove() {
              isPointerModalityRef.current = true;
            }
          },
          item
        };
      }, [domReference, refs, activeId, disabledIndicesRef, latestOpenRef, listRef, enabled, orientation, rtl, virtual, open, hasActiveIndex, nested, selectedIndex, openOnArrowKeyDown, allowEscape, cols, loop, focusItemOnOpen, onNavigate, onOpenChange, item]);
    };
    useRole = function(_ref, _temp) {
      let {
        open
      } = _ref;
      let {
        enabled = true,
        role = "dialog"
      } = _temp === void 0 ? {} : _temp;
      const rootId = useId();
      const referenceId = useId();
      return React2.useMemo(() => {
        const floatingProps = {
          id: rootId,
          role
        };
        if (!enabled) {
          return {};
        }
        if (role === "tooltip") {
          return {
            reference: {
              "aria-describedby": open ? rootId : void 0
            },
            floating: floatingProps
          };
        }
        return {
          reference: {
            "aria-expanded": open ? "true" : "false",
            "aria-haspopup": role === "alertdialog" ? "dialog" : role,
            "aria-controls": open ? rootId : void 0,
            ...role === "listbox" && {
              role: "combobox"
            },
            ...role === "menu" && {
              id: referenceId
            }
          },
          floating: {
            ...floatingProps,
            ...role === "menu" && {
              "aria-labelledby": referenceId
            }
          }
        };
      }, [enabled, role, open, rootId, referenceId]);
    };
    camelCaseToKebabCase = (str) => str.replace(/[A-Z]+(?![a-z])|[A-Z]/g, ($, ofs) => (ofs ? "-" : "") + $.toLowerCase());
    useTypeahead = function(_ref, _temp) {
      var _ref2;
      let {
        open,
        dataRef
      } = _ref;
      let {
        listRef,
        activeIndex,
        onMatch: unstable_onMatch = () => {
        },
        enabled = true,
        findMatch = null,
        resetMs = 1e3,
        ignoreKeys = [],
        selectedIndex = null
      } = _temp === void 0 ? {
        listRef: {
          current: []
        },
        activeIndex: null
      } : _temp;
      const timeoutIdRef = React2.useRef();
      const stringRef = React2.useRef("");
      const prevIndexRef = React2.useRef((_ref2 = selectedIndex != null ? selectedIndex : activeIndex) != null ? _ref2 : -1);
      const matchIndexRef = React2.useRef(null);
      const onMatch = useEvent(unstable_onMatch);
      const findMatchRef = useLatestRef2(findMatch);
      const ignoreKeysRef = useLatestRef2(ignoreKeys);
      index2(() => {
        if (open) {
          clearTimeout(timeoutIdRef.current);
          matchIndexRef.current = null;
          stringRef.current = "";
        }
      }, [open]);
      index2(() => {
        if (open && stringRef.current === "") {
          var _ref3;
          prevIndexRef.current = (_ref3 = selectedIndex != null ? selectedIndex : activeIndex) != null ? _ref3 : -1;
        }
      }, [open, selectedIndex, activeIndex]);
      return React2.useMemo(() => {
        if (!enabled) {
          return {};
        }
        function onKeyDown(event) {
          const target = getTarget(event.nativeEvent);
          if (isElement2(target) && (activeElement$1(getDocument(target)) !== event.currentTarget ? target.closest('[role="dialog"],[role="menu"],[role="listbox"],[role="tree"],[role="grid"]') !== event.currentTarget : false)) {
            return;
          }
          if (stringRef.current.length > 0 && stringRef.current[0] !== " ") {
            dataRef.current.typing = true;
            if (event.key === " ") {
              stopEvent(event);
            }
          }
          const listContent = listRef.current;
          if (listContent == null || ignoreKeysRef.current.includes(event.key) || // Character key.
          event.key.length !== 1 || // Modifier key.
          event.ctrlKey || event.metaKey || event.altKey) {
            return;
          }
          const allowRapidSuccessionOfFirstLetter = listContent.every((text) => {
            var _text$, _text$2;
            return text ? ((_text$ = text[0]) == null ? void 0 : _text$.toLocaleLowerCase()) !== ((_text$2 = text[1]) == null ? void 0 : _text$2.toLocaleLowerCase()) : true;
          });
          if (allowRapidSuccessionOfFirstLetter && stringRef.current === event.key) {
            stringRef.current = "";
            prevIndexRef.current = matchIndexRef.current;
          }
          stringRef.current += event.key;
          clearTimeout(timeoutIdRef.current);
          timeoutIdRef.current = setTimeout(() => {
            stringRef.current = "";
            prevIndexRef.current = matchIndexRef.current;
            dataRef.current.typing = false;
          }, resetMs);
          const prevIndex = prevIndexRef.current;
          const orderedList = [...listContent.slice((prevIndex || 0) + 1), ...listContent.slice(0, (prevIndex || 0) + 1)];
          const str = findMatchRef.current ? findMatchRef.current(orderedList, stringRef.current) : orderedList.find((text) => (text == null ? void 0 : text.toLocaleLowerCase().indexOf(stringRef.current.toLocaleLowerCase())) === 0);
          const index3 = str ? listContent.indexOf(str) : -1;
          if (index3 !== -1) {
            onMatch(index3);
            matchIndexRef.current = index3;
          }
        }
        return {
          reference: {
            onKeyDown
          },
          floating: {
            onKeyDown
          }
        };
      }, [enabled, dataRef, listRef, resetMs, ignoreKeysRef, findMatchRef, onMatch]);
    };
    inner = (props) => ({
      name: "inner",
      options: props,
      async fn(middlewareArguments) {
        const {
          listRef,
          overflowRef,
          onFallbackChange,
          offset: innerOffset = 0,
          index: index3 = 0,
          minItemsVisible = 4,
          referenceOverflowThreshold = 0,
          scrollRef,
          ...detectOverflowOptions
        } = props;
        const {
          rects,
          elements: {
            floating
          }
        } = middlewareArguments;
        const item = listRef.current[index3];
        if (true) {
          if (!middlewareArguments.placement.startsWith("bottom")) {
            console.warn(['Floating UI: `placement` side must be "bottom" when using the', "`inner` middleware."].join(" "));
          }
        }
        if (!item) {
          return {};
        }
        const nextArgs = {
          ...middlewareArguments,
          ...await offset2(-item.offsetTop - rects.reference.height / 2 - item.offsetHeight / 2 - innerOffset).fn(middlewareArguments)
        };
        const el = (scrollRef == null ? void 0 : scrollRef.current) || floating;
        const overflow = await detectOverflow2(getArgsWithCustomFloatingHeight(nextArgs, el.scrollHeight), detectOverflowOptions);
        const refOverflow = await detectOverflow2(nextArgs, {
          ...detectOverflowOptions,
          elementContext: "reference"
        });
        const diffY = Math.max(0, overflow.top);
        const nextY = nextArgs.y + diffY;
        const maxHeight = Math.max(0, el.scrollHeight - diffY - Math.max(0, overflow.bottom));
        el.style.maxHeight = maxHeight + "px";
        el.scrollTop = diffY;
        if (onFallbackChange) {
          if (el.offsetHeight < item.offsetHeight * Math.min(minItemsVisible, listRef.current.length - 1) - 1 || refOverflow.top >= -referenceOverflowThreshold || refOverflow.bottom >= -referenceOverflowThreshold) {
            (0, import_react_dom.flushSync)(() => onFallbackChange(true));
          } else {
            (0, import_react_dom.flushSync)(() => onFallbackChange(false));
          }
        }
        if (overflowRef) {
          overflowRef.current = await detectOverflow2(getArgsWithCustomFloatingHeight({
            ...nextArgs,
            y: nextY
          }, el.offsetHeight), detectOverflowOptions);
        }
        return {
          y: nextY
        };
      }
    });
    useInnerOffset = (_ref, _ref2) => {
      let {
        open,
        elements
      } = _ref;
      let {
        enabled = true,
        overflowRef,
        scrollRef,
        onChange: unstable_onChange
      } = _ref2;
      const onChange = useEvent(unstable_onChange);
      const controlledScrollingRef = React2.useRef(false);
      const prevScrollTopRef = React2.useRef(null);
      const initialOverflowRef = React2.useRef(null);
      React2.useEffect(() => {
        if (!enabled) {
          return;
        }
        function onWheel(e) {
          if (e.ctrlKey || !el || overflowRef.current == null) {
            return;
          }
          const dY = e.deltaY;
          const isAtTop = overflowRef.current.top >= -0.5;
          const isAtBottom = overflowRef.current.bottom >= -0.5;
          const remainingScroll = el.scrollHeight - el.clientHeight;
          const sign = dY < 0 ? -1 : 1;
          const method = dY < 0 ? "max" : "min";
          if (el.scrollHeight <= el.clientHeight) {
            return;
          }
          if (!isAtTop && dY > 0 || !isAtBottom && dY < 0) {
            e.preventDefault();
            (0, import_react_dom.flushSync)(() => {
              onChange((d) => d + Math[method](dY, remainingScroll * sign));
            });
          } else if (/firefox/i.test(getUserAgent())) {
            el.scrollTop += dY;
          }
        }
        const el = (scrollRef == null ? void 0 : scrollRef.current) || elements.floating;
        if (open && el) {
          el.addEventListener("wheel", onWheel);
          requestAnimationFrame(() => {
            prevScrollTopRef.current = el.scrollTop;
            if (overflowRef.current != null) {
              initialOverflowRef.current = {
                ...overflowRef.current
              };
            }
          });
          return () => {
            prevScrollTopRef.current = null;
            initialOverflowRef.current = null;
            el.removeEventListener("wheel", onWheel);
          };
        }
      }, [enabled, open, elements.floating, overflowRef, scrollRef, onChange]);
      return React2.useMemo(() => {
        if (!enabled) {
          return {};
        }
        return {
          floating: {
            onKeyDown() {
              controlledScrollingRef.current = true;
            },
            onWheel() {
              controlledScrollingRef.current = false;
            },
            onPointerMove() {
              controlledScrollingRef.current = false;
            },
            onScroll() {
              const el = (scrollRef == null ? void 0 : scrollRef.current) || elements.floating;
              if (!overflowRef.current || !el || !controlledScrollingRef.current) {
                return;
              }
              if (prevScrollTopRef.current !== null) {
                const scrollDiff = el.scrollTop - prevScrollTopRef.current;
                if (overflowRef.current.bottom < -0.5 && scrollDiff < -1 || overflowRef.current.top < -0.5 && scrollDiff > 1) {
                  (0, import_react_dom.flushSync)(() => onChange((d) => d + scrollDiff));
                }
              }
              requestAnimationFrame(() => {
                prevScrollTopRef.current = el.scrollTop;
              });
            }
          }
        };
      }, [enabled, overflowRef, elements.floating, scrollRef, onChange]);
    };
    useInteractions = function(propsList) {
      if (propsList === void 0) {
        propsList = [];
      }
      const deps = propsList;
      const getReferenceProps = React2.useCallback(
        (userProps) => mergeProps(userProps, propsList, "reference"),
        // eslint-disable-next-line react-hooks/exhaustive-deps
        deps
      );
      const getFloatingProps = React2.useCallback(
        (userProps) => mergeProps(userProps, propsList, "floating"),
        // eslint-disable-next-line react-hooks/exhaustive-deps
        deps
      );
      const getItemProps = React2.useCallback(
        (userProps) => mergeProps(userProps, propsList, "item"),
        // Granularly check for `item` changes, because the `getItemProps` getter
        // should be as referentially stable as possible since it may be passed as
        // a prop to many components. All `item` key values must therefore be
        // memoized.
        // eslint-disable-next-line react-hooks/exhaustive-deps
        propsList.map((key) => key == null ? void 0 : key.item)
      );
      return React2.useMemo(() => ({
        getReferenceProps,
        getFloatingProps,
        getItemProps
      }), [getReferenceProps, getFloatingProps, getItemProps]);
    };
  }
});

// node_modules/@material-tailwind/react/components/Dialog/DialogHeader.js
var require_DialogHeader = __commonJS({
  "node_modules/@material-tailwind/react/components/Dialog/DialogHeader.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function _export(target, all) {
      for (var name in all) Object.defineProperty(target, name, { enumerable: true, get: all[name] });
    }
    _export(exports, { DialogHeader: function() {
      return DialogHeader;
    }, default: function() {
      return _default;
    } });
    var _react = _interopRequireDefault(require_react());
    var _classnames = _interopRequireDefault(require_classnames());
    var _tailwindMerge = require_dist();
    var _objectsToString = _interopRequireDefault(require_objectsToString());
    var _theme = require_theme2();
    var _dialog = require_dialog();
    function _extends2() {
      _extends2 = Object.assign || function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends2.apply(this, arguments);
    }
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _objectWithoutProperties(source, excluded) {
      if (source == null) return {};
      var target = _objectWithoutPropertiesLoose(source, excluded);
      var key, i;
      if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for (i = 0; i < sourceSymbolKeys.length; i++) {
          key = sourceSymbolKeys[i];
          if (excluded.indexOf(key) >= 0) continue;
          if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
          target[key] = source[key];
        }
      }
      return target;
    }
    function _objectWithoutPropertiesLoose(source, excluded) {
      if (source == null) return {};
      var target = {};
      var sourceKeys = Object.keys(source);
      var key, i;
      for (i = 0; i < sourceKeys.length; i++) {
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
      }
      return target;
    }
    var DialogHeader = _react.default.forwardRef(function(_param, ref) {
      var className = _param.className, children = _param.children, rest = _objectWithoutProperties(_param, ["className", "children"]);
      var dialogHeader = (0, _theme.useTheme)().dialogHeader;
      var defaultProps = dialogHeader.defaultProps, base = dialogHeader.styles.base;
      className = className !== null && className !== void 0 ? className : defaultProps.className;
      var dialogHeaderClasses = (0, _tailwindMerge.twMerge)((0, _classnames.default)((0, _objectsToString.default)(base)), className);
      return _react.default.createElement("div", _extends2({}, rest, { ref, className: dialogHeaderClasses }), children);
    });
    DialogHeader.propTypes = { className: _dialog.propTypesClassName, children: _dialog.propTypesChildren };
    DialogHeader.displayName = "MaterialTailwind.DialogHeader";
    var _default = DialogHeader;
  }
});

// node_modules/@material-tailwind/react/components/Dialog/DialogBody.js
var require_DialogBody = __commonJS({
  "node_modules/@material-tailwind/react/components/Dialog/DialogBody.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function _export(target, all) {
      for (var name in all) Object.defineProperty(target, name, { enumerable: true, get: all[name] });
    }
    _export(exports, { DialogBody: function() {
      return DialogBody;
    }, default: function() {
      return _default;
    } });
    var _react = _interopRequireDefault(require_react());
    var _classnames = _interopRequireDefault(require_classnames());
    var _tailwindMerge = require_dist();
    var _objectsToString = _interopRequireDefault(require_objectsToString());
    var _theme = require_theme2();
    var _dialog = require_dialog();
    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function _extends2() {
      _extends2 = Object.assign || function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends2.apply(this, arguments);
    }
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _objectWithoutProperties(source, excluded) {
      if (source == null) return {};
      var target = _objectWithoutPropertiesLoose(source, excluded);
      var key, i;
      if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for (i = 0; i < sourceSymbolKeys.length; i++) {
          key = sourceSymbolKeys[i];
          if (excluded.indexOf(key) >= 0) continue;
          if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
          target[key] = source[key];
        }
      }
      return target;
    }
    function _objectWithoutPropertiesLoose(source, excluded) {
      if (source == null) return {};
      var target = {};
      var sourceKeys = Object.keys(source);
      var key, i;
      for (i = 0; i < sourceKeys.length; i++) {
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
      }
      return target;
    }
    var DialogBody = _react.default.forwardRef(function(_param, ref) {
      var divider = _param.divider, className = _param.className, children = _param.children, rest = _objectWithoutProperties(_param, ["divider", "className", "children"]);
      var dialogBody = (0, _theme.useTheme)().dialogBody;
      var defaultProps = dialogBody.defaultProps, base = dialogBody.styles.base;
      className = className !== null && className !== void 0 ? className : defaultProps.className;
      var dialogBodyClasses = (0, _tailwindMerge.twMerge)((0, _classnames.default)((0, _objectsToString.default)(base.initial), _defineProperty({}, (0, _objectsToString.default)(base.divider), divider)), className);
      return _react.default.createElement("div", _extends2({}, rest, { ref, className: dialogBodyClasses }), children);
    });
    DialogBody.propTypes = { divider: _dialog.propTypesDivider, className: _dialog.propTypesClassName, children: _dialog.propTypesChildren };
    DialogBody.displayName = "MaterialTailwind.DialogBody";
    var _default = DialogBody;
  }
});

// node_modules/@material-tailwind/react/components/Dialog/DialogFooter.js
var require_DialogFooter = __commonJS({
  "node_modules/@material-tailwind/react/components/Dialog/DialogFooter.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function _export(target, all) {
      for (var name in all) Object.defineProperty(target, name, { enumerable: true, get: all[name] });
    }
    _export(exports, { DialogFooter: function() {
      return DialogFooter;
    }, default: function() {
      return _default;
    } });
    var _react = _interopRequireDefault(require_react());
    var _classnames = _interopRequireDefault(require_classnames());
    var _tailwindMerge = require_dist();
    var _objectsToString = _interopRequireDefault(require_objectsToString());
    var _theme = require_theme2();
    var _dialog = require_dialog();
    function _extends2() {
      _extends2 = Object.assign || function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends2.apply(this, arguments);
    }
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _objectWithoutProperties(source, excluded) {
      if (source == null) return {};
      var target = _objectWithoutPropertiesLoose(source, excluded);
      var key, i;
      if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for (i = 0; i < sourceSymbolKeys.length; i++) {
          key = sourceSymbolKeys[i];
          if (excluded.indexOf(key) >= 0) continue;
          if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
          target[key] = source[key];
        }
      }
      return target;
    }
    function _objectWithoutPropertiesLoose(source, excluded) {
      if (source == null) return {};
      var target = {};
      var sourceKeys = Object.keys(source);
      var key, i;
      for (i = 0; i < sourceKeys.length; i++) {
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
      }
      return target;
    }
    var DialogFooter = _react.default.forwardRef(function(_param, ref) {
      var className = _param.className, children = _param.children, rest = _objectWithoutProperties(_param, ["className", "children"]);
      var dialogFooter = (0, _theme.useTheme)().dialogFooter;
      var defaultProps = dialogFooter.defaultProps, base = dialogFooter.styles.base;
      className = className !== null && className !== void 0 ? className : defaultProps.className;
      var dialogFooterClasses = (0, _tailwindMerge.twMerge)((0, _classnames.default)((0, _objectsToString.default)(base)), className);
      return _react.default.createElement("div", _extends2({}, rest, { ref, className: dialogFooterClasses }), children);
    });
    DialogFooter.propTypes = { className: _dialog.propTypesClassName, children: _dialog.propTypesChildren };
    DialogFooter.displayName = "MaterialTailwind.DialogFooter";
    var _default = DialogFooter;
  }
});

// node_modules/@material-tailwind/react/components/Dialog/index.js
var require_Dialog = __commonJS({
  "node_modules/@material-tailwind/react/components/Dialog/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function _export(target, all) {
      for (var name in all) Object.defineProperty(target, name, { enumerable: true, get: all[name] });
    }
    _export(exports, { Dialog: function() {
      return Dialog;
    }, DialogHeader: function() {
      return _dialogHeader.DialogHeader;
    }, DialogBody: function() {
      return _dialogBody.DialogBody;
    }, DialogFooter: function() {
      return _dialogFooter.DialogFooter;
    }, default: function() {
      return _default;
    } });
    var _react = _interopRequireDefault(require_react());
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _react1 = (init_floating_ui_react_esm(), __toCommonJS(floating_ui_react_esm_exports));
    var _framerMotion = require_cjs2();
    var _classnames = _interopRequireDefault(require_classnames());
    var _deepmerge = _interopRequireDefault(require_cjs());
    var _tailwindMerge = require_dist();
    var _findMatch = _interopRequireDefault(require_findMatch());
    var _objectsToString = _interopRequireDefault(require_objectsToString());
    var _theme = require_theme2();
    var _dialog = require_dialog();
    var _dialogHeader = require_DialogHeader();
    var _dialogBody = require_DialogBody();
    var _dialogFooter = require_DialogFooter();
    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function _extends2() {
      _extends2 = Object.assign || function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends2.apply(this, arguments);
    }
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys2 = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
          ownKeys2 = ownKeys2.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
            return Object.getOwnPropertyDescriptor(source, sym).enumerable;
          }));
        }
        ownKeys2.forEach(function(key) {
          _defineProperty(target, key, source[key]);
        });
      }
      return target;
    }
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
          symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          });
        }
        keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpreadProps(target, source) {
      source = source != null ? source : {};
      if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    function _objectWithoutProperties(source, excluded) {
      if (source == null) return {};
      var target = _objectWithoutPropertiesLoose(source, excluded);
      var key, i;
      if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for (i = 0; i < sourceSymbolKeys.length; i++) {
          key = sourceSymbolKeys[i];
          if (excluded.indexOf(key) >= 0) continue;
          if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
          target[key] = source[key];
        }
      }
      return target;
    }
    function _objectWithoutPropertiesLoose(source, excluded) {
      if (source == null) return {};
      var target = {};
      var sourceKeys = Object.keys(source);
      var key, i;
      for (i = 0; i < sourceKeys.length; i++) {
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
      }
      return target;
    }
    var Dialog = _react.default.forwardRef(function(_param, ref) {
      var open = _param.open, handler = _param.handler, size3 = _param.size, dismiss = _param.dismiss, animate = _param.animate, className = _param.className, children = _param.children, rest = _objectWithoutProperties(_param, ["open", "handler", "size", "dismiss", "animate", "className", "children"]);
      var dialog = (0, _theme.useTheme)().dialog;
      var defaultProps = dialog.defaultProps, valid = dialog.valid, _dialog_styles = dialog.styles, base = _dialog_styles.base, sizes = _dialog_styles.sizes;
      handler = handler !== null && handler !== void 0 ? handler : void 0;
      size3 = size3 !== null && size3 !== void 0 ? size3 : defaultProps.size;
      dismiss = dismiss !== null && dismiss !== void 0 ? dismiss : defaultProps.dismiss;
      animate = animate !== null && animate !== void 0 ? animate : defaultProps.animate;
      className = className !== null && className !== void 0 ? className : defaultProps.className;
      var backdropClasses = (0, _classnames.default)((0, _objectsToString.default)(base.backdrop));
      var dialogClasses = (0, _tailwindMerge.twMerge)((0, _classnames.default)((0, _objectsToString.default)(base.container), (0, _objectsToString.default)(sizes[(0, _findMatch.default)(valid.sizes, size3, "md")])), className);
      var animation = { unmount: { opacity: 0, y: -50, transition: { duration: 0.3 } }, mount: { opacity: 1, y: 0, transition: { duration: 0.3 } } };
      var backdropAnimation = { unmount: { opacity: 0, transition: { delay: 0.2 } }, mount: { opacity: 1 } };
      var appliedAnimation = (0, _deepmerge.default)(animation, animate);
      var _useFloating = (0, _react1.useFloating)({ open, onOpenChange: handler }), floating = _useFloating.floating, context = _useFloating.context;
      var id = (0, _react1.useId)();
      var labelId = "".concat(id, "-label");
      var descriptionId = "".concat(id, "-description");
      var getFloatingProps = (0, _react1.useInteractions)([(0, _react1.useClick)(context), (0, _react1.useRole)(context), (0, _react1.useDismiss)(context, dismiss)]).getFloatingProps;
      var mergedRef = (0, _react1.useMergeRefs)([ref, floating]);
      var NewAnimatePresence = _framerMotion.AnimatePresence;
      return _react.default.createElement(_framerMotion.LazyMotion, { features: _framerMotion.domAnimation }, _react.default.createElement(_react1.FloatingPortal, null, _react.default.createElement(NewAnimatePresence, null, open && _react.default.createElement(_react1.FloatingOverlay, { style: { zIndex: 9999 }, lockScroll: true }, _react.default.createElement(_react1.FloatingFocusManager, { context }, _react.default.createElement(_framerMotion.m.div, { className: size3 === "xxl" ? "" : backdropClasses, initial: "unmount", exit: "unmount", animate: open ? "mount" : "unmount", variants: backdropAnimation, transition: { duration: 0.2 } }, _react.default.createElement(_framerMotion.m.div, _extends2({}, getFloatingProps(_objectSpreadProps(_objectSpread({}, rest), { ref: mergedRef, className: dialogClasses, "aria-labelledby": labelId, "aria-describedby": descriptionId })), { initial: "unmount", exit: "unmount", animate: open ? "mount" : "unmount", variants: appliedAnimation }), children)))))));
    });
    Dialog.propTypes = { open: _dialog.propTypesOpen, handler: _dialog.propTypesHandler, size: _propTypes.default.oneOf(_dialog.propTypesSize), dismiss: _dialog.propTypesDismiss, animate: _dialog.propTypesAnimate, className: _dialog.propTypesClassName, children: _dialog.propTypesChildren };
    Dialog.displayName = "MaterialTailwind.Dialog";
    var _default = Object.assign(Dialog, { Header: _dialogHeader.DialogHeader, Body: _dialogBody.DialogBody, Footer: _dialogFooter.DialogFooter });
  }
});

// node_modules/@material-tailwind/react/components/Input/index.js
var require_Input = __commonJS({
  "node_modules/@material-tailwind/react/components/Input/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function _export(target, all) {
      for (var name in all) Object.defineProperty(target, name, { enumerable: true, get: all[name] });
    }
    _export(exports, { Input: function() {
      return Input;
    }, default: function() {
      return _default;
    } });
    var _react = _interopRequireDefault(require_react());
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _classnames = _interopRequireDefault(require_classnames());
    var _findMatch = _interopRequireDefault(require_findMatch());
    var _objectsToString = _interopRequireDefault(require_objectsToString());
    var _theme = require_theme2();
    var _input = require_input();
    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function _extends2() {
      _extends2 = Object.assign || function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends2.apply(this, arguments);
    }
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _objectWithoutProperties(source, excluded) {
      if (source == null) return {};
      var target = _objectWithoutPropertiesLoose(source, excluded);
      var key, i;
      if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for (i = 0; i < sourceSymbolKeys.length; i++) {
          key = sourceSymbolKeys[i];
          if (excluded.indexOf(key) >= 0) continue;
          if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
          target[key] = source[key];
        }
      }
      return target;
    }
    function _objectWithoutPropertiesLoose(source, excluded) {
      if (source == null) return {};
      var target = {};
      var sourceKeys = Object.keys(source);
      var key, i;
      for (i = 0; i < sourceKeys.length; i++) {
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
      }
      return target;
    }
    var Input = _react.default.forwardRef(function(_param, ref) {
      var variant = _param.variant, color = _param.color, size3 = _param.size, label = _param.label, error = _param.error, success = _param.success, icon = _param.icon, containerProps = _param.containerProps, labelProps = _param.labelProps, className = _param.className, shrink = _param.shrink, inputRef = _param.inputRef, rest = _objectWithoutProperties(_param, ["variant", "color", "size", "label", "error", "success", "icon", "containerProps", "labelProps", "className", "shrink", "inputRef"]);
      var input = (0, _theme.useTheme)().input;
      var defaultProps = input.defaultProps, valid = input.valid, styles = input.styles;
      var base = styles.base, variants = styles.variants;
      variant = variant !== null && variant !== void 0 ? variant : defaultProps.variant;
      size3 = size3 !== null && size3 !== void 0 ? size3 : defaultProps.size;
      color = color !== null && color !== void 0 ? color : defaultProps.color;
      label = label !== null && label !== void 0 ? label : defaultProps.label;
      labelProps = labelProps !== null && labelProps !== void 0 ? labelProps : defaultProps.labelProps;
      containerProps = containerProps !== null && containerProps !== void 0 ? containerProps : defaultProps.containerProps;
      className = className !== null && className !== void 0 ? className : defaultProps.className;
      shrink = shrink !== null && shrink !== void 0 ? shrink : defaultProps.shrink;
      icon = icon !== null && icon !== void 0 ? icon : defaultProps.icon;
      var inputVariant = variants[(0, _findMatch.default)(valid.variants, variant, "outlined")];
      var inputSize = inputVariant.sizes[(0, _findMatch.default)(valid.sizes, size3, "md")];
      var inputError = (0, _objectsToString.default)(inputVariant.error.input);
      var inputSuccess = (0, _objectsToString.default)(inputVariant.success.input);
      var inputShrink = (0, _objectsToString.default)(inputVariant.shrink.input);
      var inputColor = (0, _objectsToString.default)(inputVariant.colors.input[(0, _findMatch.default)(valid.colors, color, "gray")]);
      var labelError = (0, _objectsToString.default)(inputVariant.error.label);
      var labelSuccess = (0, _objectsToString.default)(inputVariant.success.label);
      var labelShrink = (0, _objectsToString.default)(inputVariant.shrink.label);
      var labelColor = (0, _objectsToString.default)(inputVariant.colors.label[(0, _findMatch.default)(valid.colors, color, "gray")]);
      var containerClasses = (0, _classnames.default)((0, _objectsToString.default)(base.container), (0, _objectsToString.default)(inputSize.container), containerProps === null || containerProps === void 0 ? void 0 : containerProps.className);
      var inputClasses = (0, _classnames.default)((0, _objectsToString.default)(base.input), (0, _objectsToString.default)(inputVariant.base.input), (0, _objectsToString.default)(inputSize.input), _defineProperty({}, (0, _objectsToString.default)(inputVariant.base.inputWithIcon), icon), _defineProperty({}, inputColor, !error && !success), _defineProperty({}, inputError, error), _defineProperty({}, inputSuccess, success), _defineProperty({}, inputShrink, shrink), className);
      var labelClasses = (0, _classnames.default)((0, _objectsToString.default)(base.label), (0, _objectsToString.default)(inputVariant.base.label), (0, _objectsToString.default)(inputSize.label), _defineProperty({}, labelColor, !error && !success), _defineProperty({}, labelError, error), _defineProperty({}, labelSuccess, success), _defineProperty({}, labelShrink, shrink), labelProps === null || labelProps === void 0 ? void 0 : labelProps.className);
      var iconClasses = (0, _classnames.default)((0, _objectsToString.default)(base.icon), (0, _objectsToString.default)(inputVariant.base.icon), (0, _objectsToString.default)(inputSize.icon));
      var asteriskClasses = (0, _classnames.default)((0, _objectsToString.default)(base.asterisk));
      return _react.default.createElement("div", _extends2({}, containerProps, { ref, className: containerClasses }), icon && _react.default.createElement("div", { className: iconClasses }, icon), _react.default.createElement("input", _extends2({}, rest, { ref: inputRef, className: inputClasses, placeholder: (rest === null || rest === void 0 ? void 0 : rest.placeholder) || " " })), _react.default.createElement("label", _extends2({}, labelProps, { className: labelClasses }), label, " ", rest.required ? _react.default.createElement("span", { className: asteriskClasses }, "*") : ""));
    });
    Input.propTypes = { variant: _propTypes.default.oneOf(_input.propTypesVariant), size: _propTypes.default.oneOf(_input.propTypesSize), color: _propTypes.default.oneOf(_input.propTypesColor), label: _input.propTypesLabel, error: _input.propTypesError, success: _input.propTypesSuccess, icon: _input.propTypesIcon, labelProps: _input.propTypesLabelProps, containerProps: _input.propTypesContainerProps, shrink: _input.propTypesShrink, className: _input.propTypesClassName };
    Input.displayName = "MaterialTailwind.Input";
    var _default = Input;
  }
});

// node_modules/@material-tailwind/react/types/components/menu.js
var require_menu = __commonJS({
  "node_modules/@material-tailwind/react/types/components/menu.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function _export(target, all) {
      for (var name in all) Object.defineProperty(target, name, { enumerable: true, get: all[name] });
    }
    _export(exports, { propTypesOpen: function() {
      return propTypesOpen;
    }, propTypesHandler: function() {
      return propTypesHandler;
    }, propTypesPlacement: function() {
      return propTypesPlacement;
    }, propTypesOffset: function() {
      return propTypesOffset;
    }, propTypesDismiss: function() {
      return propTypesDismiss;
    }, propTypesAnimate: function() {
      return propTypesAnimate;
    }, propTypesLockScroll: function() {
      return propTypesLockScroll;
    }, propTypesDisabled: function() {
      return propTypesDisabled;
    }, propTypesClassName: function() {
      return propTypesClassName;
    }, propTypesChildren: function() {
      return propTypesChildren;
    }, propTypesContextValue: function() {
      return propTypesContextValue;
    } });
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _generic = require_generic();
    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys2 = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
          ownKeys2 = ownKeys2.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
            return Object.getOwnPropertyDescriptor(source, sym).enumerable;
          }));
        }
        ownKeys2.forEach(function(key) {
          _defineProperty(target, key, source[key]);
        });
      }
      return target;
    }
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
          symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          });
        }
        keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpreadProps(target, source) {
      source = source != null ? source : {};
      if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    var propTypesOpen = _propTypes.default.bool;
    var propTypesHandler = _propTypes.default.func;
    var propTypesPlacement = _generic.propTypesPlacements;
    var propTypesOffset = _generic.propTypesOffsetType;
    var propTypesDismiss = _propTypes.default.shape(_objectSpreadProps(_objectSpread({}, _generic.propTypesDismissType), { itemPress: _propTypes.default.bool }));
    var propTypesAnimate = _generic.propTypesAnimation;
    var propTypesLockScroll = _propTypes.default.bool;
    var propTypesDisabled = _propTypes.default.bool;
    var propTypesClassName = _propTypes.default.string;
    var propTypesChildren = _propTypes.default.node.isRequired;
    var propTypesContextValue = _propTypes.default.shape({ open: _propTypes.default.bool.isRequired, handler: _propTypes.default.func.isRequired, setInternalOpen: _propTypes.default.func.isRequired, strategy: _propTypes.default.oneOf(["fixed", "absolute"]).isRequired, x: _propTypes.default.number.isRequired, y: _propTypes.default.number.isRequired, reference: _propTypes.default.func.isRequired, floating: _propTypes.default.func.isRequired, listItemsRef: _propTypes.default.instanceOf(Object).isRequired, getReferenceProps: _propTypes.default.func.isRequired, getFloatingProps: _propTypes.default.func.isRequired, getItemProps: _propTypes.default.func.isRequired, appliedAnimation: propTypesAnimate.isRequired, lockScroll: _propTypes.default.bool.isRequired, context: _propTypes.default.instanceOf(Object).isRequired, tree: _propTypes.default.any.isRequired, allowHover: _propTypes.default.bool.isRequired, activeIndex: _propTypes.default.number.isRequired, setActiveIndex: _propTypes.default.func.isRequired, nested: _propTypes.default.bool.isRequired });
  }
});

// node_modules/@material-tailwind/react/components/Menu/MenuContext.js
var require_MenuContext = __commonJS({
  "node_modules/@material-tailwind/react/components/Menu/MenuContext.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function _export(target, all) {
      for (var name in all) Object.defineProperty(target, name, { enumerable: true, get: all[name] });
    }
    _export(exports, { MenuContext: function() {
      return MenuContext;
    }, useMenu: function() {
      return useMenu;
    }, MenuContextProvider: function() {
      return MenuContextProvider;
    } });
    var _react = _interopRequireDefault(require_react());
    var _menu = require_menu();
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var MenuContext = _react.default.createContext(null);
    MenuContext.displayName = "MaterialTailwind.MenuContext";
    function useMenu() {
      var context = _react.default.useContext(MenuContext);
      if (!context) {
        throw new Error("useMenu() must be used within a Menu. It happens when you use MenuCore, MenuHandler, MenuItem or MenuList components outside the Menu component.");
      }
      return context;
    }
    var MenuContextProvider = function(param) {
      var value = param.value, children = param.children;
      return _react.default.createElement(MenuContext.Provider, { value }, children);
    };
    MenuContextProvider.prototypes = { value: _menu.propTypesContextValue, children: _menu.propTypesChildren };
    MenuContextProvider.displayName = "MaterialTailwind.MenuContextProvider";
  }
});

// node_modules/@material-tailwind/react/components/Menu/MenuCore.js
var require_MenuCore = __commonJS({
  "node_modules/@material-tailwind/react/components/Menu/MenuCore.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function _export(target, all) {
      for (var name in all) Object.defineProperty(target, name, { enumerable: true, get: all[name] });
    }
    _export(exports, { MenuCore: function() {
      return MenuCore;
    }, default: function() {
      return _default;
    } });
    var _react = _interopRequireDefault(require_react());
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _react1 = (init_floating_ui_react_esm(), __toCommonJS(floating_ui_react_esm_exports));
    var _deepmerge = _interopRequireDefault(require_cjs());
    var _theme = require_theme2();
    var _menuContext = require_MenuContext();
    var _menu = require_menu();
    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length) len = arr.length;
      for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
      return arr2;
    }
    function _arrayWithHoles(arr) {
      if (Array.isArray(arr)) return arr;
    }
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _iterableToArrayLimit(arr, i) {
      var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
      if (_i == null) return;
      var _arr = [];
      var _n = true;
      var _d = false;
      var _s, _e;
      try {
        for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);
          if (i && _arr.length === i) break;
        }
      } catch (err) {
        _d = true;
        _e = err;
      } finally {
        try {
          if (!_n && _i["return"] != null) _i["return"]();
        } finally {
          if (_d) throw _e;
        }
      }
      return _arr;
    }
    function _nonIterableRest() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _slicedToArray(arr, i) {
      return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
    }
    function _unsupportedIterableToArray(o, minLen) {
      if (!o) return;
      if (typeof o === "string") return _arrayLikeToArray(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if (n === "Object" && o.constructor) n = o.constructor.name;
      if (n === "Map" || n === "Set") return Array.from(n);
      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
    }
    var MenuCore = _react.default.forwardRef(function(param, ref) {
      var open = param.open, handler = param.handler, placement = param.placement, offset3 = param.offset, dismiss = param.dismiss, animate = param.animate, lockScroll = param.lockScroll, allowHover = param.allowHover, children = param.children;
      var menu = (0, _theme.useTheme)().menu;
      var defaultProps = menu.defaultProps;
      var _React_useState = _slicedToArray(_react.default.useState(false), 2), internalOpen = _React_useState[0], setInternalOpen = _React_useState[1];
      var _React_useState1 = _slicedToArray(_react.default.useState(false), 2), internalAllowHover = _React_useState1[0], setInternalAllowHover = _React_useState1[1];
      open = open !== null && open !== void 0 ? open : internalOpen;
      handler = handler !== null && handler !== void 0 ? handler : setInternalOpen;
      placement = placement !== null && placement !== void 0 ? placement : defaultProps.placement;
      offset3 = offset3 !== null && offset3 !== void 0 ? offset3 : defaultProps.offset;
      dismiss = dismiss !== null && dismiss !== void 0 ? dismiss : defaultProps.dismiss;
      animate = animate !== null && animate !== void 0 ? animate : defaultProps.animate;
      lockScroll = lockScroll !== null && lockScroll !== void 0 ? lockScroll : defaultProps.lockScroll;
      var animation = { unmount: { opacity: 0, transformOrigin: "top", transform: "scale(0.95)", transition: { duration: 0.2, times: [0.4, 0, 0.2, 1] } }, mount: { opacity: 1, transformOrigin: "top", transform: "scale(1)", transition: { duration: 0.2, times: [0.4, 0, 0.2, 1] } } };
      var appliedAnimation = (0, _deepmerge.default)(animation, animate);
      var _React_useState2 = _slicedToArray(_react.default.useState(null), 2), activeIndex = _React_useState2[0], setActiveIndex = _React_useState2[1];
      var listItemsRef = _react.default.useRef([]);
      var listContentRef = _react.default.useRef(_react.default.Children.map(children, function(child) {
        return _react.default.isValidElement(child) ? child.props.label : null;
      }));
      var tree = (0, _react1.useFloatingTree)();
      var nodeId = (0, _react1.useFloatingNodeId)();
      var parentId = (0, _react1.useFloatingParentNodeId)();
      var nested = parentId != null;
      var _useFloating = (0, _react1.useFloating)({ open, nodeId, placement, onOpenChange: handler, middleware: [(0, _react1.offset)(offset3), (0, _react1.flip)(), (0, _react1.shift)()], whileElementsMounted: _react1.autoUpdate }), x = _useFloating.x, y = _useFloating.y, strategy = _useFloating.strategy, refs = _useFloating.refs, context = _useFloating.context;
      var _useInteractions = (0, _react1.useInteractions)([(0, _react1.useHover)(context, { handleClose: (0, _react1.safePolygon)({ restMs: 25, blockPointerEvents: true }), enabled: allowHover || nested && internalAllowHover, delay: { open: 75 } }), (0, _react1.useClick)(context, { toggle: !nested || !internalAllowHover, event: "mousedown", ignoreMouse: nested }), (0, _react1.useRole)(context, { role: "menu" }), (0, _react1.useDismiss)(context, dismiss), (0, _react1.useListNavigation)(context, { listRef: listItemsRef, activeIndex, nested, onNavigate: setActiveIndex }), (0, _react1.useTypeahead)(context, { listRef: listContentRef, onMatch: open ? setActiveIndex : void 0, activeIndex })]), getReferenceProps = _useInteractions.getReferenceProps, getFloatingProps = _useInteractions.getFloatingProps, getItemProps = _useInteractions.getItemProps;
      _react.default.useEffect(function() {
        var handleTreeClick = function handleTreeClick2() {
          if (dismiss.itemPress) handler(false);
        };
        var onSubMenuOpen = function onSubMenuOpen2(event) {
          if (event.nodeId !== nodeId && event.parentId === parentId) {
            handler(false);
          }
        };
        tree === null || tree === void 0 ? void 0 : tree.events.on("click", handleTreeClick);
        tree === null || tree === void 0 ? void 0 : tree.events.on("menuopen", onSubMenuOpen);
        return function() {
          tree === null || tree === void 0 ? void 0 : tree.events.off("click", handleTreeClick);
          tree === null || tree === void 0 ? void 0 : tree.events.off("menuopen", onSubMenuOpen);
        };
      }, [tree, nodeId, parentId, handler, dismiss]);
      _react.default.useEffect(function() {
        if (open) {
          tree === null || tree === void 0 ? void 0 : tree.events.emit("menuopen", { parentId, nodeId });
        }
      }, [tree, open, nodeId, parentId]);
      _react.default.useEffect(function() {
        var onPointerMove = function onPointerMove2(param2) {
          var pointerType = param2.pointerType;
          if (pointerType !== "touch") {
            setInternalAllowHover(true);
          }
        };
        var onKeyDown = function onKeyDown2() {
          setInternalAllowHover(false);
        };
        window.addEventListener("pointermove", onPointerMove, { once: true, capture: true });
        window.addEventListener("keydown", onKeyDown, true);
        return function() {
          window.removeEventListener("pointermove", onPointerMove, { capture: true });
          window.removeEventListener("keydown", onKeyDown, true);
        };
      }, [internalAllowHover]);
      var referenceRef = (0, _react1.useMergeRefs)([refs.setReference, ref]);
      var contextValue = _react.default.useMemo(function() {
        return { open, handler, setInternalOpen, strategy, x, y, reference: referenceRef, floating: refs.setFloating, listItemsRef, getReferenceProps, getFloatingProps, getItemProps, appliedAnimation, lockScroll, context, activeIndex, tree, allowHover, internalAllowHover, nested, setActiveIndex };
      }, [open, handler, setInternalOpen, strategy, x, y, referenceRef, refs, getReferenceProps, getFloatingProps, getItemProps, appliedAnimation, lockScroll, context, activeIndex, tree, allowHover, internalAllowHover, nested, setActiveIndex]);
      return _react.default.createElement(_menuContext.MenuContextProvider, { value: contextValue }, _react.default.createElement(_react1.FloatingNode, { id: nodeId }, children));
    });
    MenuCore.propTypes = { open: _menu.propTypesOpen, handler: _menu.propTypesHandler, placement: _propTypes.default.oneOf(_menu.propTypesPlacement), offset: _menu.propTypesOffset, dismiss: _menu.propTypesDismiss, animate: _menu.propTypesAnimate, lockScroll: _menu.propTypesLockScroll, children: _menu.propTypesChildren };
    MenuCore.displayName = "MaterialTailwind.MenuCore";
    var _default = MenuCore;
  }
});

// node_modules/@material-tailwind/react/components/Menu/MenuHandler.js
var require_MenuHandler = __commonJS({
  "node_modules/@material-tailwind/react/components/Menu/MenuHandler.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function _export(target, all) {
      for (var name in all) Object.defineProperty(target, name, { enumerable: true, get: all[name] });
    }
    _export(exports, { MenuHandler: function() {
      return MenuHandler;
    }, default: function() {
      return _default;
    } });
    var _react = _interopRequireDefault(require_react());
    var _react1 = (init_floating_ui_react_esm(), __toCommonJS(floating_ui_react_esm_exports));
    var _menuContext = require_MenuContext();
    var _menu = require_menu();
    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys2 = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
          ownKeys2 = ownKeys2.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
            return Object.getOwnPropertyDescriptor(source, sym).enumerable;
          }));
        }
        ownKeys2.forEach(function(key) {
          _defineProperty(target, key, source[key]);
        });
      }
      return target;
    }
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
          symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          });
        }
        keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpreadProps(target, source) {
      source = source != null ? source : {};
      if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    function _objectWithoutProperties(source, excluded) {
      if (source == null) return {};
      var target = _objectWithoutPropertiesLoose(source, excluded);
      var key, i;
      if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for (i = 0; i < sourceSymbolKeys.length; i++) {
          key = sourceSymbolKeys[i];
          if (excluded.indexOf(key) >= 0) continue;
          if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
          target[key] = source[key];
        }
      }
      return target;
    }
    function _objectWithoutPropertiesLoose(source, excluded) {
      if (source == null) return {};
      var target = {};
      var sourceKeys = Object.keys(source);
      var key, i;
      for (i = 0; i < sourceKeys.length; i++) {
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
      }
      return target;
    }
    var MenuHandler = _react.default.forwardRef(function(_param, ref) {
      var children = _param.children, rest = _objectWithoutProperties(_param, ["children"]);
      var _useMenu = (0, _menuContext.useMenu)(), getReferenceProps = _useMenu.getReferenceProps, reference = _useMenu.reference, nested = _useMenu.nested;
      var mergedRef = (0, _react1.useMergeRefs)([ref, reference]);
      return _react.default.cloneElement(children, _objectSpread({}, getReferenceProps(_objectSpread(_objectSpreadProps(_objectSpread({}, rest), { ref: mergedRef, onClick: function onClick(event) {
        event.stopPropagation();
      } }), nested && { role: "menuitem" }))));
    });
    MenuHandler.propTypes = { children: _menu.propTypesChildren };
    MenuHandler.displayName = "MaterialTailwind.MenuHandler";
    var _default = MenuHandler;
  }
});

// node_modules/@material-tailwind/react/components/Menu/MenuList.js
var require_MenuList = __commonJS({
  "node_modules/@material-tailwind/react/components/Menu/MenuList.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function _export(target, all) {
      for (var name in all) Object.defineProperty(target, name, { enumerable: true, get: all[name] });
    }
    _export(exports, { MenuList: function() {
      return MenuList;
    }, default: function() {
      return _default;
    } });
    var _react = _interopRequireDefault(require_react());
    var _react1 = (init_floating_ui_react_esm(), __toCommonJS(floating_ui_react_esm_exports));
    var _framerMotion = require_cjs2();
    var _classnames = _interopRequireDefault(require_classnames());
    var _tailwindMerge = require_dist();
    var _objectsToString = _interopRequireDefault(require_objectsToString());
    var _theme = require_theme2();
    var _menuContext = require_MenuContext();
    var _menu = require_menu();
    function _extends2() {
      _extends2 = Object.assign || function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends2.apply(this, arguments);
    }
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _objectWithoutProperties(source, excluded) {
      if (source == null) return {};
      var target = _objectWithoutPropertiesLoose(source, excluded);
      var key, i;
      if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for (i = 0; i < sourceSymbolKeys.length; i++) {
          key = sourceSymbolKeys[i];
          if (excluded.indexOf(key) >= 0) continue;
          if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
          target[key] = source[key];
        }
      }
      return target;
    }
    function _objectWithoutPropertiesLoose(source, excluded) {
      if (source == null) return {};
      var target = {};
      var sourceKeys = Object.keys(source);
      var key, i;
      for (i = 0; i < sourceKeys.length; i++) {
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
      }
      return target;
    }
    var MenuList = _react.default.forwardRef(function(_param, ref) {
      var children = _param.children, className = _param.className, rest = _objectWithoutProperties(_param, ["children", "className"]);
      var menu = (0, _theme.useTheme)().menu;
      var base = menu.styles.base;
      var _useMenu = (0, _menuContext.useMenu)(), open = _useMenu.open, handler = _useMenu.handler, strategy = _useMenu.strategy, x = _useMenu.x, y = _useMenu.y, floating = _useMenu.floating, listItemsRef = _useMenu.listItemsRef, getFloatingProps = _useMenu.getFloatingProps, getItemProps = _useMenu.getItemProps, appliedAnimation = _useMenu.appliedAnimation, lockScroll = _useMenu.lockScroll, context = _useMenu.context, activeIndex = _useMenu.activeIndex, tree = _useMenu.tree, allowHover = _useMenu.allowHover, internalAllowHover = _useMenu.internalAllowHover, setActiveIndex = _useMenu.setActiveIndex, nested = _useMenu.nested;
      className = className !== null && className !== void 0 ? className : "";
      var menuClasses = (0, _tailwindMerge.twMerge)((0, _classnames.default)((0, _objectsToString.default)(base.menu)), className);
      var mergedRef = (0, _react1.useMergeRefs)([ref, floating]);
      var NewAnimatePresence = _framerMotion.AnimatePresence;
      var menuComponent = _react.default.createElement(_framerMotion.m.div, _extends2({}, rest, { ref: mergedRef, style: { position: strategy, top: y !== null && y !== void 0 ? y : 0, left: x !== null && x !== void 0 ? x : 0 }, className: menuClasses }, getFloatingProps({ onKeyDown: function onKeyDown(event) {
        if (event.key === "Tab") {
          handler(false);
          if (event.shiftKey) {
            event.preventDefault();
          }
        }
      } }), { initial: "unmount", exit: "unmount", animate: open ? "mount" : "unmount", variants: appliedAnimation }), _react.default.Children.map(children, function(child, index3) {
        return _react.default.isValidElement(child) && _react.default.cloneElement(child, getItemProps({ tabIndex: activeIndex === index3 ? 0 : -1, role: "menuitem", className: child.props.className, ref: function ref2(node) {
          listItemsRef.current[index3] = node;
        }, onClick: function onClick(event) {
          if (child.props.onClick) {
            var _child_props, _child_props_onClick;
            (_child_props_onClick = (_child_props = child.props).onClick) === null || _child_props_onClick === void 0 ? void 0 : _child_props_onClick.call(_child_props, event);
          }
          tree === null || tree === void 0 ? void 0 : tree.events.emit("click");
        }, onMouseEnter: function onMouseEnter() {
          if (allowHover && open || internalAllowHover && open) {
            setActiveIndex(index3);
          }
        } }));
      }));
      return _react.default.createElement(_framerMotion.LazyMotion, { features: _framerMotion.domAnimation }, _react.default.createElement(_react1.FloatingPortal, null, _react.default.createElement(NewAnimatePresence, null, open && _react.default.createElement(_react.default.Fragment, null, lockScroll ? _react.default.createElement(_react1.FloatingOverlay, { lockScroll: true }, _react.default.createElement(_react1.FloatingFocusManager, { context, modal: !nested, initialFocus: nested ? -1 : 0, returnFocus: !nested, visuallyHiddenDismiss: true }, menuComponent)) : _react.default.createElement(_react1.FloatingFocusManager, { context, modal: !nested, initialFocus: nested ? -1 : 0, returnFocus: !nested, visuallyHiddenDismiss: true }, menuComponent)))));
    });
    MenuList.propTypes = { className: _menu.propTypesClassName, children: _menu.propTypesChildren };
    MenuList.displayName = "MaterialTailwind.MenuList";
    var _default = MenuList;
  }
});

// node_modules/@material-tailwind/react/components/Menu/MenuItem.js
var require_MenuItem = __commonJS({
  "node_modules/@material-tailwind/react/components/Menu/MenuItem.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function _export(target, all) {
      for (var name in all) Object.defineProperty(target, name, { enumerable: true, get: all[name] });
    }
    _export(exports, { MenuItem: function() {
      return MenuItem;
    }, default: function() {
      return _default;
    } });
    var _react = _interopRequireDefault(require_react());
    var _classnames = _interopRequireDefault(require_classnames());
    var _tailwindMerge = require_dist();
    var _objectsToString = _interopRequireDefault(require_objectsToString());
    var _theme = require_theme2();
    var _menu = require_menu();
    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function _extends2() {
      _extends2 = Object.assign || function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends2.apply(this, arguments);
    }
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _objectWithoutProperties(source, excluded) {
      if (source == null) return {};
      var target = _objectWithoutPropertiesLoose(source, excluded);
      var key, i;
      if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for (i = 0; i < sourceSymbolKeys.length; i++) {
          key = sourceSymbolKeys[i];
          if (excluded.indexOf(key) >= 0) continue;
          if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
          target[key] = source[key];
        }
      }
      return target;
    }
    function _objectWithoutPropertiesLoose(source, excluded) {
      if (source == null) return {};
      var target = {};
      var sourceKeys = Object.keys(source);
      var key, i;
      for (i = 0; i < sourceKeys.length; i++) {
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
      }
      return target;
    }
    var MenuItem = _react.default.forwardRef(function(_param, ref) {
      var _param_className = _param.className, className = _param_className === void 0 ? "" : _param_className, _param_disabled = _param.disabled, disabled = _param_disabled === void 0 ? false : _param_disabled, children = _param.children, rest = _objectWithoutProperties(_param, ["className", "disabled", "children"]);
      var menu = (0, _theme.useTheme)().menu;
      var base = menu.styles.base;
      var menuItemClasses = (0, _tailwindMerge.twMerge)((0, _classnames.default)((0, _objectsToString.default)(base.item.initial), _defineProperty({}, (0, _objectsToString.default)(base.item.disabled), disabled)), className);
      return _react.default.createElement("button", _extends2({}, rest, { ref, role: "menuitem", className: menuItemClasses }), children);
    });
    MenuItem.propTypes = { className: _menu.propTypesClassName, disabled: _menu.propTypesDisabled, children: _menu.propTypesChildren };
    MenuItem.displayName = "MaterialTailwind.MenuItem";
    var _default = MenuItem;
  }
});

// node_modules/@material-tailwind/react/components/Menu/index.js
var require_Menu = __commonJS({
  "node_modules/@material-tailwind/react/components/Menu/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function _export(target, all) {
      for (var name in all) Object.defineProperty(target, name, { enumerable: true, get: all[name] });
    }
    _export(exports, { Menu: function() {
      return Menu;
    }, MenuHandler: function() {
      return _menuHandler.MenuHandler;
    }, MenuList: function() {
      return _menuList.MenuList;
    }, MenuItem: function() {
      return _menuItem.MenuItem;
    }, useMenu: function() {
      return _menuContext.useMenu;
    }, default: function() {
      return _default;
    } });
    var _react = _interopRequireDefault(require_react());
    var _react1 = (init_floating_ui_react_esm(), __toCommonJS(floating_ui_react_esm_exports));
    var _menuContext = require_MenuContext();
    var _menuCore = require_MenuCore();
    var _menuHandler = require_MenuHandler();
    var _menuList = require_MenuList();
    var _menuItem = require_MenuItem();
    function _extends2() {
      _extends2 = Object.assign || function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends2.apply(this, arguments);
    }
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var Menu = _react.default.forwardRef(function(param, ref) {
      var open = param.open, handler = param.handler, placement = param.placement, offset3 = param.offset, dismiss = param.dismiss, animate = param.animate, lockScroll = param.lockScroll, allowHover = param.allowHover, children = param.children;
      var parentId = (0, _react1.useFloatingParentNodeId)();
      var props = { open, handler, placement, offset: offset3, dismiss, animate, lockScroll, allowHover };
      if (parentId == null) {
        return _react.default.createElement(_react1.FloatingTree, null, _react.default.createElement(_menuCore.MenuCore, _extends2({ ref }, props), children));
      }
      return _react.default.createElement(_menuCore.MenuCore, _extends2({ ref }, props), children);
    });
    Menu.propTypes = _menuCore.MenuCore.propTypes;
    Menu.displayName = "MaterialTailwind.Menu";
    var _default = Object.assign(Menu, { Handler: _menuHandler.MenuHandler, List: _menuList.MenuList, Item: _menuItem.MenuItem });
  }
});

// node_modules/@material-tailwind/react/components/Navbar/MobileNav.js
var require_MobileNav = __commonJS({
  "node_modules/@material-tailwind/react/components/Navbar/MobileNav.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function _export(target, all) {
      for (var name in all) Object.defineProperty(target, name, { enumerable: true, get: all[name] });
    }
    _export(exports, { MobileNav: function() {
      return MobileNav;
    }, default: function() {
      return _default;
    } });
    var _react = _interopRequireDefault(require_react());
    var _framerMotion = require_cjs2();
    var _react1 = (init_floating_ui_react_esm(), __toCommonJS(floating_ui_react_esm_exports));
    var _deepmerge = _interopRequireDefault(require_cjs());
    var _classnames = _interopRequireDefault(require_classnames());
    var _tailwindMerge = require_dist();
    var _objectsToString = _interopRequireDefault(require_objectsToString());
    var _theme = require_theme2();
    var _navbar = require_navbar();
    function _extends2() {
      _extends2 = Object.assign || function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends2.apply(this, arguments);
    }
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _objectWithoutProperties(source, excluded) {
      if (source == null) return {};
      var target = _objectWithoutPropertiesLoose(source, excluded);
      var key, i;
      if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for (i = 0; i < sourceSymbolKeys.length; i++) {
          key = sourceSymbolKeys[i];
          if (excluded.indexOf(key) >= 0) continue;
          if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
          target[key] = source[key];
        }
      }
      return target;
    }
    function _objectWithoutPropertiesLoose(source, excluded) {
      if (source == null) return {};
      var target = {};
      var sourceKeys = Object.keys(source);
      var key, i;
      for (i = 0; i < sourceKeys.length; i++) {
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
      }
      return target;
    }
    var MobileNav = _react.default.forwardRef(function(_param, ref) {
      var open = _param.open, animate = _param.animate, className = _param.className, children = _param.children, rest = _objectWithoutProperties(_param, ["open", "animate", "className", "children"]);
      var _mobileNavRef_current;
      console.error("<MobileNav /> will be deprecated in the future versions of @material-tailwind/react use <Collapse /> instead.\n      \nMore details: https://www.material-tailwind.com/docs/react/collapse\n      ");
      var mobileNavRef = _react.default.useRef(null);
      var navbar = (0, _theme.useTheme)().navbar;
      var styles = navbar.styles;
      var mobileNav = styles.base.mobileNav;
      animate = animate !== null && animate !== void 0 ? animate : {};
      className = className !== null && className !== void 0 ? className : "";
      var classes = (0, _tailwindMerge.twMerge)((0, _classnames.default)((0, _objectsToString.default)(mobileNav)), className);
      var mainAnimation = { unmount: { height: 0, opacity: 0, transition: { duration: 0.3, times: "[0.4, 0, 0.2, 1]" } }, mount: { opacity: 1, height: "".concat((_mobileNavRef_current = mobileNavRef.current) === null || _mobileNavRef_current === void 0 ? void 0 : _mobileNavRef_current.scrollHeight, "px"), transition: { duration: 0.3, times: "[0.4, 0, 0.2, 1]" } } };
      var appliedAnimation = (0, _deepmerge.default)(mainAnimation, animate);
      var NewAnimatePresence = _framerMotion.AnimatePresence;
      var mergedRef = (0, _react1.useMergeRefs)([ref, mobileNavRef]);
      return _react.default.createElement(_framerMotion.LazyMotion, { features: _framerMotion.domAnimation }, _react.default.createElement(NewAnimatePresence, null, _react.default.createElement(_framerMotion.m.div, _extends2({}, rest, { ref: mergedRef, className: classes, initial: "unmount", exit: "unmount", animate: open ? "mount" : "unmount", variants: appliedAnimation }), children)));
    });
    MobileNav.displayName = "MaterialTailwind.MobileNav";
    MobileNav.propTypes = { open: _navbar.propTypesOpen, animate: _navbar.propTypesAnimate, className: _navbar.propTypesClassName, children: _navbar.propTypesChildren };
    var _default = MobileNav;
  }
});

// node_modules/@material-tailwind/react/components/Navbar/index.js
var require_Navbar = __commonJS({
  "node_modules/@material-tailwind/react/components/Navbar/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function _export(target, all) {
      for (var name in all) Object.defineProperty(target, name, { enumerable: true, get: all[name] });
    }
    _export(exports, { Navbar: function() {
      return Navbar;
    }, MobileNav: function() {
      return _mobileNav.MobileNav;
    }, default: function() {
      return _default;
    } });
    var _react = _interopRequireDefault(require_react());
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _classnames = _interopRequireDefault(require_classnames());
    var _tailwindMerge = require_dist();
    var _findMatch = _interopRequireDefault(require_findMatch());
    var _objectsToString = _interopRequireDefault(require_objectsToString());
    var _theme = require_theme2();
    var _mobileNav = require_MobileNav();
    var _navbar = require_navbar();
    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function _extends2() {
      _extends2 = Object.assign || function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends2.apply(this, arguments);
    }
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _objectWithoutProperties(source, excluded) {
      if (source == null) return {};
      var target = _objectWithoutPropertiesLoose(source, excluded);
      var key, i;
      if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for (i = 0; i < sourceSymbolKeys.length; i++) {
          key = sourceSymbolKeys[i];
          if (excluded.indexOf(key) >= 0) continue;
          if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
          target[key] = source[key];
        }
      }
      return target;
    }
    function _objectWithoutPropertiesLoose(source, excluded) {
      if (source == null) return {};
      var target = {};
      var sourceKeys = Object.keys(source);
      var key, i;
      for (i = 0; i < sourceKeys.length; i++) {
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
      }
      return target;
    }
    var Navbar = _react.default.forwardRef(function(_param, ref) {
      var variant = _param.variant, color = _param.color, shadow = _param.shadow, blurred = _param.blurred, fullWidth = _param.fullWidth, className = _param.className, children = _param.children, rest = _objectWithoutProperties(_param, ["variant", "color", "shadow", "blurred", "fullWidth", "className", "children"]);
      var navbar = (0, _theme.useTheme)().navbar;
      var defaultProps = navbar.defaultProps, valid = navbar.valid, styles = navbar.styles;
      var base = styles.base, variants = styles.variants;
      variant = variant !== null && variant !== void 0 ? variant : defaultProps.variant;
      color = color !== null && color !== void 0 ? color : defaultProps.color;
      shadow = shadow !== null && shadow !== void 0 ? shadow : defaultProps.shadow;
      blurred = blurred !== null && blurred !== void 0 ? blurred : defaultProps.blurred;
      fullWidth = fullWidth !== null && fullWidth !== void 0 ? fullWidth : defaultProps.fullWidth;
      className = className !== null && className !== void 0 ? className : defaultProps.className;
      var _obj;
      var navbarRoot = (0, _classnames.default)((0, _objectsToString.default)(base.navbar.initial), (_obj = {}, _defineProperty(_obj, (0, _objectsToString.default)(base.navbar.shadow), shadow), _defineProperty(_obj, (0, _objectsToString.default)(base.navbar.blurred), blurred && color === "white"), _defineProperty(_obj, (0, _objectsToString.default)(base.navbar.fullWidth), fullWidth), _obj));
      var navbarVariant = (0, _classnames.default)((0, _objectsToString.default)(variants[(0, _findMatch.default)(valid.variants, variant, "filled")][(0, _findMatch.default)(valid.colors, color, "white")]));
      var navbarClasses = (0, _tailwindMerge.twMerge)((0, _classnames.default)(navbarRoot, navbarVariant), className);
      return _react.default.createElement("nav", _extends2({}, rest, { ref, className: navbarClasses }), children);
    });
    Navbar.propTypes = { variant: _propTypes.default.oneOf(_navbar.propTypesVariant), color: _propTypes.default.oneOf(_navbar.propTypesColor), shadow: _navbar.propTypesShadow, blurred: _navbar.propTypesBlurred, fullWidth: _navbar.propTypesFullWidth, className: _navbar.propTypesClassName, children: _navbar.propTypesChildren };
    Navbar.displayName = "MaterialTailwind.Navbar";
    var _default = Object.assign(Navbar, { MobileNav: _mobileNav.MobileNav });
  }
});

// node_modules/@material-tailwind/react/types/components/popover.js
var require_popover = __commonJS({
  "node_modules/@material-tailwind/react/types/components/popover.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function _export(target, all) {
      for (var name in all) Object.defineProperty(target, name, { enumerable: true, get: all[name] });
    }
    _export(exports, { propTypesOpen: function() {
      return propTypesOpen;
    }, propTypesHandler: function() {
      return propTypesHandler;
    }, propTypesPlacement: function() {
      return propTypesPlacement;
    }, propTypesOffset: function() {
      return propTypesOffset;
    }, propTypesDismiss: function() {
      return propTypesDismiss;
    }, propTypesAnimate: function() {
      return propTypesAnimate;
    }, propTypesContent: function() {
      return propTypesContent;
    }, propTypesInteractive: function() {
      return propTypesInteractive;
    }, propTypesClassName: function() {
      return propTypesClassName;
    }, propTypesChildren: function() {
      return propTypesChildren;
    }, propTypesContextValue: function() {
      return propTypesContextValue;
    } });
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _generic = require_generic();
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var propTypesOpen = _propTypes.default.bool;
    var propTypesHandler = _propTypes.default.func;
    var propTypesPlacement = _generic.propTypesPlacements;
    var propTypesOffset = _generic.propTypesOffsetType;
    var propTypesDismiss = _generic.propTypesDismissType;
    var propTypesAnimate = _generic.propTypesAnimation;
    var propTypesContent = _propTypes.default.node;
    var propTypesInteractive = _propTypes.default.bool;
    var propTypesClassName = _propTypes.default.string;
    var propTypesChildren = _propTypes.default.node.isRequired;
    var propTypesContextValue = _propTypes.default.shape({ open: _propTypes.default.bool.isRequired, strategy: _propTypes.default.oneOf(["fixed", "absolute"]).isRequired, x: _propTypes.default.number, y: _propTypes.default.number, context: _propTypes.default.instanceOf(Object).isRequired, reference: _propTypes.default.func.isRequired, floating: _propTypes.default.func.isRequired, getReferenceProps: _propTypes.default.func.isRequired, getFloatingProps: _propTypes.default.func.isRequired, appliedAnimation: propTypesAnimate.isRequired, labelId: _propTypes.default.string.isRequired, descriptionId: _propTypes.default.string.isRequired }).isRequired;
  }
});

// node_modules/@material-tailwind/react/components/Popover/PopoverContext.js
var require_PopoverContext = __commonJS({
  "node_modules/@material-tailwind/react/components/Popover/PopoverContext.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function _export(target, all) {
      for (var name in all) Object.defineProperty(target, name, { enumerable: true, get: all[name] });
    }
    _export(exports, { PopoverContext: function() {
      return PopoverContext;
    }, usePopover: function() {
      return usePopover;
    }, PopoverContextProvider: function() {
      return PopoverContextProvider;
    } });
    var _react = _interopRequireDefault(require_react());
    var _popover = require_popover();
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var PopoverContext = _react.default.createContext(null);
    PopoverContext.displayName = "MaterialTailwind.PopoverContext";
    function usePopover() {
      var context = _react.default.useContext(PopoverContext);
      if (!context) {
        throw new Error("usePopover() must be used within a Popover. It happens when you use PopoverHandler or PopoverContent components outside the Popover component.");
      }
      return context;
    }
    var PopoverContextProvider = function(param) {
      var value = param.value, children = param.children;
      return _react.default.createElement(PopoverContext.Provider, { value }, children);
    };
    PopoverContextProvider.propTypes = { value: _popover.propTypesContextValue, children: _popover.propTypesChildren };
    PopoverContextProvider.displayName = "MaterialTailwind.PopoverContextProvider";
  }
});

// node_modules/@material-tailwind/react/components/Popover/PopoverHandler.js
var require_PopoverHandler = __commonJS({
  "node_modules/@material-tailwind/react/components/Popover/PopoverHandler.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function _export(target, all) {
      for (var name in all) Object.defineProperty(target, name, { enumerable: true, get: all[name] });
    }
    _export(exports, { PopoverHandler: function() {
      return PopoverHandler;
    }, default: function() {
      return _default;
    } });
    var _react = _interopRequireDefault(require_react());
    var _react1 = (init_floating_ui_react_esm(), __toCommonJS(floating_ui_react_esm_exports));
    var _popoverContext = require_PopoverContext();
    var _popover = require_popover();
    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys2 = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
          ownKeys2 = ownKeys2.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
            return Object.getOwnPropertyDescriptor(source, sym).enumerable;
          }));
        }
        ownKeys2.forEach(function(key) {
          _defineProperty(target, key, source[key]);
        });
      }
      return target;
    }
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
          symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          });
        }
        keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpreadProps(target, source) {
      source = source != null ? source : {};
      if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    function _objectWithoutProperties(source, excluded) {
      if (source == null) return {};
      var target = _objectWithoutPropertiesLoose(source, excluded);
      var key, i;
      if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for (i = 0; i < sourceSymbolKeys.length; i++) {
          key = sourceSymbolKeys[i];
          if (excluded.indexOf(key) >= 0) continue;
          if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
          target[key] = source[key];
        }
      }
      return target;
    }
    function _objectWithoutPropertiesLoose(source, excluded) {
      if (source == null) return {};
      var target = {};
      var sourceKeys = Object.keys(source);
      var key, i;
      for (i = 0; i < sourceKeys.length; i++) {
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
      }
      return target;
    }
    var PopoverHandler = _react.default.forwardRef(function(_param, ref) {
      var children = _param.children, rest = _objectWithoutProperties(_param, ["children"]);
      var _usePopover = (0, _popoverContext.usePopover)(), getReferenceProps = _usePopover.getReferenceProps, reference = _usePopover.reference;
      var mergedRef = (0, _react1.useMergeRefs)([ref, reference]);
      return _react.default.cloneElement(children, _objectSpread({}, getReferenceProps(_objectSpreadProps(_objectSpread({}, rest), { ref: mergedRef }))));
    });
    PopoverHandler.propTypes = { children: _popover.propTypesChildren };
    PopoverHandler.displayName = "MaterialTailwind.PopoverHandler";
    var _default = PopoverHandler;
  }
});

// node_modules/@material-tailwind/react/components/Popover/PopoverContent.js
var require_PopoverContent = __commonJS({
  "node_modules/@material-tailwind/react/components/Popover/PopoverContent.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function _export(target, all) {
      for (var name in all) Object.defineProperty(target, name, { enumerable: true, get: all[name] });
    }
    _export(exports, { PopoverContent: function() {
      return PopoverContent;
    }, default: function() {
      return _default;
    } });
    var _react = _interopRequireDefault(require_react());
    var _react1 = (init_floating_ui_react_esm(), __toCommonJS(floating_ui_react_esm_exports));
    var _framerMotion = require_cjs2();
    var _classnames = _interopRequireDefault(require_classnames());
    var _tailwindMerge = require_dist();
    var _objectsToString = _interopRequireDefault(require_objectsToString());
    var _theme = require_theme2();
    var _popoverContext = require_PopoverContext();
    var _popover = require_popover();
    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function _extends2() {
      _extends2 = Object.assign || function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends2.apply(this, arguments);
    }
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys2 = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
          ownKeys2 = ownKeys2.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
            return Object.getOwnPropertyDescriptor(source, sym).enumerable;
          }));
        }
        ownKeys2.forEach(function(key) {
          _defineProperty(target, key, source[key]);
        });
      }
      return target;
    }
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
          symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          });
        }
        keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpreadProps(target, source) {
      source = source != null ? source : {};
      if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    function _objectWithoutProperties(source, excluded) {
      if (source == null) return {};
      var target = _objectWithoutPropertiesLoose(source, excluded);
      var key, i;
      if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for (i = 0; i < sourceSymbolKeys.length; i++) {
          key = sourceSymbolKeys[i];
          if (excluded.indexOf(key) >= 0) continue;
          if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
          target[key] = source[key];
        }
      }
      return target;
    }
    function _objectWithoutPropertiesLoose(source, excluded) {
      if (source == null) return {};
      var target = {};
      var sourceKeys = Object.keys(source);
      var key, i;
      for (i = 0; i < sourceKeys.length; i++) {
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
      }
      return target;
    }
    var PopoverContent = _react.default.forwardRef(function(_param, ref) {
      var children = _param.children, className = _param.className, rest = _objectWithoutProperties(_param, ["children", "className"]);
      var popover = (0, _theme.useTheme)().popover;
      var defaultProps = popover.defaultProps, base = popover.styles.base;
      var _usePopover = (0, _popoverContext.usePopover)(), open = _usePopover.open, strategy = _usePopover.strategy, x = _usePopover.x, y = _usePopover.y, context = _usePopover.context, floating = _usePopover.floating, getFloatingProps = _usePopover.getFloatingProps, appliedAnimation = _usePopover.appliedAnimation, labelId = _usePopover.labelId, descriptionId = _usePopover.descriptionId;
      className = className !== null && className !== void 0 ? className : defaultProps.className;
      var popoverClasses = (0, _tailwindMerge.twMerge)((0, _classnames.default)((0, _objectsToString.default)(base)), className);
      var mergedRef = (0, _react1.useMergeRefs)([ref, floating]);
      var NewAnimatePresence = _framerMotion.AnimatePresence;
      return _react.default.createElement(_framerMotion.LazyMotion, { features: _framerMotion.domAnimation }, _react.default.createElement(_react1.FloatingPortal, null, _react.default.createElement(NewAnimatePresence, null, open && _react.default.createElement(_react1.FloatingFocusManager, { context }, _react.default.createElement(_framerMotion.m.div, _extends2({}, getFloatingProps(_objectSpreadProps(_objectSpread({}, rest), { ref: mergedRef, className: popoverClasses, style: { position: strategy, top: y !== null && y !== void 0 ? y : "", left: x !== null && x !== void 0 ? x : "" }, "aria-labelledby": labelId, "aria-describedby": descriptionId })), { initial: "unmount", exit: "unmount", animate: open ? "mount" : "unmount", variants: appliedAnimation }), children)))));
    });
    PopoverContent.propTypes = { className: _popover.propTypesClassName, children: _popover.propTypesChildren };
    PopoverContent.displayName = "MaterialTailwind.PopoverContent";
    var _default = PopoverContent;
  }
});

// node_modules/@material-tailwind/react/components/Popover/index.js
var require_Popover = __commonJS({
  "node_modules/@material-tailwind/react/components/Popover/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function _export(target, all) {
      for (var name in all) Object.defineProperty(target, name, { enumerable: true, get: all[name] });
    }
    _export(exports, { Popover: function() {
      return Popover;
    }, PopoverHandler: function() {
      return _popoverHandler.PopoverHandler;
    }, PopoverContent: function() {
      return _popoverContent.PopoverContent;
    }, usePopover: function() {
      return _popoverContext.usePopover;
    }, default: function() {
      return _default;
    } });
    var _react = _interopRequireDefault(require_react());
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _react1 = (init_floating_ui_react_esm(), __toCommonJS(floating_ui_react_esm_exports));
    var _deepmerge = _interopRequireDefault(require_cjs());
    var _theme = require_theme2();
    var _popoverContext = require_PopoverContext();
    var _popover = require_popover();
    var _popoverHandler = require_PopoverHandler();
    var _popoverContent = require_PopoverContent();
    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length) len = arr.length;
      for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
      return arr2;
    }
    function _arrayWithHoles(arr) {
      if (Array.isArray(arr)) return arr;
    }
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _iterableToArrayLimit(arr, i) {
      var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
      if (_i == null) return;
      var _arr = [];
      var _n = true;
      var _d = false;
      var _s, _e;
      try {
        for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);
          if (i && _arr.length === i) break;
        }
      } catch (err) {
        _d = true;
        _e = err;
      } finally {
        try {
          if (!_n && _i["return"] != null) _i["return"]();
        } finally {
          if (_d) throw _e;
        }
      }
      return _arr;
    }
    function _nonIterableRest() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _slicedToArray(arr, i) {
      return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
    }
    function _unsupportedIterableToArray(o, minLen) {
      if (!o) return;
      if (typeof o === "string") return _arrayLikeToArray(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if (n === "Object" && o.constructor) n = o.constructor.name;
      if (n === "Map" || n === "Set") return Array.from(n);
      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
    }
    var Popover = function(param) {
      var open = param.open, handler = param.handler, placement = param.placement, offset3 = param.offset, dismiss = param.dismiss, animate = param.animate, children = param.children;
      var popover = (0, _theme.useTheme)().popover;
      var defaultProps = popover.defaultProps;
      var _React_useState = _slicedToArray(_react.default.useState(false), 2), internalOpen = _React_useState[0], setInternalOpen = _React_useState[1];
      open = open !== null && open !== void 0 ? open : internalOpen;
      handler = handler !== null && handler !== void 0 ? handler : setInternalOpen;
      placement = placement !== null && placement !== void 0 ? placement : defaultProps.placement;
      offset3 = offset3 !== null && offset3 !== void 0 ? offset3 : defaultProps.offset;
      dismiss = dismiss !== null && dismiss !== void 0 ? dismiss : defaultProps.dismiss;
      animate = animate !== null && animate !== void 0 ? animate : defaultProps.animate;
      var animation = { unmount: { opacity: 0 }, mount: { opacity: 1 } };
      var appliedAnimation = (0, _deepmerge.default)(animation, animate);
      var _useFloating = (0, _react1.useFloating)({ open, onOpenChange: handler, middleware: [(0, _react1.offset)(offset3), (0, _react1.flip)(), (0, _react1.shift)()], placement }), x = _useFloating.x, y = _useFloating.y, reference = _useFloating.reference, floating = _useFloating.floating, strategy = _useFloating.strategy, refs = _useFloating.refs, update = _useFloating.update, context = _useFloating.context;
      var id = (0, _react1.useId)();
      var labelId = "".concat(id, "-label");
      var descriptionId = "".concat(id, "-description");
      var _useInteractions = (0, _react1.useInteractions)([(0, _react1.useClick)(context), (0, _react1.useRole)(context), (0, _react1.useDismiss)(context, dismiss)]), getReferenceProps = _useInteractions.getReferenceProps, getFloatingProps = _useInteractions.getFloatingProps;
      _react.default.useEffect(function() {
        if (refs.reference.current && refs.floating.current && open) {
          return (0, _react1.autoUpdate)(refs.reference.current, refs.floating.current, update);
        }
      }, [open, update, refs.reference, refs.floating]);
      var contextValue = _react.default.useMemo(function() {
        return { open, strategy, x, y, context, reference, floating, getReferenceProps, getFloatingProps, appliedAnimation, labelId, descriptionId };
      }, [open, strategy, x, y, context, reference, floating, getFloatingProps, getReferenceProps, appliedAnimation, labelId, descriptionId]);
      return _react.default.createElement(_popoverContext.PopoverContextProvider, { value: contextValue }, children);
    };
    Popover.propTypes = { open: _popover.propTypesOpen, handler: _popover.propTypesHandler, placement: _propTypes.default.oneOf(_popover.propTypesPlacement), offset: _popover.propTypesOffset, dismiss: _popover.propTypesDismiss, animate: _popover.propTypesAnimate, children: _popover.propTypesChildren };
    Popover.displayName = "MaterialTailwind.Popover";
    var _default = Object.assign(Popover, { Handler: _popoverHandler.PopoverHandler, Content: _popoverContent.PopoverContent });
  }
});

// node_modules/@material-tailwind/react/components/Progress/index.js
var require_Progress = __commonJS({
  "node_modules/@material-tailwind/react/components/Progress/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function _export(target, all) {
      for (var name in all) Object.defineProperty(target, name, { enumerable: true, get: all[name] });
    }
    _export(exports, { Progress: function() {
      return Progress;
    }, default: function() {
      return _default;
    } });
    var _react = _interopRequireDefault(require_react());
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _classnames = _interopRequireDefault(require_classnames());
    var _tailwindMerge = require_dist();
    var _findMatch = _interopRequireDefault(require_findMatch());
    var _objectsToString = _interopRequireDefault(require_objectsToString());
    var _theme = require_theme2();
    var _progress = require_progress();
    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function _extends2() {
      _extends2 = Object.assign || function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends2.apply(this, arguments);
    }
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _objectWithoutProperties(source, excluded) {
      if (source == null) return {};
      var target = _objectWithoutPropertiesLoose(source, excluded);
      var key, i;
      if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for (i = 0; i < sourceSymbolKeys.length; i++) {
          key = sourceSymbolKeys[i];
          if (excluded.indexOf(key) >= 0) continue;
          if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
          target[key] = source[key];
        }
      }
      return target;
    }
    function _objectWithoutPropertiesLoose(source, excluded) {
      if (source == null) return {};
      var target = {};
      var sourceKeys = Object.keys(source);
      var key, i;
      for (i = 0; i < sourceKeys.length; i++) {
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
      }
      return target;
    }
    var Progress = _react.default.forwardRef(function(_param, ref) {
      var variant = _param.variant, color = _param.color, size3 = _param.size, value = _param.value, label = _param.label, className = _param.className, barProps = _param.barProps, rest = _objectWithoutProperties(_param, ["variant", "color", "size", "value", "label", "className", "barProps"]);
      var progress = (0, _theme.useTheme)().progress;
      var defaultProps = progress.defaultProps, valid = progress.valid, styles = progress.styles;
      var base = styles.base, variants = styles.variants, sizes = styles.sizes;
      variant = variant !== null && variant !== void 0 ? variant : defaultProps.variant;
      color = color !== null && color !== void 0 ? color : defaultProps.color;
      size3 = size3 !== null && size3 !== void 0 ? size3 : defaultProps.size;
      label = label !== null && label !== void 0 ? label : defaultProps.label;
      className = className !== null && className !== void 0 ? className : defaultProps.className;
      barProps = barProps !== null && barProps !== void 0 ? barProps : defaultProps.barProps;
      var progressVariant = (0, _objectsToString.default)(variants[(0, _findMatch.default)(valid.variants, variant, "filled")][(0, _findMatch.default)(valid.colors, color, "gray")]);
      var progressContainerSize = (0, _objectsToString.default)(sizes[(0, _findMatch.default)(valid.sizes, size3, "md")]["container"]["initial"]);
      var progressContainer = (0, _classnames.default)((0, _objectsToString.default)(base.container.initial), progressContainerSize);
      var progressWithLabelSize = (0, _objectsToString.default)(sizes[(0, _findMatch.default)(valid.sizes, size3, "md")]["container"]["withLabel"]);
      var progressWithLabel = (0, _classnames.default)((0, _objectsToString.default)(base.container.withLabel), progressWithLabelSize);
      var progressBarSize = (0, _objectsToString.default)(sizes[(0, _findMatch.default)(valid.sizes, size3, "md")]["bar"]);
      var progressBar = (0, _classnames.default)((0, _objectsToString.default)(base.bar), progressBarSize);
      var containerClasses = (0, _tailwindMerge.twMerge)((0, _classnames.default)(progressContainer, _defineProperty({}, progressWithLabel, label)), className);
      var barClasses = (0, _tailwindMerge.twMerge)((0, _classnames.default)(progressBar, progressVariant), barProps === null || barProps === void 0 ? void 0 : barProps.className);
      return _react.default.createElement("div", _extends2({}, rest, { ref, className: containerClasses }), _react.default.createElement("div", _extends2({}, barProps, { className: barClasses, style: { width: "".concat(value, "%") } }), label && "".concat(value, "% ").concat(typeof label === "string" ? label : "")));
    });
    Progress.propTypes = { variant: _propTypes.default.oneOf(_progress.propTypesVariant), color: _propTypes.default.oneOf(_progress.propTypesColor), size: _propTypes.default.oneOf(_progress.propTypesSize), value: _progress.propTypesValue, label: _progress.propTypesLabel, barProps: _progress.propTypesBarProps, className: _progress.propTypesClassName };
    Progress.displayName = "MaterialTailwind.Progress";
    var _default = Progress;
  }
});

// node_modules/@material-tailwind/react/components/Radio/index.js
var require_Radio = __commonJS({
  "node_modules/@material-tailwind/react/components/Radio/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function _export(target, all) {
      for (var name in all) Object.defineProperty(target, name, { enumerable: true, get: all[name] });
    }
    _export(exports, { Radio: function() {
      return Radio;
    }, default: function() {
      return _default;
    } });
    var _react = _interopRequireDefault(require_react());
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _materialRippleEffects = _interopRequireDefault(require_material_ripple_effects());
    var _classnames = _interopRequireDefault(require_classnames());
    var _tailwindMerge = require_dist();
    var _findMatch = _interopRequireDefault(require_findMatch());
    var _objectsToString = _interopRequireDefault(require_objectsToString());
    var _theme = require_theme2();
    var _checkbox = require_checkbox();
    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function _extends2() {
      _extends2 = Object.assign || function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends2.apply(this, arguments);
    }
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _objectWithoutProperties(source, excluded) {
      if (source == null) return {};
      var target = _objectWithoutPropertiesLoose(source, excluded);
      var key, i;
      if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for (i = 0; i < sourceSymbolKeys.length; i++) {
          key = sourceSymbolKeys[i];
          if (excluded.indexOf(key) >= 0) continue;
          if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
          target[key] = source[key];
        }
      }
      return target;
    }
    function _objectWithoutPropertiesLoose(source, excluded) {
      if (source == null) return {};
      var target = {};
      var sourceKeys = Object.keys(source);
      var key, i;
      for (i = 0; i < sourceKeys.length; i++) {
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
      }
      return target;
    }
    var Radio = _react.default.forwardRef(function(_param, ref) {
      var color = _param.color, label = _param.label, icon = _param.icon, ripple = _param.ripple, className = _param.className, disabled = _param.disabled, containerProps = _param.containerProps, labelProps = _param.labelProps, iconProps = _param.iconProps, inputRef = _param.inputRef, rest = _objectWithoutProperties(_param, ["color", "label", "icon", "ripple", "className", "disabled", "containerProps", "labelProps", "iconProps", "inputRef"]);
      var radio = (0, _theme.useTheme)().radio;
      var defaultProps = radio.defaultProps, valid = radio.valid, styles = radio.styles;
      var base = styles.base, colors = styles.colors;
      var radioId = _react.default.useId();
      color = color !== null && color !== void 0 ? color : defaultProps.color;
      label = label !== null && label !== void 0 ? label : defaultProps.label;
      icon = icon !== null && icon !== void 0 ? icon : defaultProps.icon;
      ripple = ripple !== null && ripple !== void 0 ? ripple : defaultProps.ripple;
      className = className !== null && className !== void 0 ? className : defaultProps.className;
      disabled = disabled !== null && disabled !== void 0 ? disabled : defaultProps.disabled;
      containerProps = containerProps !== null && containerProps !== void 0 ? containerProps : defaultProps.containerProps;
      labelProps = labelProps !== null && labelProps !== void 0 ? labelProps : defaultProps.labelProps;
      iconProps = iconProps !== null && iconProps !== void 0 ? iconProps : defaultProps.iconProps;
      var rippleEffect = ripple !== void 0 && new _materialRippleEffects.default();
      var rootClasses = (0, _classnames.default)((0, _objectsToString.default)(base.root), _defineProperty({}, (0, _objectsToString.default)(base.disabled), disabled));
      var containerClasses = (0, _tailwindMerge.twMerge)((0, _classnames.default)((0, _objectsToString.default)(base.container)), containerProps === null || containerProps === void 0 ? void 0 : containerProps.className);
      var inputClasses = (0, _tailwindMerge.twMerge)((0, _classnames.default)((0, _objectsToString.default)(base.input), (0, _objectsToString.default)(colors[(0, _findMatch.default)(valid.colors, color, "gray")])), className);
      var labelClasses = (0, _tailwindMerge.twMerge)((0, _classnames.default)((0, _objectsToString.default)(base.label)), labelProps === null || labelProps === void 0 ? void 0 : labelProps.className);
      var radioIconClasses = (0, _classnames.default)((0, _classnames.default)((0, _objectsToString.default)(base.icon)), colors[(0, _findMatch.default)(valid.colors, color, "gray")].color, iconProps === null || iconProps === void 0 ? void 0 : iconProps.className);
      return _react.default.createElement("div", { ref, className: rootClasses }, _react.default.createElement("label", _extends2({}, containerProps, { className: containerClasses, htmlFor: rest.id || radioId, onMouseDown: function(e) {
        var onMouseDown = containerProps === null || containerProps === void 0 ? void 0 : containerProps.onMouseDown;
        if (ripple) {
          rippleEffect.create(e, "dark");
        }
        return typeof onMouseDown === "function" && onMouseDown(e);
      } }), _react.default.createElement("input", _extends2({}, rest, { ref: inputRef, type: "radio", disabled, className: inputClasses, id: rest.id || radioId })), _react.default.createElement("span", { className: radioIconClasses }, icon || _react.default.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", className: "h-3.5 w-3.5", viewBox: "0 0 16 16", fill: "currentColor" }, _react.default.createElement("circle", { "data-name": "ellipse", cx: "8", cy: "8", r: "8" })))), label && _react.default.createElement("label", _extends2({}, labelProps, { className: labelClasses, htmlFor: rest.id || radioId }), label));
    });
    Radio.propTypes = { color: _propTypes.default.oneOf(_checkbox.propTypesColor), label: _checkbox.propTypesLabel, icon: _checkbox.propTypesIcon, ripple: _checkbox.propTypesRipple, className: _checkbox.propTypesClassName, disabled: _checkbox.propTypesDisabled, containerProps: _checkbox.propTypesObject, labelProps: _checkbox.propTypesObject };
    Radio.displayName = "MaterialTailwind.Radio";
    var _default = Radio;
  }
});

// node_modules/@material-tailwind/react/components/Select/index.js
var require_Select = __commonJS({
  "node_modules/@material-tailwind/react/components/Select/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function _export(target, all) {
      for (var name in all) Object.defineProperty(target, name, { enumerable: true, get: all[name] });
    }
    _export(exports, { Select: function() {
      return Select;
    }, Option: function() {
      return _selectOption.SelectOption;
    }, useSelect: function() {
      return _selectContext.useSelect;
    }, usePrevious: function() {
      return _selectContext.usePrevious;
    }, default: function() {
      return _default;
    } });
    var _react = _interopRequireDefault(require_react());
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _react1 = (init_floating_ui_react_esm(), __toCommonJS(floating_ui_react_esm_exports));
    var _framerMotion = require_cjs2();
    var _classnames = _interopRequireDefault(require_classnames());
    var _tailwindMerge = require_dist();
    var _deepmerge = _interopRequireDefault(require_cjs());
    var _findMatch = _interopRequireDefault(require_findMatch());
    var _objectsToString = _interopRequireDefault(require_objectsToString());
    var _theme = require_theme2();
    var _selectContext = require_SelectContext();
    var _select = require_select();
    var _selectOption = require_SelectOption();
    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length) len = arr.length;
      for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
      return arr2;
    }
    function _arrayWithHoles(arr) {
      if (Array.isArray(arr)) return arr;
    }
    function _arrayWithoutHoles(arr) {
      if (Array.isArray(arr)) return _arrayLikeToArray(arr);
    }
    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function _extends2() {
      _extends2 = Object.assign || function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends2.apply(this, arguments);
    }
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _iterableToArray(iter) {
      if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
    }
    function _iterableToArrayLimit(arr, i) {
      var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
      if (_i == null) return;
      var _arr = [];
      var _n = true;
      var _d = false;
      var _s, _e;
      try {
        for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);
          if (i && _arr.length === i) break;
        }
      } catch (err) {
        _d = true;
        _e = err;
      } finally {
        try {
          if (!_n && _i["return"] != null) _i["return"]();
        } finally {
          if (_d) throw _e;
        }
      }
      return _arr;
    }
    function _nonIterableRest() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _nonIterableSpread() {
      throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys2 = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
          ownKeys2 = ownKeys2.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
            return Object.getOwnPropertyDescriptor(source, sym).enumerable;
          }));
        }
        ownKeys2.forEach(function(key) {
          _defineProperty(target, key, source[key]);
        });
      }
      return target;
    }
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
          symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          });
        }
        keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpreadProps(target, source) {
      source = source != null ? source : {};
      if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    function _objectWithoutProperties(source, excluded) {
      if (source == null) return {};
      var target = _objectWithoutPropertiesLoose(source, excluded);
      var key, i;
      if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for (i = 0; i < sourceSymbolKeys.length; i++) {
          key = sourceSymbolKeys[i];
          if (excluded.indexOf(key) >= 0) continue;
          if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
          target[key] = source[key];
        }
      }
      return target;
    }
    function _objectWithoutPropertiesLoose(source, excluded) {
      if (source == null) return {};
      var target = {};
      var sourceKeys = Object.keys(source);
      var key, i;
      for (i = 0; i < sourceKeys.length; i++) {
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
      }
      return target;
    }
    function _slicedToArray(arr, i) {
      return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
    }
    function _toConsumableArray(arr) {
      return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
    }
    function _unsupportedIterableToArray(o, minLen) {
      if (!o) return;
      if (typeof o === "string") return _arrayLikeToArray(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if (n === "Object" && o.constructor) n = o.constructor.name;
      if (n === "Map" || n === "Set") return Array.from(n);
      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
    }
    var Select = _react.default.forwardRef(function(_param, ref) {
      var variant = _param.variant, color = _param.color, size3 = _param.size, label = _param.label, error = _param.error, success = _param.success, arrow4 = _param.arrow, value = _param.value, onChange = _param.onChange, selected = _param.selected, offset3 = _param.offset, dismiss = _param.dismiss, animate = _param.animate, lockScroll = _param.lockScroll, labelProps = _param.labelProps, menuProps = _param.menuProps, className = _param.className, disabled = _param.disabled, name = _param.name, children = _param.children, containerProps = _param.containerProps, rest = _objectWithoutProperties(_param, ["variant", "color", "size", "label", "error", "success", "arrow", "value", "onChange", "selected", "offset", "dismiss", "animate", "lockScroll", "labelProps", "menuProps", "className", "disabled", "name", "children", "containerProps"]);
      var _children_;
      var select = (0, _theme.useTheme)().select;
      var defaultProps = select.defaultProps, valid = select.valid, styles = select.styles;
      var base = styles.base, variants = styles.variants;
      var _React_useState = _slicedToArray(_react.default.useState("close"), 2), state = _React_useState[0], setState = _React_useState[1];
      variant = variant !== null && variant !== void 0 ? variant : defaultProps.variant;
      color = color !== null && color !== void 0 ? color : defaultProps.color;
      size3 = size3 !== null && size3 !== void 0 ? size3 : defaultProps.size;
      label = label !== null && label !== void 0 ? label : defaultProps.label;
      error = error !== null && error !== void 0 ? error : defaultProps.error;
      success = success !== null && success !== void 0 ? success : defaultProps.success;
      arrow4 = arrow4 !== null && arrow4 !== void 0 ? arrow4 : defaultProps.arrow;
      value = value !== null && value !== void 0 ? value : defaultProps.value;
      onChange = onChange !== null && onChange !== void 0 ? onChange : defaultProps.onChange;
      selected = selected !== null && selected !== void 0 ? selected : defaultProps.selected;
      offset3 = offset3 !== null && offset3 !== void 0 ? offset3 : defaultProps.offset;
      dismiss = dismiss !== null && dismiss !== void 0 ? dismiss : defaultProps.dismiss;
      animate = animate !== null && animate !== void 0 ? animate : defaultProps.animate;
      labelProps = labelProps !== null && labelProps !== void 0 ? labelProps : defaultProps.labelProps;
      menuProps = menuProps !== null && menuProps !== void 0 ? menuProps : defaultProps.menuProps;
      var _merge;
      containerProps = (_merge = (0, _deepmerge.default)(containerProps, (defaultProps === null || defaultProps === void 0 ? void 0 : defaultProps.containerProps) || {})) !== null && _merge !== void 0 ? _merge : defaultProps.containerProps;
      className = className !== null && className !== void 0 ? className : defaultProps.className;
      var listItemsRef = _react.default.useRef([]);
      var _React_Children_map;
      var listContentRef = _react.default.useRef(_toConsumableArray((_React_Children_map = _react.default.Children.map(children, function(child) {
        var props = child.props;
        return props === null || props === void 0 ? void 0 : props.value;
      })) !== null && _React_Children_map !== void 0 ? _React_Children_map : []));
      var _React_useState1 = _slicedToArray(_react.default.useState(false), 2), open = _React_useState1[0], setOpen = _React_useState1[1];
      var _React_useState2 = _slicedToArray(_react.default.useState(null), 2), activeIndex = _React_useState2[0], setActiveIndex = _React_useState2[1];
      var _React_useState3 = _slicedToArray(_react.default.useState(0), 2), selectedIndex = _React_useState3[0], setSelectedIndex = _React_useState3[1];
      var _React_useState4 = _slicedToArray(_react.default.useState(false), 2), controlledScrolling = _React_useState4[0], setControlledScrolling = _React_useState4[1];
      var prevActiveIndex = (0, _selectContext.usePrevious)(activeIndex);
      var _useFloating = (0, _react1.useFloating)({ placement: "bottom-start", open, onOpenChange: setOpen, whileElementsMounted: _react1.autoUpdate, middleware: [(0, _react1.offset)(5), (0, _react1.flip)({ padding: 10 }), (0, _react1.size)({ apply: function apply(param) {
        var rects = param.rects, elements = param.elements;
        var _elements_floating, _rects_reference;
        Object.assign(elements === null || elements === void 0 ? void 0 : (_elements_floating = elements.floating) === null || _elements_floating === void 0 ? void 0 : _elements_floating.style, { width: "".concat(rects === null || rects === void 0 ? void 0 : (_rects_reference = rects.reference) === null || _rects_reference === void 0 ? void 0 : _rects_reference.width, "px"), zIndex: 99 });
      }, padding: 20 })] }), x = _useFloating.x, y = _useFloating.y, strategy = _useFloating.strategy, refs = _useFloating.refs, context = _useFloating.context;
      _react.default.useEffect(function() {
        setSelectedIndex(Math.max(0, listContentRef.current.indexOf(value) + 1));
      }, [value]);
      var floatingRef = refs.floating;
      var _useInteractions = (0, _react1.useInteractions)([(0, _react1.useClick)(context), (0, _react1.useRole)(context, { role: "listbox" }), (0, _react1.useDismiss)(context, _objectSpread({}, dismiss)), (0, _react1.useListNavigation)(context, { listRef: listItemsRef, activeIndex, selectedIndex, onNavigate: setActiveIndex, loop: true }), (0, _react1.useTypeahead)(context, { listRef: listContentRef, activeIndex, selectedIndex, onMatch: open ? setActiveIndex : setSelectedIndex })]), getReferenceProps = _useInteractions.getReferenceProps, getFloatingProps = _useInteractions.getFloatingProps, getItemProps = _useInteractions.getItemProps;
      (0, _framerMotion.useIsomorphicLayoutEffect)(function() {
        var floating = floatingRef.current;
        if (open && controlledScrolling && floating) {
          var item = activeIndex != null ? listItemsRef.current[activeIndex] : selectedIndex != null ? listItemsRef.current[selectedIndex] : null;
          if (item && prevActiveIndex != null) {
            var _listItemsRef_current_prevActiveIndex;
            var _listItemsRef_current_prevActiveIndex_offsetHeight;
            var itemHeight = (_listItemsRef_current_prevActiveIndex_offsetHeight = (_listItemsRef_current_prevActiveIndex = listItemsRef.current[prevActiveIndex]) === null || _listItemsRef_current_prevActiveIndex === void 0 ? void 0 : _listItemsRef_current_prevActiveIndex.offsetHeight) !== null && _listItemsRef_current_prevActiveIndex_offsetHeight !== void 0 ? _listItemsRef_current_prevActiveIndex_offsetHeight : 0;
            var floatingHeight = floating.offsetHeight;
            var top = item.offsetTop;
            var bottom = top + itemHeight;
            if (top < floating.scrollTop) {
              floating.scrollTop -= floating.scrollTop - top + 5;
            } else if (bottom > floatingHeight + floating.scrollTop) {
              floating.scrollTop += bottom - floatingHeight - floating.scrollTop + 5;
            }
          }
        }
      }, [open, controlledScrolling, prevActiveIndex, activeIndex]);
      var contextValue = _react.default.useMemo(function() {
        return { selectedIndex, setSelectedIndex, listRef: listItemsRef, setOpen, onChange: onChange || function() {
        }, activeIndex, setActiveIndex, getItemProps, dataRef: context.dataRef };
      }, [selectedIndex, onChange, activeIndex, getItemProps, context.dataRef]);
      _react.default.useEffect(function() {
        if (open) {
          setState("open");
        } else if (!open && selectedIndex || !open && value) {
          setState("withValue");
        } else {
          setState("close");
        }
      }, [open, value, selectedIndex, selected]);
      var selectVariant = variants[(0, _findMatch.default)(valid.variants, variant, "outlined")];
      var selectSize = selectVariant.sizes[(0, _findMatch.default)(valid.sizes, size3, "md")];
      var selectError = selectVariant.error.select;
      var selectSuccess = selectVariant.success.select;
      var selectColor = selectVariant.colors.select[(0, _findMatch.default)(valid.colors, color, "gray")];
      var labelError = selectVariant.error.label;
      var labelSuccess = selectVariant.success.label;
      var labelColor = selectVariant.colors.label[(0, _findMatch.default)(valid.colors, color, "gray")];
      var stateClasses = selectVariant.states[state];
      var containerClasses = (0, _classnames.default)((0, _objectsToString.default)(base.container), (0, _objectsToString.default)(selectSize.container), containerProps === null || containerProps === void 0 ? void 0 : containerProps.className);
      var selectClasses = (0, _tailwindMerge.twMerge)((0, _classnames.default)((0, _objectsToString.default)(base.select), (0, _objectsToString.default)(selectVariant.base.select), (0, _objectsToString.default)(stateClasses.select), (0, _objectsToString.default)(selectSize.select), _defineProperty({}, (0, _objectsToString.default)(selectColor[state]), !error && !success), _defineProperty({}, (0, _objectsToString.default)(selectError.initial), error), _defineProperty({}, (0, _objectsToString.default)(selectError.states[state]), error), _defineProperty({}, (0, _objectsToString.default)(selectSuccess.initial), success), _defineProperty({}, (0, _objectsToString.default)(selectSuccess.states[state]), success)), className);
      var _labelProps_className;
      var labelClasses = (0, _tailwindMerge.twMerge)((0, _classnames.default)((0, _objectsToString.default)(base.label), (0, _objectsToString.default)(selectVariant.base.label), (0, _objectsToString.default)(stateClasses.label), (0, _objectsToString.default)(selectSize.label.initial), (0, _objectsToString.default)(selectSize.label.states[state]), _defineProperty({}, (0, _objectsToString.default)(labelColor[state]), !error && !success), _defineProperty({}, (0, _objectsToString.default)(labelError.initial), error), _defineProperty({}, (0, _objectsToString.default)(labelError.states[state]), error), _defineProperty({}, (0, _objectsToString.default)(labelSuccess.initial), success), _defineProperty({}, (0, _objectsToString.default)(labelSuccess.states[state]), success)), (_labelProps_className = labelProps.className) !== null && _labelProps_className !== void 0 ? _labelProps_className : "");
      var arrowClasses = (0, _classnames.default)((0, _objectsToString.default)(base.arrow.initial), _defineProperty({}, (0, _objectsToString.default)(base.arrow.active), open));
      var _menuProps_className;
      var menuClasses = (0, _tailwindMerge.twMerge)((0, _classnames.default)((0, _objectsToString.default)(base.menu)), (_menuProps_className = menuProps.className) !== null && _menuProps_className !== void 0 ? _menuProps_className : "");
      var buttonContentClasses = (0, _classnames.default)("absolute top-2/4 -translate-y-2/4", variant === "outlined" ? "left-3 pt-0.5" : "left-0 pt-3");
      var animation = { unmount: { opacity: 0, transformOrigin: "top", transform: "scale(0.95)", transition: { duration: 0.2, times: [0.4, 0, 0.2, 1] } }, mount: { opacity: 1, transformOrigin: "top", transform: "scale(1)", transition: { duration: 0.2, times: [0.4, 0, 0.2, 1] } } };
      var appliedAnimation = (0, _deepmerge.default)(animation, animate);
      var NewAnimatePresence = _framerMotion.AnimatePresence;
      _react.default.useEffect(function() {
        if (value && !onChange) {
          console.error("Warning: You provided a `value` prop to a select component without an `onChange` handler. This will render a read-only select. If the field should be mutable use `onChange` handler with `value` together.");
        }
      }, [value, onChange]);
      var selectMenu = _react.default.createElement(_react1.FloatingFocusManager, { context, modal: false }, _react.default.createElement(_framerMotion.m.ul, _extends2({}, getFloatingProps(_objectSpreadProps(_objectSpread({}, menuProps), { ref: refs.setFloating, role: "listbox", className: menuClasses, style: { position: strategy, top: y !== null && y !== void 0 ? y : 0, left: x !== null && x !== void 0 ? x : 0, overflow: "auto" }, onPointerEnter: function onPointerEnter(e) {
        var onPointerEnter2 = menuProps === null || menuProps === void 0 ? void 0 : menuProps.onPointerEnter;
        if (typeof onPointerEnter2 === "function") {
          onPointerEnter2(e);
          setControlledScrolling(false);
        }
        setControlledScrolling(false);
      }, onPointerMove: function onPointerMove(e) {
        var onPointerMove2 = menuProps === null || menuProps === void 0 ? void 0 : menuProps.onPointerMove;
        if (typeof onPointerMove2 === "function") {
          onPointerMove2(e);
          setControlledScrolling(false);
        }
        setControlledScrolling(false);
      }, onKeyDown: function onKeyDown(e) {
        var onKeyDown2 = menuProps === null || menuProps === void 0 ? void 0 : menuProps.onKeyDown;
        if (typeof onKeyDown2 === "function") {
          onKeyDown2(e);
          setControlledScrolling(true);
        }
        setControlledScrolling(true);
      } })), { initial: "unmount", exit: "unmount", animate: open ? "mount" : "unmount", variants: appliedAnimation }), _react.default.Children.map(children, function(child, index3) {
        var _child_props;
        return _react.default.isValidElement(child) && _react.default.cloneElement(child, _objectSpreadProps(_objectSpread({}, child.props), { index: ((_child_props = child.props) === null || _child_props === void 0 ? void 0 : _child_props.index) || index3 + 1, id: "material-tailwind-select-".concat(index3) }));
      })));
      return _react.default.createElement(_selectContext.SelectContextProvider, { value: contextValue }, _react.default.createElement("div", _extends2({}, containerProps, { ref, className: containerClasses }), _react.default.createElement("button", _extends2({ type: "button" }, getReferenceProps(_objectSpreadProps(_objectSpread({}, rest), { ref: refs.setReference, className: selectClasses, disabled, name }))), typeof selected === "function" ? _react.default.createElement("span", { className: buttonContentClasses }, selected(children[selectedIndex - 1], selectedIndex - 1)) : value && !onChange ? _react.default.createElement("span", { className: buttonContentClasses }, value) : _react.default.createElement("span", _extends2({}, (_children_ = children[selectedIndex - 1]) === null || _children_ === void 0 ? void 0 : _children_.props, { className: buttonContentClasses })), _react.default.createElement("div", { className: arrowClasses }, arrow4 !== null && arrow4 !== void 0 ? arrow4 : _react.default.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 20 20", fill: "currentColor" }, _react.default.createElement("path", { fillRule: "evenodd", d: "M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z", clipRule: "evenodd" })))), _react.default.createElement("label", _extends2({}, labelProps, { className: labelClasses }), label), _react.default.createElement(_framerMotion.LazyMotion, { features: _framerMotion.domAnimation }, _react.default.createElement(NewAnimatePresence, null, open && _react.default.createElement(_react.default.Fragment, null, lockScroll ? _react.default.createElement(_react1.FloatingOverlay, { lockScroll: true }, selectMenu) : selectMenu)))));
    });
    Select.propTypes = { variant: _propTypes.default.oneOf(_select.propTypesVariant), color: _propTypes.default.oneOf(_select.propTypesColor), size: _propTypes.default.oneOf(_select.propTypesSize), label: _select.propTypesLabel, error: _select.propTypesError, success: _select.propTypesSuccess, arrow: _select.propTypesArrow, value: _select.propTypesValue, onChange: _select.propTypesOnChange, selected: _select.propTypesSelected, offset: _select.propTypesOffset, dismiss: _select.propTypesDismiss, animate: _select.propTypesAnimate, lockScroll: _select.propTypesLockScroll, labelProps: _select.propTypesLabelProps, menuProps: _select.propTypesMenuProps, className: _select.propTypesClassName, disabled: _select.propTypesDisabled, name: _select.propTypesName, children: _select.propTypesChildren, containerProps: _select.propTypesContainerProps };
    Select.displayName = "MaterialTailwind.Select";
    var _default = Object.assign(Select, { Option: _selectOption.SelectOption });
  }
});

// node_modules/@material-tailwind/react/components/Switch/index.js
var require_Switch = __commonJS({
  "node_modules/@material-tailwind/react/components/Switch/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function _export(target, all) {
      for (var name in all) Object.defineProperty(target, name, { enumerable: true, get: all[name] });
    }
    _export(exports, { Switch: function() {
      return Switch;
    }, default: function() {
      return _default;
    } });
    var _react = _interopRequireDefault(require_react());
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _materialRippleEffects = _interopRequireDefault(require_material_ripple_effects());
    var _classnames = _interopRequireDefault(require_classnames());
    var _tailwindMerge = require_dist();
    var _findMatch = _interopRequireDefault(require_findMatch());
    var _objectsToString = _interopRequireDefault(require_objectsToString());
    var _theme = require_theme2();
    var _checkbox = require_checkbox();
    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function _extends2() {
      _extends2 = Object.assign || function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends2.apply(this, arguments);
    }
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _objectWithoutProperties(source, excluded) {
      if (source == null) return {};
      var target = _objectWithoutPropertiesLoose(source, excluded);
      var key, i;
      if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for (i = 0; i < sourceSymbolKeys.length; i++) {
          key = sourceSymbolKeys[i];
          if (excluded.indexOf(key) >= 0) continue;
          if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
          target[key] = source[key];
        }
      }
      return target;
    }
    function _objectWithoutPropertiesLoose(source, excluded) {
      if (source == null) return {};
      var target = {};
      var sourceKeys = Object.keys(source);
      var key, i;
      for (i = 0; i < sourceKeys.length; i++) {
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
      }
      return target;
    }
    var Switch = _react.default.forwardRef(function(_param, ref) {
      var color = _param.color, label = _param.label, ripple = _param.ripple, className = _param.className, disabled = _param.disabled, containerProps = _param.containerProps, circleProps = _param.circleProps, labelProps = _param.labelProps, inputRef = _param.inputRef, rest = _objectWithoutProperties(_param, ["color", "label", "ripple", "className", "disabled", "containerProps", "circleProps", "labelProps", "inputRef"]);
      var _useTheme = (0, _theme.useTheme)(), toggle = _useTheme.switch;
      var defaultProps = toggle.defaultProps, valid = toggle.valid, styles = toggle.styles;
      var base = styles.base, colors = styles.colors;
      var switchId = _react.default.useId();
      color = color !== null && color !== void 0 ? color : defaultProps.color;
      ripple = ripple !== null && ripple !== void 0 ? ripple : defaultProps.ripple;
      className = className !== null && className !== void 0 ? className : defaultProps.className;
      disabled = disabled !== null && disabled !== void 0 ? disabled : defaultProps.disabled;
      containerProps = containerProps !== null && containerProps !== void 0 ? containerProps : defaultProps.containerProps;
      labelProps = labelProps !== null && labelProps !== void 0 ? labelProps : defaultProps.labelProps;
      circleProps = circleProps !== null && circleProps !== void 0 ? circleProps : defaultProps.circleProps;
      var rippleEffect = ripple !== void 0 && new _materialRippleEffects.default();
      var rootClasses = (0, _classnames.default)((0, _objectsToString.default)(base.root), _defineProperty({}, (0, _objectsToString.default)(base.disabled), disabled));
      var containerClasses = (0, _tailwindMerge.twMerge)((0, _classnames.default)((0, _objectsToString.default)(base.container)), containerProps === null || containerProps === void 0 ? void 0 : containerProps.className);
      var inputClasses = (0, _tailwindMerge.twMerge)((0, _classnames.default)((0, _objectsToString.default)(base.input), (0, _objectsToString.default)(colors[(0, _findMatch.default)(valid.colors, color, "gray")])), className);
      var circleClasses = (0, _tailwindMerge.twMerge)((0, _classnames.default)((0, _objectsToString.default)(base.circle), colors[(0, _findMatch.default)(valid.colors, color, "gray")].circle, colors[(0, _findMatch.default)(valid.colors, color, "gray")].before), circleProps === null || circleProps === void 0 ? void 0 : circleProps.className);
      var rippleClasses = (0, _classnames.default)((0, _objectsToString.default)(base.ripple));
      var labelClasses = (0, _tailwindMerge.twMerge)((0, _classnames.default)((0, _objectsToString.default)(base.label)), labelProps === null || labelProps === void 0 ? void 0 : labelProps.className);
      return _react.default.createElement("div", { ref, className: rootClasses }, _react.default.createElement("div", _extends2({}, containerProps, { className: containerClasses }), _react.default.createElement("input", _extends2({}, rest, { ref: inputRef, type: "checkbox", disabled, id: rest.id || switchId, className: inputClasses })), _react.default.createElement("label", _extends2({}, circleProps, { htmlFor: rest.id || switchId, className: circleClasses }), ripple && _react.default.createElement("div", { className: rippleClasses, onMouseDown: function(e) {
        var onMouseDown = containerProps === null || containerProps === void 0 ? void 0 : containerProps.onMouseDown;
        if (ripple) {
          rippleEffect.create(e, "dark");
        }
        return typeof onMouseDown === "function" && onMouseDown(e);
      } }))), label && _react.default.createElement("label", _extends2({}, labelProps, { htmlFor: rest.id || switchId, className: labelClasses }), label));
    });
    Switch.propTypes = { color: _propTypes.default.oneOf(_checkbox.propTypesColor), label: _checkbox.propTypesLabel, ripple: _checkbox.propTypesRipple, className: _checkbox.propTypesClassName, disabled: _checkbox.propTypesDisabled, containerProps: _checkbox.propTypesObject, labelProps: _checkbox.propTypesObject, circleProps: _checkbox.propTypesObject };
    Switch.displayName = "MaterialTailwind.Switch";
    var _default = Switch;
  }
});

// node_modules/@material-tailwind/react/types/components/tabs.js
var require_tabs = __commonJS({
  "node_modules/@material-tailwind/react/types/components/tabs.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function _export(target, all) {
      for (var name in all) Object.defineProperty(target, name, { enumerable: true, get: all[name] });
    }
    _export(exports, { propTypesId: function() {
      return propTypesId;
    }, propTypesValue: function() {
      return propTypesValue;
    }, propTypesAnimate: function() {
      return propTypesAnimate;
    }, propTypesDisabled: function() {
      return propTypesDisabled;
    }, propTypesClassName: function() {
      return propTypesClassName;
    }, propTypesOrientation: function() {
      return propTypesOrientation;
    }, propTypesIndicator: function() {
      return propTypesIndicator;
    }, propTypesChildren: function() {
      return propTypesChildren;
    } });
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _generic = require_generic();
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var propTypesId = _propTypes.default.string;
    var propTypesValue = _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]).isRequired;
    var propTypesAnimate = _generic.propTypesAnimation;
    var propTypesDisabled = _propTypes.default.bool;
    var propTypesClassName = _propTypes.default.string;
    var propTypesOrientation = _propTypes.default.oneOf(["horizontal", "vertical"]);
    var propTypesIndicator = _propTypes.default.instanceOf(Object);
    var propTypesChildren = _propTypes.default.node.isRequired;
  }
});

// node_modules/@material-tailwind/react/components/Tabs/TabsContext.js
var require_TabsContext = __commonJS({
  "node_modules/@material-tailwind/react/components/Tabs/TabsContext.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function _export(target, all) {
      for (var name in all) Object.defineProperty(target, name, { enumerable: true, get: all[name] });
    }
    _export(exports, { TabsContext: function() {
      return TabsContext;
    }, useTabs: function() {
      return useTabs;
    }, TabsContextProvider: function() {
      return TabsContextProvider;
    }, setId: function() {
      return setId;
    }, setActive: function() {
      return setActive;
    }, setAnimation: function() {
      return setAnimation;
    }, setIndicator: function() {
      return setIndicator;
    }, setIsInitial: function() {
      return setIsInitial;
    }, setOrientation: function() {
      return setOrientation;
    } });
    var _react = _interopRequireDefault(require_react());
    var _tabs = require_tabs();
    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length) len = arr.length;
      for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
      return arr2;
    }
    function _arrayWithHoles(arr) {
      if (Array.isArray(arr)) return arr;
    }
    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _iterableToArrayLimit(arr, i) {
      var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
      if (_i == null) return;
      var _arr = [];
      var _n = true;
      var _d = false;
      var _s, _e;
      try {
        for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);
          if (i && _arr.length === i) break;
        }
      } catch (err) {
        _d = true;
        _e = err;
      } finally {
        try {
          if (!_n && _i["return"] != null) _i["return"]();
        } finally {
          if (_d) throw _e;
        }
      }
      return _arr;
    }
    function _nonIterableRest() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys2 = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
          ownKeys2 = ownKeys2.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
            return Object.getOwnPropertyDescriptor(source, sym).enumerable;
          }));
        }
        ownKeys2.forEach(function(key) {
          _defineProperty(target, key, source[key]);
        });
      }
      return target;
    }
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
          symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          });
        }
        keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpreadProps(target, source) {
      source = source != null ? source : {};
      if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    function _slicedToArray(arr, i) {
      return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
    }
    function _unsupportedIterableToArray(o, minLen) {
      if (!o) return;
      if (typeof o === "string") return _arrayLikeToArray(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if (n === "Object" && o.constructor) n = o.constructor.name;
      if (n === "Map" || n === "Set") return Array.from(n);
      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
    }
    function reducer(state, action) {
      switch (action.type) {
        case "SET_ID": {
          return _objectSpreadProps(_objectSpread({}, state), { id: action.value });
        }
        case "SET_ACTIVE": {
          return _objectSpreadProps(_objectSpread({}, state), { active: action.value });
        }
        case "SET_ANIMATION": {
          return _objectSpreadProps(_objectSpread({}, state), { appliedAnimation: action.value });
        }
        case "SET_INDICATOR": {
          return _objectSpreadProps(_objectSpread({}, state), { indicatorProps: action.value });
        }
        case "SET_IS_INITIAL": {
          return _objectSpreadProps(_objectSpread({}, state), { isInitial: action.value });
        }
        case "SET_ORIENTATION": {
          return _objectSpreadProps(_objectSpread({}, state), { orientation: action.value });
        }
        default: {
          throw new Error("Unhandled action type: ".concat(action.type));
        }
      }
    }
    var TabsContext = _react.default.createContext(null);
    TabsContext.displayName = "MaterialTailwind.TabsContext";
    function useTabs() {
      var context = _react.default.useContext(TabsContext);
      if (!context) {
        throw new Error("useTabs() must be used within a Tabs. It happens when you use TabsHeader, TabsBody, Tab or TabPanel outside the Tabs component.");
      }
      return context;
    }
    var TabsContextProvider = function(param) {
      var id = param.id, value = param.value, orientation = param.orientation, children = param.children;
      var initialState = _react.default.useMemo(function() {
        return { id: id !== null && id !== void 0 ? id : "indicator", active: value, orientation, isInitial: true, appliedAnimation: { initial: {}, unmount: {}, mount: {} }, indicatorProps: void 0 };
      }, [id, value, orientation]);
      var _React_useReducer = _slicedToArray(_react.default.useReducer(reducer, initialState), 2), state = _React_useReducer[0], dispatch = _React_useReducer[1];
      var contextValue = _react.default.useMemo(function() {
        return { state, dispatch };
      }, [state]);
      return _react.default.createElement(TabsContext.Provider, { value: contextValue }, children);
    };
    var setId = function(dispatch, value) {
      return dispatch({ type: "SET_ID", value });
    };
    var setActive = function(dispatch, value) {
      return dispatch({ type: "SET_ACTIVE", value });
    };
    var setAnimation = function(dispatch, value) {
      return dispatch({ type: "SET_ANIMATION", value });
    };
    var setIndicator = function(dispatch, value) {
      return dispatch({ type: "SET_INDICATOR", value });
    };
    var setIsInitial = function(dispatch, value) {
      return dispatch({ type: "SET_IS_INITIAL", value });
    };
    var setOrientation = function(dispatch, value) {
      return dispatch({ type: "SET_ORIENTATION", value });
    };
    TabsContextProvider.propTypes = { id: _tabs.propTypesId, value: _tabs.propTypesValue, orientation: _tabs.propTypesOrientation, children: _tabs.propTypesChildren };
    TabsContextProvider.displayName = "MaterialTailwind.TabsContextProvider";
  }
});

// node_modules/@material-tailwind/react/components/Tabs/Tab.js
var require_Tab = __commonJS({
  "node_modules/@material-tailwind/react/components/Tabs/Tab.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function _export(target, all) {
      for (var name in all) Object.defineProperty(target, name, { enumerable: true, get: all[name] });
    }
    _export(exports, { Tab: function() {
      return Tab;
    }, default: function() {
      return _default;
    } });
    var _react = _interopRequireDefault(require_react());
    var _framerMotion = require_cjs2();
    var _classnames = _interopRequireDefault(require_classnames());
    var _tailwindMerge = require_dist();
    var _objectsToString = _interopRequireDefault(require_objectsToString());
    var _theme = require_theme2();
    var _tabsContext = require_TabsContext();
    var _tabs = require_tabs();
    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function _extends2() {
      _extends2 = Object.assign || function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends2.apply(this, arguments);
    }
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _objectWithoutProperties(source, excluded) {
      if (source == null) return {};
      var target = _objectWithoutPropertiesLoose(source, excluded);
      var key, i;
      if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for (i = 0; i < sourceSymbolKeys.length; i++) {
          key = sourceSymbolKeys[i];
          if (excluded.indexOf(key) >= 0) continue;
          if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
          target[key] = source[key];
        }
      }
      return target;
    }
    function _objectWithoutPropertiesLoose(source, excluded) {
      if (source == null) return {};
      var target = {};
      var sourceKeys = Object.keys(source);
      var key, i;
      for (i = 0; i < sourceKeys.length; i++) {
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
      }
      return target;
    }
    var Tab = _react.default.forwardRef(function(_param, ref) {
      var value = _param.value, className = _param.className, activeClassName = _param.activeClassName, disabled = _param.disabled, children = _param.children, rest = _objectWithoutProperties(_param, ["value", "className", "activeClassName", "disabled", "children"]);
      var _useTheme = (0, _theme.useTheme)(), tabTheme = _useTheme.tab;
      var defaultProps = tabTheme.defaultProps, base = tabTheme.styles.base;
      var _useTabs = (0, _tabsContext.useTabs)(), state = _useTabs.state, dispatch = _useTabs.dispatch;
      var id = state.id, active = state.active, indicatorProps = state.indicatorProps;
      className = className !== null && className !== void 0 ? className : defaultProps.className;
      activeClassName = activeClassName !== null && activeClassName !== void 0 ? activeClassName : defaultProps.activeClassName;
      disabled = disabled !== null && disabled !== void 0 ? disabled : defaultProps.disabled;
      var _obj;
      var tabClasses = (0, _tailwindMerge.twMerge)((0, _classnames.default)((0, _objectsToString.default)(base.tab.initial), (_obj = {}, _defineProperty(_obj, (0, _objectsToString.default)(base.tab.disabled), disabled), _defineProperty(_obj, activeClassName, active === value), _obj)), className);
      var _indicatorProps_className;
      var indicatorClasses = (0, _tailwindMerge.twMerge)((0, _classnames.default)((0, _objectsToString.default)(base.indicator)), (_indicatorProps_className = indicatorProps === null || indicatorProps === void 0 ? void 0 : indicatorProps.className) !== null && _indicatorProps_className !== void 0 ? _indicatorProps_className : "");
      return _react.default.createElement("li", _extends2({}, rest, { ref, role: "tab", className: tabClasses, onClick: function(e) {
        var onClick = rest === null || rest === void 0 ? void 0 : rest.onClick;
        if (typeof onClick === "function") {
          (0, _tabsContext.setActive)(dispatch, value);
          (0, _tabsContext.setIsInitial)(dispatch, false);
          onClick(e);
        }
        (0, _tabsContext.setIsInitial)(dispatch, false);
        (0, _tabsContext.setActive)(dispatch, value);
      }, "data-value": value }), _react.default.createElement("div", { className: "z-20 text-inherit" }, children), active === value && _react.default.createElement(_framerMotion.motion.div, _extends2({}, indicatorProps, { transition: { duration: 0.5 }, className: indicatorClasses, layoutId: id })));
    });
    Tab.propTypes = { value: _tabs.propTypesValue, className: _tabs.propTypesClassName, disabled: _tabs.propTypesDisabled, children: _tabs.propTypesChildren };
    Tab.displayName = "MaterialTailwind.Tab";
    var _default = Tab;
  }
});

// node_modules/@material-tailwind/react/components/Tabs/TabsBody.js
var require_TabsBody = __commonJS({
  "node_modules/@material-tailwind/react/components/Tabs/TabsBody.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function _export(target, all) {
      for (var name in all) Object.defineProperty(target, name, { enumerable: true, get: all[name] });
    }
    _export(exports, { TabsBody: function() {
      return TabsBody;
    }, default: function() {
      return _default;
    } });
    var _react = _interopRequireDefault(require_react());
    var _framerMotion = require_cjs2();
    var _deepmerge = _interopRequireDefault(require_cjs());
    var _classnames = _interopRequireDefault(require_classnames());
    var _tailwindMerge = require_dist();
    var _objectsToString = _interopRequireDefault(require_objectsToString());
    var _theme = require_theme2();
    var _tabsContext = require_TabsContext();
    var _tabs = require_tabs();
    function _extends2() {
      _extends2 = Object.assign || function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends2.apply(this, arguments);
    }
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _objectWithoutProperties(source, excluded) {
      if (source == null) return {};
      var target = _objectWithoutPropertiesLoose(source, excluded);
      var key, i;
      if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for (i = 0; i < sourceSymbolKeys.length; i++) {
          key = sourceSymbolKeys[i];
          if (excluded.indexOf(key) >= 0) continue;
          if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
          target[key] = source[key];
        }
      }
      return target;
    }
    function _objectWithoutPropertiesLoose(source, excluded) {
      if (source == null) return {};
      var target = {};
      var sourceKeys = Object.keys(source);
      var key, i;
      for (i = 0; i < sourceKeys.length; i++) {
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
      }
      return target;
    }
    var TabsBody = _react.default.forwardRef(function(_param, ref) {
      var animate = _param.animate, className = _param.className, children = _param.children, rest = _objectWithoutProperties(_param, ["animate", "className", "children"]);
      var tabsBody = (0, _theme.useTheme)().tabsBody;
      var defaultProps = tabsBody.defaultProps, base = tabsBody.styles.base;
      var dispatch = (0, _tabsContext.useTabs)().dispatch;
      className = className !== null && className !== void 0 ? className : defaultProps.className;
      animate = animate !== null && animate !== void 0 ? animate : defaultProps.animate;
      var tabsBodyClasses = (0, _tailwindMerge.twMerge)((0, _classnames.default)((0, _objectsToString.default)(base)), className);
      var mainAnimation = _react.default.useMemo(function() {
        return { initial: { opacity: 0, position: "absolute", top: "0", left: "0", zIndex: 1, transition: { duration: 0 } }, unmount: { opacity: 0, position: "absolute", top: "0", left: "0", zIndex: 1, transition: { duration: 0.5, times: [0.4, 0, 0.2, 1] } }, mount: { opacity: 1, position: "relative", zIndex: 2, transition: { duration: 0.5, times: [0.4, 0, 0.2, 1] } } };
      }, []);
      var appliedAnimation = _react.default.useMemo(function() {
        return (0, _deepmerge.default)(mainAnimation, animate);
      }, [animate, mainAnimation]);
      (0, _framerMotion.useIsomorphicLayoutEffect)(function() {
        (0, _tabsContext.setAnimation)(dispatch, appliedAnimation);
      }, [appliedAnimation, dispatch]);
      return _react.default.createElement("div", _extends2({}, rest, { ref, className: tabsBodyClasses }), children);
    });
    TabsBody.propTypes = { animate: _tabs.propTypesAnimate, className: _tabs.propTypesClassName, children: _tabs.propTypesChildren };
    TabsBody.displayName = "MaterialTailwind.TabsBody";
    var _default = TabsBody;
  }
});

// node_modules/@material-tailwind/react/components/Tabs/TabsHeader.js
var require_TabsHeader = __commonJS({
  "node_modules/@material-tailwind/react/components/Tabs/TabsHeader.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function _export(target, all) {
      for (var name in all) Object.defineProperty(target, name, { enumerable: true, get: all[name] });
    }
    _export(exports, { TabsHeader: function() {
      return TabsHeader;
    }, default: function() {
      return _default;
    } });
    var _react = _interopRequireDefault(require_react());
    var _classnames = _interopRequireDefault(require_classnames());
    var _tailwindMerge = require_dist();
    var _objectsToString = _interopRequireDefault(require_objectsToString());
    var _theme = require_theme2();
    var _tabsContext = require_TabsContext();
    var _tabs = require_tabs();
    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function _extends2() {
      _extends2 = Object.assign || function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends2.apply(this, arguments);
    }
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _objectWithoutProperties(source, excluded) {
      if (source == null) return {};
      var target = _objectWithoutPropertiesLoose(source, excluded);
      var key, i;
      if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for (i = 0; i < sourceSymbolKeys.length; i++) {
          key = sourceSymbolKeys[i];
          if (excluded.indexOf(key) >= 0) continue;
          if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
          target[key] = source[key];
        }
      }
      return target;
    }
    function _objectWithoutPropertiesLoose(source, excluded) {
      if (source == null) return {};
      var target = {};
      var sourceKeys = Object.keys(source);
      var key, i;
      for (i = 0; i < sourceKeys.length; i++) {
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
      }
      return target;
    }
    var TabsHeader = _react.default.forwardRef(function(_param, ref) {
      var indicatorProps = _param.indicatorProps, className = _param.className, children = _param.children, rest = _objectWithoutProperties(_param, ["indicatorProps", "className", "children"]);
      var tabsHeader = (0, _theme.useTheme)().tabsHeader;
      var defaultProps = tabsHeader.defaultProps, styles = tabsHeader.styles;
      var _useTabs = (0, _tabsContext.useTabs)(), state = _useTabs.state, dispatch = _useTabs.dispatch;
      var orientation = state.orientation;
      _react.default.useEffect(function() {
        (0, _tabsContext.setIndicator)(dispatch, indicatorProps);
      }, [dispatch, indicatorProps]);
      className = className !== null && className !== void 0 ? className : defaultProps.className;
      var tabsHeaderClasses = (0, _tailwindMerge.twMerge)((0, _classnames.default)((0, _objectsToString.default)(styles.base), _defineProperty({}, styles[orientation] && (0, _objectsToString.default)(styles[orientation]), orientation)), className);
      return _react.default.createElement("nav", null, _react.default.createElement("ul", _extends2({}, rest, { ref, role: "tablist", className: tabsHeaderClasses }), children));
    });
    TabsHeader.propTypes = { indicatorProps: _tabs.propTypesIndicator, className: _tabs.propTypesClassName, children: _tabs.propTypesChildren };
    TabsHeader.displayName = "MaterialTailwind.TabsHeader";
    var _default = TabsHeader;
  }
});

// node_modules/@material-tailwind/react/components/Tabs/TabPanel.js
var require_TabPanel = __commonJS({
  "node_modules/@material-tailwind/react/components/Tabs/TabPanel.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function _export(target, all) {
      for (var name in all) Object.defineProperty(target, name, { enumerable: true, get: all[name] });
    }
    _export(exports, { TabPanel: function() {
      return TabPanel;
    }, default: function() {
      return _default;
    } });
    var _react = _interopRequireDefault(require_react());
    var _framerMotion = require_cjs2();
    var _classnames = _interopRequireDefault(require_classnames());
    var _tailwindMerge = require_dist();
    var _objectsToString = _interopRequireDefault(require_objectsToString());
    var _theme = require_theme2();
    var _tabsContext = require_TabsContext();
    var _tabs = require_tabs();
    function _extends2() {
      _extends2 = Object.assign || function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends2.apply(this, arguments);
    }
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _objectWithoutProperties(source, excluded) {
      if (source == null) return {};
      var target = _objectWithoutPropertiesLoose(source, excluded);
      var key, i;
      if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for (i = 0; i < sourceSymbolKeys.length; i++) {
          key = sourceSymbolKeys[i];
          if (excluded.indexOf(key) >= 0) continue;
          if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
          target[key] = source[key];
        }
      }
      return target;
    }
    function _objectWithoutPropertiesLoose(source, excluded) {
      if (source == null) return {};
      var target = {};
      var sourceKeys = Object.keys(source);
      var key, i;
      for (i = 0; i < sourceKeys.length; i++) {
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
      }
      return target;
    }
    var TabPanel = _react.default.forwardRef(function(_param, ref) {
      var value = _param.value, className = _param.className, children = _param.children, rest = _objectWithoutProperties(_param, ["value", "className", "children"]);
      var tabPanel = (0, _theme.useTheme)().tabPanel;
      var defaultProps = tabPanel.defaultProps, base = tabPanel.styles.base;
      var state = (0, _tabsContext.useTabs)().state;
      var active = state.active, appliedAnimation = state.appliedAnimation, isInitial = state.isInitial;
      className = className !== null && className !== void 0 ? className : defaultProps.className;
      var tabPanelClasses = (0, _tailwindMerge.twMerge)((0, _classnames.default)((0, _objectsToString.default)(base)), className);
      var NewAnimatePresence = _framerMotion.AnimatePresence;
      return _react.default.createElement(_framerMotion.LazyMotion, { features: _framerMotion.domAnimation }, _react.default.createElement(NewAnimatePresence, { exitBeforeEnter: true }, _react.default.createElement(_framerMotion.m.div, _extends2({}, rest, { ref, role: "tabpanel", className: tabPanelClasses, initial: "unmount", exit: "unmount", animate: active === value ? "mount" : isInitial ? "initial" : "unmount", variants: appliedAnimation, "data-value": value }), children)));
    });
    TabPanel.propTypes = { value: _tabs.propTypesValue, className: _tabs.propTypesClassName, children: _tabs.propTypesChildren };
    TabPanel.displayName = "MaterialTailwind.TabPanel";
    var _default = TabPanel;
  }
});

// node_modules/@material-tailwind/react/components/Tabs/index.js
var require_Tabs = __commonJS({
  "node_modules/@material-tailwind/react/components/Tabs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function _export(target, all) {
      for (var name in all) Object.defineProperty(target, name, { enumerable: true, get: all[name] });
    }
    _export(exports, { Tabs: function() {
      return Tabs;
    }, Tab: function() {
      return _tab.Tab;
    }, TabsBody: function() {
      return _tabsBody.TabsBody;
    }, TabsHeader: function() {
      return _tabsHeader.TabsHeader;
    }, TabPanel: function() {
      return _tabPanel.TabPanel;
    }, useTabs: function() {
      return _tabsContext.useTabs;
    }, default: function() {
      return _default;
    } });
    var _react = _interopRequireDefault(require_react());
    var _classnames = _interopRequireDefault(require_classnames());
    var _tailwindMerge = require_dist();
    var _objectsToString = _interopRequireDefault(require_objectsToString());
    var _theme = require_theme2();
    var _tabsContext = require_TabsContext();
    var _tab = require_Tab();
    var _tabsBody = require_TabsBody();
    var _tabsHeader = require_TabsHeader();
    var _tabPanel = require_TabPanel();
    var _tabs = require_tabs();
    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function _extends2() {
      _extends2 = Object.assign || function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends2.apply(this, arguments);
    }
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _objectWithoutProperties(source, excluded) {
      if (source == null) return {};
      var target = _objectWithoutPropertiesLoose(source, excluded);
      var key, i;
      if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for (i = 0; i < sourceSymbolKeys.length; i++) {
          key = sourceSymbolKeys[i];
          if (excluded.indexOf(key) >= 0) continue;
          if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
          target[key] = source[key];
        }
      }
      return target;
    }
    function _objectWithoutPropertiesLoose(source, excluded) {
      if (source == null) return {};
      var target = {};
      var sourceKeys = Object.keys(source);
      var key, i;
      for (i = 0; i < sourceKeys.length; i++) {
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
      }
      return target;
    }
    var Tabs = _react.default.forwardRef(function(_param, ref) {
      var value = _param.value, className = _param.className, orientation = _param.orientation, children = _param.children, rest = _objectWithoutProperties(_param, ["value", "className", "orientation", "children"]);
      var tabs = (0, _theme.useTheme)().tabs;
      var defaultProps = tabs.defaultProps, styles = tabs.styles;
      var tabsId = _react.default.useId();
      className = className !== null && className !== void 0 ? className : defaultProps.className;
      orientation = orientation !== null && orientation !== void 0 ? orientation : defaultProps.orientation;
      var tabsClasses = (0, _tailwindMerge.twMerge)((0, _classnames.default)((0, _objectsToString.default)(styles.base), _defineProperty({}, styles[orientation] && (0, _objectsToString.default)(styles[orientation]), orientation)), className);
      return _react.default.createElement(_tabsContext.TabsContextProvider, { id: tabsId, value, orientation }, _react.default.createElement("div", _extends2({}, rest, { ref, className: tabsClasses }), children));
    });
    Tabs.propTypes = { id: _tabs.propTypesId, value: _tabs.propTypesValue, className: _tabs.propTypesClassName, orientation: _tabs.propTypesOrientation, children: _tabs.propTypesChildren };
    Tabs.displayName = "MaterialTailwind.Tabs";
    var _default = Object.assign(Tabs, { Tab: _tab.Tab, Body: _tabsBody.TabsBody, Header: _tabsHeader.TabsHeader, Panel: _tabPanel.TabPanel });
  }
});

// node_modules/@material-tailwind/react/components/Textarea/index.js
var require_Textarea = __commonJS({
  "node_modules/@material-tailwind/react/components/Textarea/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function _export(target, all) {
      for (var name in all) Object.defineProperty(target, name, { enumerable: true, get: all[name] });
    }
    _export(exports, { Textarea: function() {
      return Textarea;
    }, default: function() {
      return _default;
    } });
    var _react = _interopRequireDefault(require_react());
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _classnames = _interopRequireDefault(require_classnames());
    var _findMatch = _interopRequireDefault(require_findMatch());
    var _objectsToString = _interopRequireDefault(require_objectsToString());
    var _theme = require_theme2();
    var _input = require_input();
    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function _extends2() {
      _extends2 = Object.assign || function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends2.apply(this, arguments);
    }
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _objectWithoutProperties(source, excluded) {
      if (source == null) return {};
      var target = _objectWithoutPropertiesLoose(source, excluded);
      var key, i;
      if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for (i = 0; i < sourceSymbolKeys.length; i++) {
          key = sourceSymbolKeys[i];
          if (excluded.indexOf(key) >= 0) continue;
          if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
          target[key] = source[key];
        }
      }
      return target;
    }
    function _objectWithoutPropertiesLoose(source, excluded) {
      if (source == null) return {};
      var target = {};
      var sourceKeys = Object.keys(source);
      var key, i;
      for (i = 0; i < sourceKeys.length; i++) {
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
      }
      return target;
    }
    var Textarea = _react.default.forwardRef(function(_param, ref) {
      var variant = _param.variant, color = _param.color, size3 = _param.size, label = _param.label, error = _param.error, success = _param.success, resize = _param.resize, labelProps = _param.labelProps, containerProps = _param.containerProps, shrink = _param.shrink, className = _param.className, rest = _objectWithoutProperties(_param, ["variant", "color", "size", "label", "error", "success", "resize", "labelProps", "containerProps", "shrink", "className"]);
      var textarea = (0, _theme.useTheme)().textarea;
      var defaultProps = textarea.defaultProps, valid = textarea.valid, styles = textarea.styles;
      var base = styles.base, variants = styles.variants;
      variant = variant !== null && variant !== void 0 ? variant : defaultProps.variant;
      size3 = size3 !== null && size3 !== void 0 ? size3 : defaultProps.size;
      color = color !== null && color !== void 0 ? color : defaultProps.color;
      label = label !== null && label !== void 0 ? label : defaultProps.label;
      labelProps = labelProps !== null && labelProps !== void 0 ? labelProps : defaultProps.labelProps;
      containerProps = containerProps !== null && containerProps !== void 0 ? containerProps : defaultProps.containerProps;
      shrink = shrink !== null && shrink !== void 0 ? shrink : defaultProps.shrink;
      className = className !== null && className !== void 0 ? className : defaultProps.className;
      var textareaVariant = variants[(0, _findMatch.default)(valid.variants, variant, "outlined")];
      var textareaError = (0, _objectsToString.default)(textareaVariant.error.textarea);
      var textareaSuccess = (0, _objectsToString.default)(textareaVariant.success.textarea);
      var textareaShrink = (0, _objectsToString.default)(textareaVariant.shrink.textarea);
      var textareaColor = (0, _objectsToString.default)(textareaVariant.colors.textarea[(0, _findMatch.default)(valid.colors, color, "gray")]);
      var labelError = (0, _objectsToString.default)(textareaVariant.error.label);
      var labelSuccess = (0, _objectsToString.default)(textareaVariant.success.label);
      var labelShrink = (0, _objectsToString.default)(textareaVariant.shrink.label);
      var labelColor = (0, _objectsToString.default)(textareaVariant.colors.label[(0, _findMatch.default)(valid.colors, color, "gray")]);
      var containerClasses = (0, _classnames.default)((0, _objectsToString.default)(base.container), containerProps === null || containerProps === void 0 ? void 0 : containerProps.className);
      var textareaClasses = (0, _classnames.default)((0, _objectsToString.default)(base.textarea), (0, _objectsToString.default)(textareaVariant.base.textarea), (0, _objectsToString.default)(textareaVariant.sizes[(0, _findMatch.default)(valid.sizes, size3, "md")].textarea), _defineProperty({}, textareaColor, !error && !success), _defineProperty({}, textareaError, error), _defineProperty({}, textareaSuccess, success), _defineProperty({}, textareaShrink, shrink), !resize ? "!resize-none" : "", className);
      var labelClasses = (0, _classnames.default)((0, _objectsToString.default)(base.label), (0, _objectsToString.default)(textareaVariant.base.label), (0, _objectsToString.default)(textareaVariant.sizes[(0, _findMatch.default)(valid.sizes, size3, "md")].label), _defineProperty({}, labelColor, !error && !success), _defineProperty({}, labelError, error), _defineProperty({}, labelSuccess, success), _defineProperty({}, labelShrink, shrink), labelProps === null || labelProps === void 0 ? void 0 : labelProps.className);
      return _react.default.createElement("div", { ref, className: containerClasses }, _react.default.createElement("textarea", _extends2({}, rest, { className: textareaClasses, placeholder: (rest === null || rest === void 0 ? void 0 : rest.placeholder) || " " })), _react.default.createElement("label", { className: labelClasses }, label));
    });
    Textarea.propTypes = { variant: _propTypes.default.oneOf(_input.propTypesVariant), size: _propTypes.default.oneOf(_input.propTypesSize), color: _propTypes.default.oneOf(_input.propTypesColor), label: _input.propTypesLabel, error: _input.propTypesError, success: _input.propTypesSuccess, resize: _input.propTypesResize, labelProps: _input.propTypesLabelProps, containerProps: _input.propTypesContainerProps, shrink: _input.propTypesShrink, className: _input.propTypesClassName };
    Textarea.displayName = "MaterialTailwind.Textarea";
    var _default = Textarea;
  }
});

// node_modules/@material-tailwind/react/components/Tooltip/index.js
var require_Tooltip = __commonJS({
  "node_modules/@material-tailwind/react/components/Tooltip/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function _export(target, all) {
      for (var name in all) Object.defineProperty(target, name, { enumerable: true, get: all[name] });
    }
    _export(exports, { Tooltip: function() {
      return Tooltip;
    }, default: function() {
      return _default;
    } });
    var _react = _interopRequireDefault(require_react());
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _react1 = (init_floating_ui_react_esm(), __toCommonJS(floating_ui_react_esm_exports));
    var _framerMotion = require_cjs2();
    var _classnames = _interopRequireDefault(require_classnames());
    var _tailwindMerge = require_dist();
    var _deepmerge = _interopRequireDefault(require_cjs());
    var _objectsToString = _interopRequireDefault(require_objectsToString());
    var _theme = require_theme2();
    var _popover = require_popover();
    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length) len = arr.length;
      for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
      return arr2;
    }
    function _arrayWithHoles(arr) {
      if (Array.isArray(arr)) return arr;
    }
    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function _extends2() {
      _extends2 = Object.assign || function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends2.apply(this, arguments);
    }
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _iterableToArrayLimit(arr, i) {
      var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
      if (_i == null) return;
      var _arr = [];
      var _n = true;
      var _d = false;
      var _s, _e;
      try {
        for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);
          if (i && _arr.length === i) break;
        }
      } catch (err) {
        _d = true;
        _e = err;
      } finally {
        try {
          if (!_n && _i["return"] != null) _i["return"]();
        } finally {
          if (_d) throw _e;
        }
      }
      return _arr;
    }
    function _nonIterableRest() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys2 = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
          ownKeys2 = ownKeys2.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
            return Object.getOwnPropertyDescriptor(source, sym).enumerable;
          }));
        }
        ownKeys2.forEach(function(key) {
          _defineProperty(target, key, source[key]);
        });
      }
      return target;
    }
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
          symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          });
        }
        keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpreadProps(target, source) {
      source = source != null ? source : {};
      if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    function _objectWithoutProperties(source, excluded) {
      if (source == null) return {};
      var target = _objectWithoutPropertiesLoose(source, excluded);
      var key, i;
      if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for (i = 0; i < sourceSymbolKeys.length; i++) {
          key = sourceSymbolKeys[i];
          if (excluded.indexOf(key) >= 0) continue;
          if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
          target[key] = source[key];
        }
      }
      return target;
    }
    function _objectWithoutPropertiesLoose(source, excluded) {
      if (source == null) return {};
      var target = {};
      var sourceKeys = Object.keys(source);
      var key, i;
      for (i = 0; i < sourceKeys.length; i++) {
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
      }
      return target;
    }
    function _slicedToArray(arr, i) {
      return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
    }
    function _unsupportedIterableToArray(o, minLen) {
      if (!o) return;
      if (typeof o === "string") return _arrayLikeToArray(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if (n === "Object" && o.constructor) n = o.constructor.name;
      if (n === "Map" || n === "Set") return Array.from(n);
      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
    }
    var Tooltip = _react.default.forwardRef(function(_param, ref) {
      var open = _param.open, handler = _param.handler, content = _param.content, interactive = _param.interactive, placement = _param.placement, offset3 = _param.offset, dismiss = _param.dismiss, animate = _param.animate, className = _param.className, children = _param.children, rest = _objectWithoutProperties(_param, ["open", "handler", "content", "interactive", "placement", "offset", "dismiss", "animate", "className", "children"]);
      var tooltip = (0, _theme.useTheme)().tooltip;
      var defaultProps = tooltip.defaultProps, base = tooltip.styles.base;
      var _React_useState = _slicedToArray(_react.default.useState(false), 2), internalOpen = _React_useState[0], setInternalOpen = _React_useState[1];
      open = open !== null && open !== void 0 ? open : internalOpen;
      handler = handler !== null && handler !== void 0 ? handler : setInternalOpen;
      interactive = interactive !== null && interactive !== void 0 ? interactive : defaultProps.interactive;
      placement = placement !== null && placement !== void 0 ? placement : defaultProps.placement;
      offset3 = offset3 !== null && offset3 !== void 0 ? offset3 : defaultProps.offset;
      dismiss = dismiss !== null && dismiss !== void 0 ? dismiss : defaultProps.dismiss;
      animate = animate !== null && animate !== void 0 ? animate : defaultProps.animate;
      className = className !== null && className !== void 0 ? className : defaultProps.className;
      var tooltipClasses = (0, _tailwindMerge.twMerge)((0, _classnames.default)((0, _objectsToString.default)(base)), className);
      var animation = { unmount: { opacity: 0 }, mount: { opacity: 1 } };
      var appliedAnimation = (0, _deepmerge.default)(animation, animate);
      var _useFloating = (0, _react1.useFloating)({ open, onOpenChange: handler, middleware: [(0, _react1.offset)(offset3), (0, _react1.flip)(), (0, _react1.shift)()], placement }), x = _useFloating.x, y = _useFloating.y, reference = _useFloating.reference, floating = _useFloating.floating, strategy = _useFloating.strategy, refs = _useFloating.refs, update = _useFloating.update, context = _useFloating.context;
      var _useInteractions = (0, _react1.useInteractions)([(0, _react1.useClick)(context, { enabled: interactive }), (0, _react1.useFocus)(context), (0, _react1.useHover)(context), (0, _react1.useRole)(context, { role: "tooltip" }), (0, _react1.useDismiss)(context, dismiss)]), getReferenceProps = _useInteractions.getReferenceProps, getFloatingProps = _useInteractions.getFloatingProps;
      _react.default.useEffect(function() {
        if (refs.reference.current && refs.floating.current && open) {
          return (0, _react1.autoUpdate)(refs.reference.current, refs.floating.current, update);
        }
      }, [open, update, refs.reference, refs.floating]);
      var mergedRef = (0, _react1.useMergeRefs)([ref, floating]);
      var childMergedRef = (0, _react1.useMergeRefs)([ref, reference]);
      var NewAnimatePresence = _framerMotion.AnimatePresence;
      return _react.default.createElement(_react.default.Fragment, null, typeof children === "string" ? _react.default.createElement("span", _extends2({}, getReferenceProps({ ref: childMergedRef })), children) : _react.default.cloneElement(children, _objectSpread({}, getReferenceProps(_objectSpreadProps(_objectSpread({}, children === null || children === void 0 ? void 0 : children.props), { ref: childMergedRef })))), _react.default.createElement(_framerMotion.LazyMotion, { features: _framerMotion.domAnimation }, _react.default.createElement(_react1.FloatingPortal, null, _react.default.createElement(NewAnimatePresence, null, open && _react.default.createElement(_framerMotion.m.div, _extends2({}, getFloatingProps(_objectSpreadProps(_objectSpread({}, rest), { ref: mergedRef, className: tooltipClasses, style: { position: strategy, top: y !== null && y !== void 0 ? y : "", left: x !== null && x !== void 0 ? x : "" } })), { initial: "unmount", exit: "unmount", animate: open ? "mount" : "unmount", variants: appliedAnimation }), content)))));
    });
    Tooltip.propTypes = { open: _popover.propTypesOpen, handler: _popover.propTypesHandler, content: _popover.propTypesContent, interactive: _popover.propTypesInteractive, placement: _propTypes.default.oneOf(_popover.propTypesPlacement), offset: _popover.propTypesOffset, dismiss: _popover.propTypesDismiss, animate: _popover.propTypesAnimate, className: _popover.propTypesClassName, children: _popover.propTypesChildren };
    Tooltip.displayName = "MaterialTailwind.Tooltip";
    var _default = Tooltip;
  }
});

// node_modules/@material-tailwind/react/types/components/collapse.js
var require_collapse = __commonJS({
  "node_modules/@material-tailwind/react/types/components/collapse.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function _export(target, all) {
      for (var name in all) Object.defineProperty(target, name, { enumerable: true, get: all[name] });
    }
    _export(exports, { propTypesClassName: function() {
      return propTypesClassName;
    }, propTypesChildren: function() {
      return propTypesChildren;
    }, propTypesOpen: function() {
      return propTypesOpen;
    }, propTypesAnimate: function() {
      return propTypesAnimate;
    } });
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _generic = require_generic();
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var propTypesClassName = _propTypes.default.string;
    var propTypesChildren = _propTypes.default.node.isRequired;
    var propTypesOpen = _propTypes.default.bool.isRequired;
    var propTypesAnimate = _generic.propTypesAnimation;
  }
});

// node_modules/@material-tailwind/react/components/Collapse/index.js
var require_Collapse = __commonJS({
  "node_modules/@material-tailwind/react/components/Collapse/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function _export(target, all) {
      for (var name in all) Object.defineProperty(target, name, { enumerable: true, get: all[name] });
    }
    _export(exports, { Collapse: function() {
      return Collapse;
    }, default: function() {
      return _default;
    } });
    var _react = _interopRequireDefault(require_react());
    var _framerMotion = require_cjs2();
    var _react1 = (init_floating_ui_react_esm(), __toCommonJS(floating_ui_react_esm_exports));
    var _deepmerge = _interopRequireDefault(require_cjs());
    var _classnames = _interopRequireDefault(require_classnames());
    var _tailwindMerge = require_dist();
    var _objectsToString = _interopRequireDefault(require_objectsToString());
    var _theme = require_theme2();
    var _collapse = require_collapse();
    function _extends2() {
      _extends2 = Object.assign || function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends2.apply(this, arguments);
    }
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _objectWithoutProperties(source, excluded) {
      if (source == null) return {};
      var target = _objectWithoutPropertiesLoose(source, excluded);
      var key, i;
      if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for (i = 0; i < sourceSymbolKeys.length; i++) {
          key = sourceSymbolKeys[i];
          if (excluded.indexOf(key) >= 0) continue;
          if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
          target[key] = source[key];
        }
      }
      return target;
    }
    function _objectWithoutPropertiesLoose(source, excluded) {
      if (source == null) return {};
      var target = {};
      var sourceKeys = Object.keys(source);
      var key, i;
      for (i = 0; i < sourceKeys.length; i++) {
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
      }
      return target;
    }
    var Collapse = _react.default.forwardRef(function(_param, ref) {
      var open = _param.open, animate = _param.animate, className = _param.className, children = _param.children, rest = _objectWithoutProperties(_param, ["open", "animate", "className", "children"]);
      var mobileNavRef = _react.default.useRef(null);
      var collapse = (0, _theme.useTheme)().collapse;
      var styles = collapse.styles;
      var base = styles.base;
      animate = animate !== null && animate !== void 0 ? animate : {};
      className = className !== null && className !== void 0 ? className : "";
      var classes = (0, _tailwindMerge.twMerge)((0, _classnames.default)((0, _objectsToString.default)(base)), className);
      var mainAnimation = { unmount: { height: "0px", transition: { duration: 0.3, times: [0.4, 0, 0.2, 1] } }, mount: { height: "auto", transition: { duration: 0.3, times: [0.4, 0, 0.2, 1] } } };
      var appliedAnimation = (0, _deepmerge.default)(mainAnimation, animate);
      var NewAnimatePresence = _framerMotion.AnimatePresence;
      var mergedRef = (0, _react1.useMergeRefs)([ref, mobileNavRef]);
      return _react.default.createElement(_framerMotion.LazyMotion, { features: _framerMotion.domAnimation }, _react.default.createElement(NewAnimatePresence, null, _react.default.createElement(_framerMotion.m.div, _extends2({}, rest, { ref: mergedRef, className: classes, initial: "unmount", exit: "unmount", animate: open ? "mount" : "unmount", variants: appliedAnimation }), children)));
    });
    Collapse.displayName = "MaterialTailwind.Collapse";
    Collapse.propTypes = { open: _collapse.propTypesOpen, animate: _collapse.propTypesAnimate, className: _collapse.propTypesClassName, children: _collapse.propTypesChildren };
    var _default = Collapse;
  }
});

// node_modules/@material-tailwind/react/types/components/list.js
var require_list = __commonJS({
  "node_modules/@material-tailwind/react/types/components/list.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function _export(target, all) {
      for (var name in all) Object.defineProperty(target, name, { enumerable: true, get: all[name] });
    }
    _export(exports, { propTypesClassName: function() {
      return propTypesClassName;
    }, propTypesDisabled: function() {
      return propTypesDisabled;
    }, propTypesSelected: function() {
      return propTypesSelected;
    }, propTypesRipple: function() {
      return propTypesRipple;
    }, propTypesChildren: function() {
      return propTypesChildren;
    } });
    var _propTypes = _interopRequireDefault(require_prop_types());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var propTypesClassName = _propTypes.default.string;
    var propTypesDisabled = _propTypes.default.bool;
    var propTypesSelected = _propTypes.default.bool;
    var propTypesRipple = _propTypes.default.bool;
    var propTypesChildren = _propTypes.default.node.isRequired;
  }
});

// node_modules/@material-tailwind/react/components/List/ListItemPrefix.js
var require_ListItemPrefix = __commonJS({
  "node_modules/@material-tailwind/react/components/List/ListItemPrefix.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function _export(target, all) {
      for (var name in all) Object.defineProperty(target, name, { enumerable: true, get: all[name] });
    }
    _export(exports, { ListItemPrefix: function() {
      return ListItemPrefix;
    }, default: function() {
      return _default;
    } });
    var _react = _interopRequireDefault(require_react());
    var _theme = require_theme2();
    var _classnames = _interopRequireDefault(require_classnames());
    var _tailwindMerge = require_dist();
    var _objectsToString = _interopRequireDefault(require_objectsToString());
    var _list = require_list();
    function _extends2() {
      _extends2 = Object.assign || function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends2.apply(this, arguments);
    }
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _objectWithoutProperties(source, excluded) {
      if (source == null) return {};
      var target = _objectWithoutPropertiesLoose(source, excluded);
      var key, i;
      if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for (i = 0; i < sourceSymbolKeys.length; i++) {
          key = sourceSymbolKeys[i];
          if (excluded.indexOf(key) >= 0) continue;
          if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
          target[key] = source[key];
        }
      }
      return target;
    }
    function _objectWithoutPropertiesLoose(source, excluded) {
      if (source == null) return {};
      var target = {};
      var sourceKeys = Object.keys(source);
      var key, i;
      for (i = 0; i < sourceKeys.length; i++) {
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
      }
      return target;
    }
    var ListItemPrefix = _react.default.forwardRef(function(_param, ref) {
      var className = _param.className, children = _param.children, rest = _objectWithoutProperties(_param, ["className", "children"]);
      var list = (0, _theme.useTheme)().list;
      var base = list.styles.base;
      var listItemPrefixClasses = (0, _tailwindMerge.twMerge)((0, _classnames.default)((0, _objectsToString.default)(base.itemPrefix)), className);
      return _react.default.createElement("div", _extends2({}, rest, { ref, className: listItemPrefixClasses }), children);
    });
    ListItemPrefix.propTypes = { className: _list.propTypesClassName, children: _list.propTypesChildren };
    ListItemPrefix.displayName = "MaterialTailwind.ListItemPrefix";
    var _default = ListItemPrefix;
  }
});

// node_modules/@material-tailwind/react/components/List/ListItemSuffix.js
var require_ListItemSuffix = __commonJS({
  "node_modules/@material-tailwind/react/components/List/ListItemSuffix.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function _export(target, all) {
      for (var name in all) Object.defineProperty(target, name, { enumerable: true, get: all[name] });
    }
    _export(exports, { ListItemSuffix: function() {
      return ListItemSuffix;
    }, default: function() {
      return _default;
    } });
    var _react = _interopRequireDefault(require_react());
    var _theme = require_theme2();
    var _classnames = _interopRequireDefault(require_classnames());
    var _tailwindMerge = require_dist();
    var _objectsToString = _interopRequireDefault(require_objectsToString());
    var _list = require_list();
    function _extends2() {
      _extends2 = Object.assign || function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends2.apply(this, arguments);
    }
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _objectWithoutProperties(source, excluded) {
      if (source == null) return {};
      var target = _objectWithoutPropertiesLoose(source, excluded);
      var key, i;
      if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for (i = 0; i < sourceSymbolKeys.length; i++) {
          key = sourceSymbolKeys[i];
          if (excluded.indexOf(key) >= 0) continue;
          if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
          target[key] = source[key];
        }
      }
      return target;
    }
    function _objectWithoutPropertiesLoose(source, excluded) {
      if (source == null) return {};
      var target = {};
      var sourceKeys = Object.keys(source);
      var key, i;
      for (i = 0; i < sourceKeys.length; i++) {
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
      }
      return target;
    }
    var ListItemSuffix = _react.default.forwardRef(function(_param, ref) {
      var className = _param.className, children = _param.children, rest = _objectWithoutProperties(_param, ["className", "children"]);
      var list = (0, _theme.useTheme)().list;
      var base = list.styles.base;
      var listItemSuffixClasses = (0, _tailwindMerge.twMerge)((0, _classnames.default)((0, _objectsToString.default)(base.itemSuffix)), className);
      return _react.default.createElement("div", _extends2({}, rest, { ref, className: listItemSuffixClasses }), children);
    });
    ListItemSuffix.propTypes = { className: _list.propTypesClassName, children: _list.propTypesChildren };
    ListItemSuffix.displayName = "MaterialTailwind.ListItemSuffix";
    var _default = ListItemSuffix;
  }
});

// node_modules/@material-tailwind/react/components/List/ListItem.js
var require_ListItem = __commonJS({
  "node_modules/@material-tailwind/react/components/List/ListItem.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function _export(target, all) {
      for (var name in all) Object.defineProperty(target, name, { enumerable: true, get: all[name] });
    }
    _export(exports, { ListItem: function() {
      return ListItem;
    }, ListItemPrefix: function() {
      return _listItemPrefix.ListItemPrefix;
    }, ListItemSuffix: function() {
      return _listItemSuffix.ListItemSuffix;
    }, default: function() {
      return _default;
    } });
    var _react = _interopRequireDefault(require_react());
    var _theme = require_theme2();
    var _materialRippleEffects = _interopRequireDefault(require_material_ripple_effects());
    var _classnames = _interopRequireDefault(require_classnames());
    var _tailwindMerge = require_dist();
    var _objectsToString = _interopRequireDefault(require_objectsToString());
    var _list = require_list();
    var _listItemPrefix = require_ListItemPrefix();
    var _listItemSuffix = require_ListItemSuffix();
    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function _extends2() {
      _extends2 = Object.assign || function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends2.apply(this, arguments);
    }
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _objectWithoutProperties(source, excluded) {
      if (source == null) return {};
      var target = _objectWithoutPropertiesLoose(source, excluded);
      var key, i;
      if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for (i = 0; i < sourceSymbolKeys.length; i++) {
          key = sourceSymbolKeys[i];
          if (excluded.indexOf(key) >= 0) continue;
          if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
          target[key] = source[key];
        }
      }
      return target;
    }
    function _objectWithoutPropertiesLoose(source, excluded) {
      if (source == null) return {};
      var target = {};
      var sourceKeys = Object.keys(source);
      var key, i;
      for (i = 0; i < sourceKeys.length; i++) {
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
      }
      return target;
    }
    var ListItem = _react.default.forwardRef(function(_param, ref) {
      var className = _param.className, disabled = _param.disabled, selected = _param.selected, ripple = _param.ripple, children = _param.children, rest = _objectWithoutProperties(_param, ["className", "disabled", "selected", "ripple", "children"]);
      var list = (0, _theme.useTheme)().list;
      var defaultProps = list.defaultProps, base = list.styles.base;
      ripple = ripple !== null && ripple !== void 0 ? ripple : defaultProps.ripple;
      var rippleEffect = ripple !== void 0 && new _materialRippleEffects.default();
      var _obj;
      var listItemClasses = (0, _tailwindMerge.twMerge)((0, _classnames.default)((0, _objectsToString.default)(base.item.initial), (_obj = {}, _defineProperty(_obj, (0, _objectsToString.default)(base.item.disabled), disabled), _defineProperty(_obj, (0, _objectsToString.default)(base.item.selected), selected && !disabled), _obj)), className);
      return _react.default.createElement("div", _extends2({}, rest, { ref, role: "button", tabIndex: 0, className: listItemClasses, onMouseDown: function(e) {
        var onMouseDown = rest === null || rest === void 0 ? void 0 : rest.onMouseDown;
        if (ripple) rippleEffect.create(e, "dark");
        return typeof onMouseDown === "function" && onMouseDown(e);
      } }), children);
    });
    ListItem.propTypes = { className: _list.propTypesClassName, selected: _list.propTypesSelected, disabled: _list.propTypesDisabled, ripple: _list.propTypesRipple, children: _list.propTypesChildren };
    ListItem.displayName = "MaterialTailwind.ListItem";
    var _default = Object.assign(ListItem, { Prefix: _listItemPrefix.ListItemPrefix, Suffix: _listItemSuffix.ListItemSuffix });
  }
});

// node_modules/@material-tailwind/react/components/List/index.js
var require_List = __commonJS({
  "node_modules/@material-tailwind/react/components/List/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function _export(target, all) {
      for (var name in all) Object.defineProperty(target, name, { enumerable: true, get: all[name] });
    }
    _export(exports, { List: function() {
      return List;
    }, ListItem: function() {
      return _listItem.ListItem;
    }, ListItemPrefix: function() {
      return _listItemPrefix.ListItemPrefix;
    }, ListItemSuffix: function() {
      return _listItemSuffix.ListItemSuffix;
    }, default: function() {
      return _default;
    } });
    var _react = _interopRequireDefault(require_react());
    var _theme = require_theme2();
    var _classnames = _interopRequireDefault(require_classnames());
    var _tailwindMerge = require_dist();
    var _objectsToString = _interopRequireDefault(require_objectsToString());
    var _list = require_list();
    var _listItem = require_ListItem();
    var _listItemPrefix = require_ListItemPrefix();
    var _listItemSuffix = require_ListItemSuffix();
    function _extends2() {
      _extends2 = Object.assign || function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends2.apply(this, arguments);
    }
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _objectWithoutProperties(source, excluded) {
      if (source == null) return {};
      var target = _objectWithoutPropertiesLoose(source, excluded);
      var key, i;
      if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for (i = 0; i < sourceSymbolKeys.length; i++) {
          key = sourceSymbolKeys[i];
          if (excluded.indexOf(key) >= 0) continue;
          if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
          target[key] = source[key];
        }
      }
      return target;
    }
    function _objectWithoutPropertiesLoose(source, excluded) {
      if (source == null) return {};
      var target = {};
      var sourceKeys = Object.keys(source);
      var key, i;
      for (i = 0; i < sourceKeys.length; i++) {
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
      }
      return target;
    }
    var List = _react.default.forwardRef(function(_param, ref) {
      var className = _param.className, children = _param.children, rest = _objectWithoutProperties(_param, ["className", "children"]);
      var list = (0, _theme.useTheme)().list;
      var defaultProps = list.defaultProps, base = list.styles.base;
      className = className !== null && className !== void 0 ? className : defaultProps.className;
      var listClasses = (0, _tailwindMerge.twMerge)((0, _classnames.default)((0, _objectsToString.default)(base.list)), className);
      return _react.default.createElement("nav", _extends2({}, rest, { ref, className: listClasses }), children);
    });
    List.propTypes = { className: _list.propTypesClassName, children: _list.propTypesChildren };
    List.displayName = "MaterialTailwind.List";
    var _default = Object.assign(List, { Item: _listItem.ListItem, ItemPrefix: _listItemPrefix.ListItemPrefix, ItemSuffix: _listItemSuffix.ListItemSuffix });
  }
});

// node_modules/@material-tailwind/react/components/ButtonGroup/index.js
var require_ButtonGroup = __commonJS({
  "node_modules/@material-tailwind/react/components/ButtonGroup/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function _export(target, all) {
      for (var name in all) Object.defineProperty(target, name, { enumerable: true, get: all[name] });
    }
    _export(exports, { ButtonGroup: function() {
      return ButtonGroup;
    }, default: function() {
      return _default;
    } });
    var _react = _interopRequireDefault(require_react());
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _classnames = _interopRequireDefault(require_classnames());
    var _tailwindMerge = require_dist();
    var _findMatch = _interopRequireDefault(require_findMatch());
    var _objectsToString = _interopRequireDefault(require_objectsToString());
    var _theme = require_theme2();
    var _button = require_button();
    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function _extends2() {
      _extends2 = Object.assign || function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends2.apply(this, arguments);
    }
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _objectWithoutProperties(source, excluded) {
      if (source == null) return {};
      var target = _objectWithoutPropertiesLoose(source, excluded);
      var key, i;
      if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for (i = 0; i < sourceSymbolKeys.length; i++) {
          key = sourceSymbolKeys[i];
          if (excluded.indexOf(key) >= 0) continue;
          if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
          target[key] = source[key];
        }
      }
      return target;
    }
    function _objectWithoutPropertiesLoose(source, excluded) {
      if (source == null) return {};
      var target = {};
      var sourceKeys = Object.keys(source);
      var key, i;
      for (i = 0; i < sourceKeys.length; i++) {
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
      }
      return target;
    }
    var ButtonGroup = _react.default.forwardRef(function(_param, ref) {
      var variant = _param.variant, size3 = _param.size, color = _param.color, fullWidth = _param.fullWidth, ripple = _param.ripple, className = _param.className, children = _param.children, rest = _objectWithoutProperties(_param, ["variant", "size", "color", "fullWidth", "ripple", "className", "children"]);
      var buttonGroup = (0, _theme.useTheme)().buttonGroup;
      var defaultProps = buttonGroup.defaultProps, styles = buttonGroup.styles, valid = buttonGroup.valid;
      var base = styles.base, dividerColor = styles.dividerColor;
      variant = variant !== null && variant !== void 0 ? variant : defaultProps.variant;
      size3 = size3 !== null && size3 !== void 0 ? size3 : defaultProps.size;
      color = color !== null && color !== void 0 ? color : defaultProps.color;
      ripple = ripple !== null && ripple !== void 0 ? ripple : defaultProps.ripple;
      fullWidth = fullWidth !== null && fullWidth !== void 0 ? fullWidth : defaultProps.fullWidth;
      className = className !== null && className !== void 0 ? className : defaultProps.className;
      var _obj;
      var classes = (0, _tailwindMerge.twMerge)((0, _classnames.default)((0, _objectsToString.default)(base.initial), (_obj = {}, _defineProperty(_obj, (0, _objectsToString.default)(base.fullWidth), fullWidth), _defineProperty(_obj, "divide-x", variant !== "outlined"), _defineProperty(_obj, (0, _objectsToString.default)(dividerColor[(0, _findMatch.default)(valid.colors, color, "gray")]), variant !== "outlined"), _obj)), className);
      return _react.default.createElement("div", _extends2({}, rest, { ref, className: classes }), _react.default.Children.map(children, function(child, index3) {
        var _child_props;
        return _react.default.isValidElement(child) && _react.default.cloneElement(child, { variant, size: size3, color, ripple, fullWidth, className: (0, _tailwindMerge.twMerge)((0, _classnames.default)({ "rounded-r-none": index3 !== _react.default.Children.count(children) - 1, "border-r-0": index3 !== _react.default.Children.count(children) - 1, "rounded-l-none": index3 !== 0 }), (_child_props = child.props) === null || _child_props === void 0 ? void 0 : _child_props.className) });
      }));
    });
    ButtonGroup.propTypes = { variant: _propTypes.default.oneOf(_button.propTypesVariant), size: _propTypes.default.oneOf(_button.propTypesSize), color: _propTypes.default.oneOf(_button.propTypesColor), fullWidth: _button.propTypesFullWidth, ripple: _button.propTypesRipple, className: _button.propTypesClassName, children: _button.propTypesChildren };
    ButtonGroup.displayName = "MaterialTailwind.ButtonGroup";
    var _default = ButtonGroup;
  }
});

// node_modules/@material-tailwind/react/types/components/carousel.js
var require_carousel = __commonJS({
  "node_modules/@material-tailwind/react/types/components/carousel.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function _export(target, all) {
      for (var name in all) Object.defineProperty(target, name, { enumerable: true, get: all[name] });
    }
    _export(exports, { propTypesClassName: function() {
      return propTypesClassName;
    }, propTypesPrevArrow: function() {
      return propTypesPrevArrow;
    }, propTypesNextArrow: function() {
      return propTypesNextArrow;
    }, propTypesNavigation: function() {
      return propTypesNavigation;
    }, propTypesAutoplay: function() {
      return propTypesAutoplay;
    }, propTypesAutoplayDelay: function() {
      return propTypesAutoplayDelay;
    }, propTypesTransition: function() {
      return propTypesTransition;
    }, propTypesLoop: function() {
      return propTypesLoop;
    }, propTypesChildren: function() {
      return propTypesChildren;
    }, propTypesSlideRef: function() {
      return propTypesSlideRef;
    } });
    var _propTypes = _interopRequireDefault(require_prop_types());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var propTypesClassName = _propTypes.default.string;
    var propTypesPrevArrow = _propTypes.default.func;
    var propTypesNextArrow = _propTypes.default.func;
    var propTypesNavigation = _propTypes.default.func;
    var propTypesAutoplay = _propTypes.default.bool;
    var propTypesAutoplayDelay = _propTypes.default.number;
    var propTypesTransition = _propTypes.default.object;
    var propTypesLoop = _propTypes.default.bool;
    var propTypesChildren = _propTypes.default.node.isRequired;
    var propTypesSlideRef = _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.shape({ current: _propTypes.default.any })]);
  }
});

// node_modules/@material-tailwind/react/components/Carousel/index.js
var require_Carousel = __commonJS({
  "node_modules/@material-tailwind/react/components/Carousel/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function _export(target, all) {
      for (var name in all) Object.defineProperty(target, name, { enumerable: true, get: all[name] });
    }
    _export(exports, { Carousel: function() {
      return Carousel;
    }, default: function() {
      return _default;
    } });
    var _react = _interopRequireDefault(require_react());
    var _framerMotion = require_cjs2();
    var _react1 = (init_floating_ui_react_esm(), __toCommonJS(floating_ui_react_esm_exports));
    var _classnames = _interopRequireDefault(require_classnames());
    var _tailwindMerge = require_dist();
    var _objectsToString = _interopRequireDefault(require_objectsToString());
    var _theme = require_theme2();
    var _carousel = require_carousel();
    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length) len = arr.length;
      for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
      return arr2;
    }
    function _arrayWithHoles(arr) {
      if (Array.isArray(arr)) return arr;
    }
    function _extends2() {
      _extends2 = Object.assign || function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends2.apply(this, arguments);
    }
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _iterableToArrayLimit(arr, i) {
      var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
      if (_i == null) return;
      var _arr = [];
      var _n = true;
      var _d = false;
      var _s, _e;
      try {
        for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);
          if (i && _arr.length === i) break;
        }
      } catch (err) {
        _d = true;
        _e = err;
      } finally {
        try {
          if (!_n && _i["return"] != null) _i["return"]();
        } finally {
          if (_d) throw _e;
        }
      }
      return _arr;
    }
    function _nonIterableRest() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _objectWithoutProperties(source, excluded) {
      if (source == null) return {};
      var target = _objectWithoutPropertiesLoose(source, excluded);
      var key, i;
      if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for (i = 0; i < sourceSymbolKeys.length; i++) {
          key = sourceSymbolKeys[i];
          if (excluded.indexOf(key) >= 0) continue;
          if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
          target[key] = source[key];
        }
      }
      return target;
    }
    function _objectWithoutPropertiesLoose(source, excluded) {
      if (source == null) return {};
      var target = {};
      var sourceKeys = Object.keys(source);
      var key, i;
      for (i = 0; i < sourceKeys.length; i++) {
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
      }
      return target;
    }
    function _slicedToArray(arr, i) {
      return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
    }
    function _unsupportedIterableToArray(o, minLen) {
      if (!o) return;
      if (typeof o === "string") return _arrayLikeToArray(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if (n === "Object" && o.constructor) n = o.constructor.name;
      if (n === "Map" || n === "Set") return Array.from(n);
      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
    }
    var Carousel = _react.default.forwardRef(function(_param, ref) {
      var children = _param.children, prevArrow = _param.prevArrow, nextArrow = _param.nextArrow, navigation = _param.navigation, autoplay = _param.autoplay, autoplayDelay = _param.autoplayDelay, transition = _param.transition, loop = _param.loop, className = _param.className, slideRef = _param.slideRef, rest = _objectWithoutProperties(_param, ["children", "prevArrow", "nextArrow", "navigation", "autoplay", "autoplayDelay", "transition", "loop", "className", "slideRef"]);
      var carousel = (0, _theme.useTheme)().carousel;
      var defaultProps = carousel.defaultProps, base = carousel.styles.base;
      var x = (0, _framerMotion.useMotionValue)(0);
      var containerRef = _react.default.useRef(null);
      var _React_useState = _slicedToArray(_react.default.useState(0), 2), index3 = _React_useState[0], setIndex = _React_useState[1];
      var childrens = _react.default.Children.toArray(children);
      className = className !== null && className !== void 0 ? className : defaultProps.className;
      prevArrow = prevArrow !== null && prevArrow !== void 0 ? prevArrow : defaultProps.prevArrow;
      nextArrow = nextArrow !== null && nextArrow !== void 0 ? nextArrow : defaultProps.nextArrow;
      navigation = navigation !== null && navigation !== void 0 ? navigation : defaultProps.navigation;
      autoplay = autoplay !== null && autoplay !== void 0 ? autoplay : defaultProps.autoplay;
      autoplayDelay = autoplayDelay !== null && autoplayDelay !== void 0 ? autoplayDelay : defaultProps.autoplayDelay;
      transition = transition !== null && transition !== void 0 ? transition : defaultProps.transition;
      loop = loop !== null && loop !== void 0 ? loop : defaultProps.loop;
      var carouselClasses = (0, _tailwindMerge.twMerge)((0, _classnames.default)((0, _objectsToString.default)(base.carousel)), className);
      var slideClasses = (0, _tailwindMerge.twMerge)((0, _classnames.default)((0, _objectsToString.default)(base.slide)));
      var calculateNewX = _react.default.useCallback(function() {
        var _containerRef_current;
        return -index3 * (((_containerRef_current = containerRef.current) === null || _containerRef_current === void 0 ? void 0 : _containerRef_current.clientWidth) || 0);
      }, [index3]);
      var handleNext = _react.default.useCallback(function() {
        var idx = loop ? 0 : index3;
        setIndex(index3 + 1 === childrens.length ? idx : index3 + 1);
      }, [index3, loop, childrens.length]);
      var handlePrev = function() {
        var idx = loop ? childrens.length - 1 : 0;
        setIndex(index3 - 1 < 0 ? idx : index3 - 1);
      };
      _react.default.useEffect(function() {
        var controls = (0, _framerMotion.animate)(x, calculateNewX(), transition);
        return controls.stop;
      }, [calculateNewX, index3, x, transition]);
      _react.default.useEffect(function() {
        window.addEventListener("resize", function() {
          (0, _framerMotion.animate)(x, calculateNewX(), transition);
        });
      }, [calculateNewX, transition, x]);
      _react.default.useEffect(function() {
        if (!autoplay) {
          return;
        }
        var timer = setInterval(function() {
          return handleNext();
        }, autoplayDelay);
        return function() {
          return clearInterval(timer);
        };
      }, [autoplay, handleNext, autoplayDelay]);
      var mergedRefs = (0, _react1.useMergeRefs)([containerRef, ref]);
      return _react.default.createElement("div", _extends2({}, rest, { ref: mergedRefs, className: carouselClasses }), childrens.map(function(child, i) {
        return _react.default.createElement(_framerMotion.LazyMotion, { key: i, features: _framerMotion.domAnimation }, _react.default.createElement(_framerMotion.m.div, { ref: slideRef, className: slideClasses, style: { x, left: "".concat(i * 100, "%"), right: "".concat(i * 100, "%") } }, child));
      }), prevArrow && prevArrow({ loop, handlePrev, activeIndex: index3, firstIndex: index3 === 0 }), nextArrow && nextArrow({ loop, handleNext, activeIndex: index3, lastIndex: index3 === childrens.length - 1 }), navigation && navigation({ setActiveIndex: setIndex, activeIndex: index3, length: childrens.length }));
    });
    Carousel.propTypes = { className: _carousel.propTypesClassName, children: _carousel.propTypesChildren, nextArrow: _carousel.propTypesNextArrow, prevArrow: _carousel.propTypesPrevArrow, navigation: _carousel.propTypesNavigation, autoplay: _carousel.propTypesAutoplay, autoplayDelay: _carousel.propTypesAutoplayDelay, transition: _carousel.propTypesTransition, loop: _carousel.propTypesLoop, slideRef: _carousel.propTypesSlideRef };
    Carousel.displayName = "MaterialTailwind.Carousel";
    var _default = Carousel;
  }
});

// node_modules/@material-tailwind/react/types/components/drawer.js
var require_drawer = __commonJS({
  "node_modules/@material-tailwind/react/types/components/drawer.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function _export(target, all) {
      for (var name in all) Object.defineProperty(target, name, { enumerable: true, get: all[name] });
    }
    _export(exports, { propTypesOpen: function() {
      return propTypesOpen;
    }, propTypesSize: function() {
      return propTypesSize;
    }, propTypesOverlay: function() {
      return propTypesOverlay;
    }, propTypesChildren: function() {
      return propTypesChildren;
    }, propTypesPlacement: function() {
      return propTypesPlacement;
    }, propTypesOverlayProps: function() {
      return propTypesOverlayProps;
    }, propTypesClassName: function() {
      return propTypesClassName;
    }, propTypesOnClose: function() {
      return propTypesOnClose;
    }, propTypesDismiss: function() {
      return propTypesDismiss;
    }, propTypesTransition: function() {
      return propTypesTransition;
    }, propTypesOverlayRef: function() {
      return propTypesOverlayRef;
    } });
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _generic = require_generic();
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var propTypesOpen = _propTypes.default.bool.isRequired;
    var propTypesSize = _propTypes.default.number;
    var propTypesOverlay = _propTypes.default.bool;
    var propTypesChildren = _propTypes.default.node.isRequired;
    var propTypesPlacement = ["top", "right", "bottom", "left"];
    var propTypesOverlayProps = _propTypes.default.object;
    var propTypesClassName = _propTypes.default.string;
    var propTypesOnClose = _propTypes.default.func;
    var propTypesDismiss = _generic.propTypesDismissType;
    var propTypesTransition = _propTypes.default.object;
    var propTypesOverlayRef = _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.shape({ current: _propTypes.default.any })]);
  }
});

// node_modules/@material-tailwind/react/components/Drawer/index.js
var require_Drawer = __commonJS({
  "node_modules/@material-tailwind/react/components/Drawer/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function _export(target, all) {
      for (var name in all) Object.defineProperty(target, name, { enumerable: true, get: all[name] });
    }
    _export(exports, { Drawer: function() {
      return Drawer;
    }, default: function() {
      return _default;
    } });
    var _react = _interopRequireDefault(require_react());
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _framerMotion = require_cjs2();
    var _react1 = (init_floating_ui_react_esm(), __toCommonJS(floating_ui_react_esm_exports));
    var _deepmerge = _interopRequireDefault(require_cjs());
    var _classnames = _interopRequireDefault(require_classnames());
    var _tailwindMerge = require_dist();
    var _objectsToString = _interopRequireDefault(require_objectsToString());
    var _theme = require_theme2();
    var _drawer = require_drawer();
    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function _extends2() {
      _extends2 = Object.assign || function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends2.apply(this, arguments);
    }
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
          ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
            return Object.getOwnPropertyDescriptor(source, sym).enumerable;
          }));
        }
        ownKeys.forEach(function(key) {
          _defineProperty(target, key, source[key]);
        });
      }
      return target;
    }
    function _objectWithoutProperties(source, excluded) {
      if (source == null) return {};
      var target = _objectWithoutPropertiesLoose(source, excluded);
      var key, i;
      if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for (i = 0; i < sourceSymbolKeys.length; i++) {
          key = sourceSymbolKeys[i];
          if (excluded.indexOf(key) >= 0) continue;
          if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
          target[key] = source[key];
        }
      }
      return target;
    }
    function _objectWithoutPropertiesLoose(source, excluded) {
      if (source == null) return {};
      var target = {};
      var sourceKeys = Object.keys(source);
      var key, i;
      for (i = 0; i < sourceKeys.length; i++) {
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
      }
      return target;
    }
    var Drawer = _react.default.forwardRef(function(_param, ref) {
      var open = _param.open, size3 = _param.size, overlay = _param.overlay, children = _param.children, placement = _param.placement, overlayProps = _param.overlayProps, className = _param.className, onClose = _param.onClose, dismiss = _param.dismiss, transition = _param.transition, overlayRef = _param.overlayRef, rest = _objectWithoutProperties(_param, ["open", "size", "overlay", "children", "placement", "overlayProps", "className", "onClose", "dismiss", "transition", "overlayRef"]);
      var drawer = (0, _theme.useTheme)().drawer;
      var defaultProps = drawer.defaultProps, base = drawer.styles.base;
      var constrols = (0, _framerMotion.useAnimation)();
      size3 = size3 !== null && size3 !== void 0 ? size3 : defaultProps.size;
      overlay = overlay !== null && overlay !== void 0 ? overlay : defaultProps.overlay;
      placement = placement !== null && placement !== void 0 ? placement : defaultProps.placement;
      className = className !== null && className !== void 0 ? className : defaultProps.className;
      overlayProps = overlayProps !== null && overlayProps !== void 0 ? overlayProps : defaultProps.overlayProps;
      onClose = onClose !== null && onClose !== void 0 ? onClose : defaultProps.onClose;
      var _merge;
      dismiss = (_merge = (0, _deepmerge.default)(defaultProps.dismiss, dismiss || {})) !== null && _merge !== void 0 ? _merge : defaultProps.dismiss;
      transition = transition !== null && transition !== void 0 ? transition : defaultProps.transition;
      var drawerClasses = (0, _tailwindMerge.twMerge)((0, _classnames.default)((0, _objectsToString.default)(base.drawer), { "top-0 right-0": placement === "right", "bottom-0 left-0": placement === "bottom", "top-0 left-0": placement === "top" || placement === "left" }), className);
      var overlayClasses = (0, _tailwindMerge.twMerge)((0, _classnames.default)((0, _objectsToString.default)(base.overlay)), overlayProps === null || overlayProps === void 0 ? void 0 : overlayProps.className);
      var context = (0, _react1.useFloating)({ open, onOpenChange: onClose }).context;
      var getFloatingProps = (0, _react1.useInteractions)([(0, _react1.useDismiss)(context, dismiss)]).getFloatingProps;
      _react.default.useEffect(function() {
        constrols.start(open ? "open" : "close");
      }, [open, constrols, placement]);
      var drawerAnimation = { open: { x: 0, y: 0 }, close: { x: placement === "left" ? -size3 : placement === "right" ? size3 : 0, y: placement === "top" ? -size3 : placement === "bottom" ? size3 : 0 } };
      var backdropAnimation = { unmount: { opacity: 0, transition: { delay: 0.3 } }, mount: { opacity: 1 } };
      return _react.default.createElement(_react.default.Fragment, null, _react.default.createElement(_framerMotion.LazyMotion, { features: _framerMotion.domAnimation }, _react.default.createElement(_framerMotion.AnimatePresence, null, overlay && open && _react.default.createElement(_framerMotion.m.div, { ref: overlayRef, className: overlayClasses, initial: "unmount", exit: "unmount", animate: open ? "mount" : "unmount", variants: backdropAnimation, transition: { duration: 0.3 } })), _react.default.createElement(_framerMotion.m.div, _extends2({}, getFloatingProps(_objectSpread({ ref }, rest)), { className: drawerClasses, style: { maxWidth: placement === "left" || placement === "right" ? size3 : "100%", maxHeight: placement === "top" || placement === "bottom" ? size3 : "100%", height: placement === "left" || placement === "right" ? "100vh" : "100%" }, initial: "close", animate: constrols, variants: drawerAnimation, transition }), children)));
    });
    Drawer.propTypes = { open: _drawer.propTypesOpen, size: _drawer.propTypesSize, overlay: _drawer.propTypesOverlay, children: _drawer.propTypesChildren, placement: _propTypes.default.oneOf(_drawer.propTypesPlacement), overlayProps: _drawer.propTypesOverlayProps, className: _drawer.propTypesClassName, onClose: _drawer.propTypesOnClose, dismiss: _drawer.propTypesDismiss, transition: _drawer.propTypesTransition, overlayRef: _drawer.propTypesOverlayRef };
    Drawer.displayName = "MaterialTailwind.Drawer";
    var _default = Drawer;
  }
});

// node_modules/@material-tailwind/react/components/Badge/index.js
var require_Badge = __commonJS({
  "node_modules/@material-tailwind/react/components/Badge/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function _export(target, all) {
      for (var name in all) Object.defineProperty(target, name, { enumerable: true, get: all[name] });
    }
    _export(exports, { Badge: function() {
      return Badge;
    }, default: function() {
      return _default;
    } });
    var _react = _interopRequireDefault(require_react());
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _deepmerge = _interopRequireDefault(require_cjs());
    var _classnames = _interopRequireDefault(require_classnames());
    var _tailwindMerge = require_dist();
    var _findMatch = _interopRequireDefault(require_findMatch());
    var _objectsToString = _interopRequireDefault(require_objectsToString());
    var _theme = require_theme2();
    var _badge = require_badge();
    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function _extends2() {
      _extends2 = Object.assign || function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends2.apply(this, arguments);
    }
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _objectWithoutProperties(source, excluded) {
      if (source == null) return {};
      var target = _objectWithoutPropertiesLoose(source, excluded);
      var key, i;
      if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for (i = 0; i < sourceSymbolKeys.length; i++) {
          key = sourceSymbolKeys[i];
          if (excluded.indexOf(key) >= 0) continue;
          if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
          target[key] = source[key];
        }
      }
      return target;
    }
    function _objectWithoutPropertiesLoose(source, excluded) {
      if (source == null) return {};
      var target = {};
      var sourceKeys = Object.keys(source);
      var key, i;
      for (i = 0; i < sourceKeys.length; i++) {
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
      }
      return target;
    }
    var Badge = _react.default.forwardRef(function(_param, ref) {
      var color = _param.color, invisible = _param.invisible, withBorder = _param.withBorder, overlap = _param.overlap, placement = _param.placement, className = _param.className, content = _param.content, children = _param.children, containerProps = _param.containerProps, containerRef = _param.containerRef, rest = _objectWithoutProperties(_param, ["color", "invisible", "withBorder", "overlap", "placement", "className", "content", "children", "containerProps", "containerRef"]);
      var badge = (0, _theme.useTheme)().badge;
      var valid = badge.valid, defaultProps = badge.defaultProps, styles = badge.styles;
      var base = styles.base, placements2 = styles.placements, colors = styles.colors;
      color = color !== null && color !== void 0 ? color : defaultProps.color;
      invisible = invisible !== null && invisible !== void 0 ? invisible : defaultProps.invisible;
      withBorder = withBorder !== null && withBorder !== void 0 ? withBorder : defaultProps.withBorder;
      overlap = overlap !== null && overlap !== void 0 ? overlap : defaultProps.overlap;
      placement = placement !== null && placement !== void 0 ? placement : defaultProps.placement;
      var _classnames1;
      className = (_classnames1 = (0, _classnames.default)(className, defaultProps.className)) !== null && _classnames1 !== void 0 ? _classnames1 : defaultProps.className;
      var _merge;
      containerProps = (_merge = (0, _deepmerge.default)(containerProps, defaultProps.containerProps || {})) !== null && _merge !== void 0 ? _merge : defaultProps.containerProps;
      var badgeInitialClasses = (0, _objectsToString.default)(base.badge.initial);
      var badgeWithBorderClasses = (0, _objectsToString.default)(base.badge.withBorder);
      var badgeWithContentClasses = (0, _objectsToString.default)(base.badge.withContent);
      var badgeColorClasses = (0, _objectsToString.default)(colors[(0, _findMatch.default)(valid.colors, color, "red")]);
      var badgePlacementClasses = (0, _objectsToString.default)(placements2[(0, _findMatch.default)(valid.placements, placement, "top-end")][(0, _findMatch.default)(valid.overlaps, overlap, "square")]);
      var _obj;
      var badgeClasses = (0, _tailwindMerge.twMerge)((0, _classnames.default)(badgeInitialClasses, badgePlacementClasses, badgeColorClasses, (_obj = {}, _defineProperty(_obj, badgeWithBorderClasses, withBorder), _defineProperty(_obj, badgeWithContentClasses, content), _obj)), className);
      var badgeContainerClasses = (0, _tailwindMerge.twMerge)((0, _classnames.default)((0, _objectsToString.default)(base.container), containerProps === null || containerProps === void 0 ? void 0 : containerProps.className));
      return _react.default.createElement("div", _extends2({ ref: containerRef }, containerProps, { className: badgeContainerClasses }), children, !invisible && _react.default.createElement("span", _extends2({}, rest, { ref, className: badgeClasses }), content));
    });
    Badge.propTypes = { color: _propTypes.default.oneOf(_badge.propTypesColor), invisible: _badge.propTypesInvisible, withBorder: _badge.propTypesWithBorder, overlap: _propTypes.default.oneOf(_badge.propTypesOverlap), className: _badge.propTypesClassName, content: _badge.propTypesContent, children: _badge.propTypesChildren, placement: _propTypes.default.oneOf(_badge.propTypesPlacement), containerProps: _badge.propTypesContainerProps, containerRef: _badge.propTypesContainerRef };
    Badge.displayName = "MaterialTailwind.Badge";
    var _default = Badge;
  }
});

// node_modules/@material-tailwind/react/components/Rating/index.js
var require_Rating = __commonJS({
  "node_modules/@material-tailwind/react/components/Rating/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function _export(target, all) {
      for (var name in all) Object.defineProperty(target, name, { enumerable: true, get: all[name] });
    }
    _export(exports, { Rating: function() {
      return Rating;
    }, default: function() {
      return _default;
    } });
    var _react = _interopRequireDefault(require_react());
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _classnames = _interopRequireDefault(require_classnames());
    var _tailwindMerge = require_dist();
    var _findMatch = _interopRequireDefault(require_findMatch());
    var _objectsToString = _interopRequireDefault(require_objectsToString());
    var _theme = require_theme2();
    var _rating = require_rating();
    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length) len = arr.length;
      for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
      return arr2;
    }
    function _arrayWithHoles(arr) {
      if (Array.isArray(arr)) return arr;
    }
    function _arrayWithoutHoles(arr) {
      if (Array.isArray(arr)) return _arrayLikeToArray(arr);
    }
    function _extends2() {
      _extends2 = Object.assign || function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends2.apply(this, arguments);
    }
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _iterableToArray(iter) {
      if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
    }
    function _iterableToArrayLimit(arr, i) {
      var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
      if (_i == null) return;
      var _arr = [];
      var _n = true;
      var _d = false;
      var _s, _e;
      try {
        for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);
          if (i && _arr.length === i) break;
        }
      } catch (err) {
        _d = true;
        _e = err;
      } finally {
        try {
          if (!_n && _i["return"] != null) _i["return"]();
        } finally {
          if (_d) throw _e;
        }
      }
      return _arr;
    }
    function _nonIterableRest() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _nonIterableSpread() {
      throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _objectWithoutProperties(source, excluded) {
      if (source == null) return {};
      var target = _objectWithoutPropertiesLoose(source, excluded);
      var key, i;
      if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for (i = 0; i < sourceSymbolKeys.length; i++) {
          key = sourceSymbolKeys[i];
          if (excluded.indexOf(key) >= 0) continue;
          if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
          target[key] = source[key];
        }
      }
      return target;
    }
    function _objectWithoutPropertiesLoose(source, excluded) {
      if (source == null) return {};
      var target = {};
      var sourceKeys = Object.keys(source);
      var key, i;
      for (i = 0; i < sourceKeys.length; i++) {
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
      }
      return target;
    }
    function _slicedToArray(arr, i) {
      return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
    }
    function _toConsumableArray(arr) {
      return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
    }
    function _unsupportedIterableToArray(o, minLen) {
      if (!o) return;
      if (typeof o === "string") return _arrayLikeToArray(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if (n === "Object" && o.constructor) n = o.constructor.name;
      if (n === "Map" || n === "Set") return Array.from(n);
      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
    }
    var Rating = _react.default.forwardRef(function(_param, ref) {
      var count2 = _param.count, value = _param.value, ratedIcon = _param.ratedIcon, unratedIcon = _param.unratedIcon, ratedColor = _param.ratedColor, unratedColor = _param.unratedColor, className = _param.className, onChange = _param.onChange, readonly = _param.readonly, rest = _objectWithoutProperties(_param, ["count", "value", "ratedIcon", "unratedIcon", "ratedColor", "unratedColor", "className", "onChange", "readonly"]);
      var _ratedIconInstance_props, _unratedIconInstance_props;
      var rating = (0, _theme.useTheme)().rating;
      var valid = rating.valid, defaultProps = rating.defaultProps, styles = rating.styles;
      var base = styles.base, colors = styles.colors;
      count2 = count2 !== null && count2 !== void 0 ? count2 : defaultProps.count;
      value = value !== null && value !== void 0 ? value : defaultProps.value;
      ratedIcon = ratedIcon !== null && ratedIcon !== void 0 ? ratedIcon : defaultProps.ratedIcon;
      ratedIcon = ratedIcon !== null && ratedIcon !== void 0 ? ratedIcon : defaultProps.ratedIcon;
      unratedIcon = unratedIcon !== null && unratedIcon !== void 0 ? unratedIcon : defaultProps.unratedIcon;
      ratedColor = ratedColor !== null && ratedColor !== void 0 ? ratedColor : defaultProps.ratedColor;
      unratedColor = unratedColor !== null && unratedColor !== void 0 ? unratedColor : defaultProps.unratedColor;
      className = className !== null && className !== void 0 ? className : defaultProps.className;
      onChange = onChange !== null && onChange !== void 0 ? onChange : defaultProps.onChange;
      readonly = readonly !== null && readonly !== void 0 ? readonly : defaultProps.readonly;
      var _React_useState = _slicedToArray(_react.default.useState(function() {
        return _toConsumableArray(Array(value).fill("rated")).concat(_toConsumableArray(Array(count2 - value).fill("un_rated")));
      }), 2), ratingValue = _React_useState[0], setRatingValue = _React_useState[1];
      var _React_useState1 = _slicedToArray(_react.default.useState(function() {
        return _toConsumableArray(Array(count2).fill("un_rated"));
      }), 2), ratingOnHover = _React_useState1[0], setRatingOnHover = _React_useState1[1];
      var _React_useState2 = _slicedToArray(_react.default.useState(false), 2), isHover = _React_useState2[0], setIsHover = _React_useState2[1];
      var ratedColorClasses = (0, _objectsToString.default)(colors[(0, _findMatch.default)(valid.colors, ratedColor, "yellow")]);
      var unratedColorClasses = (0, _objectsToString.default)(colors[(0, _findMatch.default)(valid.colors, unratedColor, "blue-gray")]);
      var ratingClasses = (0, _tailwindMerge.twMerge)((0, _classnames.default)((0, _objectsToString.default)(base.rating), className));
      var ratingIconClasses = (0, _objectsToString.default)(base.icon);
      var ratedIconInstance = ratedIcon;
      var unratedIconInstance = unratedIcon;
      var customRatedIcon = _react.default.isValidElement(ratedIcon) && _react.default.cloneElement(ratedIconInstance, { className: (0, _tailwindMerge.twMerge)((0, _classnames.default)(ratingIconClasses, ratedColorClasses, ratedIconInstance === null || ratedIconInstance === void 0 ? void 0 : (_ratedIconInstance_props = ratedIconInstance.props) === null || _ratedIconInstance_props === void 0 ? void 0 : _ratedIconInstance_props.className)) });
      var customUnratedIcon = _react.default.isValidElement(ratedIcon) && _react.default.cloneElement(unratedIconInstance, { className: (0, _tailwindMerge.twMerge)((0, _classnames.default)(ratingIconClasses, unratedColorClasses, unratedIconInstance === null || unratedIconInstance === void 0 ? void 0 : (_unratedIconInstance_props = unratedIconInstance.props) === null || _unratedIconInstance_props === void 0 ? void 0 : _unratedIconInstance_props.className)) });
      var ratedIconEl = !_react.default.isValidElement(ratedIcon) && _react.default.createElement(ratedIcon, { className: (0, _tailwindMerge.twMerge)((0, _classnames.default)(ratingIconClasses, ratedColorClasses)) });
      var unratedIconEl = !_react.default.isValidElement(ratedIcon) && _react.default.createElement(unratedIcon, { className: (0, _tailwindMerge.twMerge)((0, _classnames.default)(ratingIconClasses, unratedColorClasses)) });
      var renderRating = function(data) {
        return data.map(function(el, index3) {
          return _react.default.createElement("span", { key: index3, onClick: function() {
            if (readonly) return;
            var nextRating = ratingValue.map(function(el2, i) {
              return i <= index3 ? "rated" : "un_rated";
            });
            setRatingValue(nextRating);
            onChange && typeof onChange === "function" && onChange(nextRating.filter(function(el2) {
              return el2 === "rated";
            }).length);
          }, onMouseEnter: function() {
            if (readonly) return;
            var nextRating = ratingOnHover.map(function(el2, i) {
              return i <= index3 ? "rated" : "un_rated";
            });
            setIsHover(true);
            setRatingOnHover(nextRating);
          }, onMouseLeave: function() {
            return !readonly && setIsHover(false);
          } }, _react.default.isValidElement(el === "rated" ? ratedIcon : unratedIcon) ? el === "rated" ? customRatedIcon : customUnratedIcon : el === "rated" ? ratedIconEl : unratedIconEl);
        });
      };
      return _react.default.createElement("div", _extends2({}, rest, { ref, className: ratingClasses }), isHover ? renderRating(ratingOnHover) : renderRating(ratingValue));
    });
    Rating.propTypes = { count: _rating.propTypesCount, value: _rating.propTypesValue, ratedIcon: _rating.propTypesRatedIcon, unratedIcon: _rating.propTypesUnratedIcon, ratedColor: _propTypes.default.oneOf(_rating.propTypesColor), unratedColor: _propTypes.default.oneOf(_rating.propTypesColor), className: _rating.propTypesClassName, onChange: _rating.propTypesOnChange, readonly: _rating.propTypesReadonly };
    Rating.displayName = "MaterialTailwind.Rating";
    var _default = Rating;
  }
});

// node_modules/@material-tailwind/react/components/Slider/index.js
var require_Slider = __commonJS({
  "node_modules/@material-tailwind/react/components/Slider/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function _export(target, all) {
      for (var name in all) Object.defineProperty(target, name, { enumerable: true, get: all[name] });
    }
    _export(exports, { Slider: function() {
      return Slider;
    }, default: function() {
      return _default;
    } });
    var _react = _interopRequireDefault(require_react());
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _deepmerge = _interopRequireDefault(require_cjs());
    var _classnames = _interopRequireDefault(require_classnames());
    var _tailwindMerge = require_dist();
    var _findMatch = _interopRequireDefault(require_findMatch());
    var _objectsToString = _interopRequireDefault(require_objectsToString());
    var _theme = require_theme2();
    var _slider = require_slider();
    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length) len = arr.length;
      for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
      return arr2;
    }
    function _arrayWithHoles(arr) {
      if (Array.isArray(arr)) return arr;
    }
    function _extends2() {
      _extends2 = Object.assign || function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends2.apply(this, arguments);
    }
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _iterableToArrayLimit(arr, i) {
      var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
      if (_i == null) return;
      var _arr = [];
      var _n = true;
      var _d = false;
      var _s, _e;
      try {
        for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);
          if (i && _arr.length === i) break;
        }
      } catch (err) {
        _d = true;
        _e = err;
      } finally {
        try {
          if (!_n && _i["return"] != null) _i["return"]();
        } finally {
          if (_d) throw _e;
        }
      }
      return _arr;
    }
    function _nonIterableRest() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _objectWithoutProperties(source, excluded) {
      if (source == null) return {};
      var target = _objectWithoutPropertiesLoose(source, excluded);
      var key, i;
      if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for (i = 0; i < sourceSymbolKeys.length; i++) {
          key = sourceSymbolKeys[i];
          if (excluded.indexOf(key) >= 0) continue;
          if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
          target[key] = source[key];
        }
      }
      return target;
    }
    function _objectWithoutPropertiesLoose(source, excluded) {
      if (source == null) return {};
      var target = {};
      var sourceKeys = Object.keys(source);
      var key, i;
      for (i = 0; i < sourceKeys.length; i++) {
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
      }
      return target;
    }
    function _slicedToArray(arr, i) {
      return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
    }
    function _unsupportedIterableToArray(o, minLen) {
      if (!o) return;
      if (typeof o === "string") return _arrayLikeToArray(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if (n === "Object" && o.constructor) n = o.constructor.name;
      if (n === "Map" || n === "Set") return Array.from(n);
      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
    }
    var Slider = _react.default.forwardRef(function(_param, ref) {
      var color = _param.color, size3 = _param.size, className = _param.className, trackClassName = _param.trackClassName, thumbClassName = _param.thumbClassName, barClassName = _param.barClassName, value = _param.value, defaultValue = _param.defaultValue, onChange = _param.onChange, min2 = _param.min, max2 = _param.max, step = _param.step, inputRef = _param.inputRef, inputProps = _param.inputProps, rest = _objectWithoutProperties(_param, ["color", "size", "className", "trackClassName", "thumbClassName", "barClassName", "value", "defaultValue", "onChange", "min", "max", "step", "inputRef", "inputProps"]);
      var slider = (0, _theme.useTheme)().slider;
      var valid = slider.valid, defaultProps = slider.defaultProps, styles = slider.styles;
      var base = styles.base, sizes = styles.sizes, colors = styles.colors;
      var _React_useState = _slicedToArray(_react.default.useState(defaultValue || 0), 2), innerValue = _React_useState[0], setInnerValue = _React_useState[1];
      _react.default.useMemo(function() {
        if (defaultValue) setInnerValue(defaultValue);
      }, [defaultValue]);
      color = color !== null && color !== void 0 ? color : defaultProps.color;
      size3 = size3 !== null && size3 !== void 0 ? size3 : defaultProps.size;
      min2 = min2 !== null && min2 !== void 0 ? min2 : defaultProps.min;
      max2 = max2 !== null && max2 !== void 0 ? max2 : defaultProps.max;
      step = step !== null && step !== void 0 ? step : defaultProps.step;
      var _classnames1;
      className = (_classnames1 = (0, _classnames.default)(defaultProps.className, className)) !== null && _classnames1 !== void 0 ? _classnames1 : defaultProps.className;
      var _classnames2;
      thumbClassName = (_classnames2 = (0, _classnames.default)(defaultProps.thumbClassName, thumbClassName)) !== null && _classnames2 !== void 0 ? _classnames2 : defaultProps.thumbClassName;
      var _classnames3;
      trackClassName = (_classnames3 = (0, _classnames.default)(defaultProps.trackClassName, trackClassName)) !== null && _classnames3 !== void 0 ? _classnames3 : defaultProps.trackClassName;
      var _classnames4;
      barClassName = (_classnames4 = (0, _classnames.default)(defaultProps.barClassName, barClassName)) !== null && _classnames4 !== void 0 ? _classnames4 : defaultProps.barClassName;
      var _merge;
      inputProps = (_merge = (0, _deepmerge.default)(inputProps, (defaultProps === null || defaultProps === void 0 ? void 0 : defaultProps.inputProps) || {})) !== null && _merge !== void 0 ? _merge : defaultProps.inputProps;
      var sliderContainerClasses = (0, _tailwindMerge.twMerge)((0, _classnames.default)((0, _objectsToString.default)(base.container), (0, _objectsToString.default)(colors[(0, _findMatch.default)(valid.colors, color, "gray")]), (0, _objectsToString.default)(sizes[(0, _findMatch.default)(valid.sizes, size3, "md")]["container"]), className));
      var sliderBarClasses = (0, _tailwindMerge.twMerge)((0, _classnames.default)((0, _objectsToString.default)(base.bar), barClassName));
      var sliderTrackClasses = (0, _classnames.default)((0, _objectsToString.default)(base.track), (0, _objectsToString.default)(sizes[(0, _findMatch.default)(valid.sizes, size3, "md")]["track"]));
      var sliderThumbClasses = (0, _classnames.default)((0, _objectsToString.default)(base.thumb), (0, _objectsToString.default)(sizes[(0, _findMatch.default)(valid.sizes, size3, "md")]["thumb"]));
      var sliderClasses = (0, _classnames.default)((0, _objectsToString.default)(base.slider), (0, _tailwindMerge.twMerge)(sliderTrackClasses, trackClassName), (0, _tailwindMerge.twMerge)(sliderThumbClasses, thumbClassName));
      return _react.default.createElement("div", _extends2({}, rest, { ref, className: sliderContainerClasses }), _react.default.createElement("label", { className: sliderBarClasses, style: { width: "".concat(value || innerValue, "%") } }), _react.default.createElement("input", _extends2({ ref: inputRef, type: "range", max: max2, min: min2, step, className: sliderClasses }, value ? { value } : null, { defaultValue, onChange: function(e) {
        return onChange ? onChange(e) : setInnerValue(Number(e.target.value));
      } })));
    });
    Slider.propTypes = { color: _propTypes.default.oneOf(_slider.propTypesColor), size: _propTypes.default.oneOf(_slider.propTypesSize), className: _slider.propTypesClassName, trackClassName: _slider.propTypesTrackClassName, thumbClassName: _slider.propTypesThumbClassName, barClassName: _slider.propTypesBarClassName, defaultValue: _slider.propTypesDefaultValue, value: _slider.propTypesValue, onChange: _slider.propTypesOnChange, min: _slider.propTypesMin, max: _slider.propTypesMax, step: _slider.propTypesStep, inputRef: _slider.propTypesInputRef, inputProps: _slider.propTypesInputProps };
    Slider.displayName = "MaterialTailwind.Slider";
    var _default = Slider;
  }
});

// node_modules/@material-tailwind/react/components/Timeline/TimelineItem.js
var require_TimelineItem = __commonJS({
  "node_modules/@material-tailwind/react/components/Timeline/TimelineItem.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function _export(target, all) {
      for (var name in all) Object.defineProperty(target, name, { enumerable: true, get: all[name] });
    }
    _export(exports, { useTimelineItem: function() {
      return useTimelineItem;
    }, TimelineItem: function() {
      return TimelineItem;
    }, default: function() {
      return _default;
    } });
    var _react = _interopRequireDefault(require_react());
    var _tailwindMerge = require_dist();
    var _objectsToString = _interopRequireDefault(require_objectsToString());
    var _theme = require_theme2();
    var _timeline = require_timeline();
    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length) len = arr.length;
      for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
      return arr2;
    }
    function _arrayWithHoles(arr) {
      if (Array.isArray(arr)) return arr;
    }
    function _extends2() {
      _extends2 = Object.assign || function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends2.apply(this, arguments);
    }
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _iterableToArrayLimit(arr, i) {
      var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
      if (_i == null) return;
      var _arr = [];
      var _n = true;
      var _d = false;
      var _s, _e;
      try {
        for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);
          if (i && _arr.length === i) break;
        }
      } catch (err) {
        _d = true;
        _e = err;
      } finally {
        try {
          if (!_n && _i["return"] != null) _i["return"]();
        } finally {
          if (_d) throw _e;
        }
      }
      return _arr;
    }
    function _nonIterableRest() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _objectWithoutProperties(source, excluded) {
      if (source == null) return {};
      var target = _objectWithoutPropertiesLoose(source, excluded);
      var key, i;
      if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for (i = 0; i < sourceSymbolKeys.length; i++) {
          key = sourceSymbolKeys[i];
          if (excluded.indexOf(key) >= 0) continue;
          if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
          target[key] = source[key];
        }
      }
      return target;
    }
    function _objectWithoutPropertiesLoose(source, excluded) {
      if (source == null) return {};
      var target = {};
      var sourceKeys = Object.keys(source);
      var key, i;
      for (i = 0; i < sourceKeys.length; i++) {
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
      }
      return target;
    }
    function _slicedToArray(arr, i) {
      return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
    }
    function _unsupportedIterableToArray(o, minLen) {
      if (!o) return;
      if (typeof o === "string") return _arrayLikeToArray(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if (n === "Object" && o.constructor) n = o.constructor.name;
      if (n === "Map" || n === "Set") return Array.from(n);
      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
    }
    var TimelineItemContext = _react.default.createContext(0);
    TimelineItemContext.displayName = "MaterialTailwind.TimelineItemContext";
    function useTimelineItem() {
      var context = _react.default.useContext(TimelineItemContext);
      if (!context) {
        throw new Error("useTimelineItemContext() must be used within a TimelineItem. It happens when you use TimelineIcon, TimelineConnector or TimelineBody components outside the TimelineItem component.");
      }
      return context;
    }
    var TimelineItem = _react.default.forwardRef(function(_param, ref) {
      var className = _param.className, children = _param.children, rest = _objectWithoutProperties(_param, ["className", "children"]);
      var timelineItem = (0, _theme.useTheme)().timelineItem;
      var styles = timelineItem.styles;
      var base = styles.base;
      var _React_useState = _slicedToArray(_react.default.useState(0), 2), width = _React_useState[0], setWidth = _React_useState[1];
      var contextValue = _react.default.useMemo(function() {
        return [width, setWidth];
      }, [width, setWidth]);
      var classes = (0, _tailwindMerge.twMerge)((0, _objectsToString.default)(base), className);
      return _react.default.createElement(TimelineItemContext.Provider, { value: contextValue }, _react.default.createElement("li", _extends2({ ref }, rest, { className: classes }), children));
    });
    TimelineItem.propTypes = { className: _timeline.propTypeClassName, children: _timeline.propTypeChildren.isRequired };
    TimelineItem.displayName = "MaterialTailwind.TimelineItem";
    var _default = TimelineItem;
  }
});

// node_modules/@material-tailwind/react/components/Timeline/TimelineIcon.js
var require_TimelineIcon = __commonJS({
  "node_modules/@material-tailwind/react/components/Timeline/TimelineIcon.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function _export(target, all) {
      for (var name in all) Object.defineProperty(target, name, { enumerable: true, get: all[name] });
    }
    _export(exports, { TimelineIcon: function() {
      return TimelineIcon;
    }, default: function() {
      return _default;
    } });
    var _react = _interopRequireDefault(require_react());
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _react1 = (init_floating_ui_react_esm(), __toCommonJS(floating_ui_react_esm_exports));
    var _tailwindMerge = require_dist();
    var _findMatch = _interopRequireDefault(require_findMatch());
    var _objectsToString = _interopRequireDefault(require_objectsToString());
    var _theme = require_theme2();
    var _timelineItem = require_TimelineItem();
    var _timeline = require_timeline();
    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length) len = arr.length;
      for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
      return arr2;
    }
    function _arrayWithHoles(arr) {
      if (Array.isArray(arr)) return arr;
    }
    function _extends2() {
      _extends2 = Object.assign || function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends2.apply(this, arguments);
    }
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _iterableToArrayLimit(arr, i) {
      var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
      if (_i == null) return;
      var _arr = [];
      var _n = true;
      var _d = false;
      var _s, _e;
      try {
        for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);
          if (i && _arr.length === i) break;
        }
      } catch (err) {
        _d = true;
        _e = err;
      } finally {
        try {
          if (!_n && _i["return"] != null) _i["return"]();
        } finally {
          if (_d) throw _e;
        }
      }
      return _arr;
    }
    function _nonIterableRest() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _objectWithoutProperties(source, excluded) {
      if (source == null) return {};
      var target = _objectWithoutPropertiesLoose(source, excluded);
      var key, i;
      if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for (i = 0; i < sourceSymbolKeys.length; i++) {
          key = sourceSymbolKeys[i];
          if (excluded.indexOf(key) >= 0) continue;
          if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
          target[key] = source[key];
        }
      }
      return target;
    }
    function _objectWithoutPropertiesLoose(source, excluded) {
      if (source == null) return {};
      var target = {};
      var sourceKeys = Object.keys(source);
      var key, i;
      for (i = 0; i < sourceKeys.length; i++) {
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
      }
      return target;
    }
    function _slicedToArray(arr, i) {
      return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
    }
    function _unsupportedIterableToArray(o, minLen) {
      if (!o) return;
      if (typeof o === "string") return _arrayLikeToArray(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if (n === "Object" && o.constructor) n = o.constructor.name;
      if (n === "Map" || n === "Set") return Array.from(n);
      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
    }
    var TimelineIcon = _react.default.forwardRef(function(_param, ref) {
      var color = _param.color, variant = _param.variant, className = _param.className, children = _param.children, rest = _objectWithoutProperties(_param, ["color", "variant", "className", "children"]);
      var timelineIcon = (0, _theme.useTheme)().timelineIcon;
      var styles = timelineIcon.styles, valid = timelineIcon.valid;
      var base = styles.base, variants = styles.variants;
      var _useTimelineItem = _slicedToArray((0, _timelineItem.useTimelineItem)(), 2), setWidth = _useTimelineItem[1];
      var innerRef = _react.default.useRef(null);
      var mergedRef = (0, _react1.useMergeRefs)([ref, innerRef]);
      _react.default.useEffect(function() {
        var iconElement = innerRef.current;
        if (iconElement) {
          var width = iconElement.getBoundingClientRect().width;
          setWidth(width);
          return function() {
            setWidth(0);
          };
        }
      }, [setWidth, className, children]);
      var variantClasses = (0, _objectsToString.default)(variants[(0, _findMatch.default)(valid.variants, variant, "filled")][(0, _findMatch.default)(valid.colors, color, "gray")]);
      var classes = (0, _tailwindMerge.twMerge)((0, _objectsToString.default)(base), variantClasses, className);
      return _react.default.createElement("span", _extends2({ ref: mergedRef }, rest, { className: classes }), children);
    });
    TimelineIcon.propTypes = { children: _timeline.propTypeChildren, className: _timeline.propTypeClassName, color: _propTypes.default.oneOf(_timeline.propTypeColor), variant: _propTypes.default.oneOf(_timeline.propTypeVariant) };
    TimelineIcon.displayName = "MaterialTailwind.TimelineIcon";
    var _default = TimelineIcon;
  }
});

// node_modules/@material-tailwind/react/components/Timeline/TimelineBody.js
var require_TimelineBody = __commonJS({
  "node_modules/@material-tailwind/react/components/Timeline/TimelineBody.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function _export(target, all) {
      for (var name in all) Object.defineProperty(target, name, { enumerable: true, get: all[name] });
    }
    _export(exports, { TimelineHeader: function() {
      return TimelineHeader;
    }, default: function() {
      return _default;
    } });
    var _react = _interopRequireDefault(require_react());
    var _tailwindMerge = require_dist();
    var _objectsToString = _interopRequireDefault(require_objectsToString());
    var _theme = require_theme2();
    var _timelineItem = require_TimelineItem();
    var _timeline = require_timeline();
    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length) len = arr.length;
      for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
      return arr2;
    }
    function _arrayWithHoles(arr) {
      if (Array.isArray(arr)) return arr;
    }
    function _extends2() {
      _extends2 = Object.assign || function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends2.apply(this, arguments);
    }
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _iterableToArrayLimit(arr, i) {
      var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
      if (_i == null) return;
      var _arr = [];
      var _n = true;
      var _d = false;
      var _s, _e;
      try {
        for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);
          if (i && _arr.length === i) break;
        }
      } catch (err) {
        _d = true;
        _e = err;
      } finally {
        try {
          if (!_n && _i["return"] != null) _i["return"]();
        } finally {
          if (_d) throw _e;
        }
      }
      return _arr;
    }
    function _nonIterableRest() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _objectWithoutProperties(source, excluded) {
      if (source == null) return {};
      var target = _objectWithoutPropertiesLoose(source, excluded);
      var key, i;
      if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for (i = 0; i < sourceSymbolKeys.length; i++) {
          key = sourceSymbolKeys[i];
          if (excluded.indexOf(key) >= 0) continue;
          if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
          target[key] = source[key];
        }
      }
      return target;
    }
    function _objectWithoutPropertiesLoose(source, excluded) {
      if (source == null) return {};
      var target = {};
      var sourceKeys = Object.keys(source);
      var key, i;
      for (i = 0; i < sourceKeys.length; i++) {
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
      }
      return target;
    }
    function _slicedToArray(arr, i) {
      return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
    }
    function _unsupportedIterableToArray(o, minLen) {
      if (!o) return;
      if (typeof o === "string") return _arrayLikeToArray(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if (n === "Object" && o.constructor) n = o.constructor.name;
      if (n === "Map" || n === "Set") return Array.from(n);
      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
    }
    var TimelineHeader = _react.default.forwardRef(function(_param, ref) {
      var className = _param.className, children = _param.children, rest = _objectWithoutProperties(_param, ["className", "children"]);
      var timelineBody = (0, _theme.useTheme)().timelineBody;
      var styles = timelineBody.styles;
      var base = styles.base;
      var _useTimelineItem = _slicedToArray((0, _timelineItem.useTimelineItem)(), 1), width = _useTimelineItem[0];
      var classes = (0, _tailwindMerge.twMerge)((0, _objectsToString.default)(base), className);
      return _react.default.createElement("div", _extends2({}, rest, { ref, className: classes }), _react.default.createElement("span", { className: "pointer-events-none invisible h-full flex-shrink-0", style: { width: "".concat(width, "px") } }), _react.default.createElement("div", null, children));
    });
    TimelineHeader.propTypes = { children: _timeline.propTypeChildren, className: _timeline.propTypeClassName };
    TimelineHeader.displayName = "MaterialTailwind.TimelineHeader";
    var _default = TimelineHeader;
  }
});

// node_modules/@material-tailwind/react/components/Timeline/TimelineHeader.js
var require_TimelineHeader = __commonJS({
  "node_modules/@material-tailwind/react/components/Timeline/TimelineHeader.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function _export(target, all) {
      for (var name in all) Object.defineProperty(target, name, { enumerable: true, get: all[name] });
    }
    _export(exports, { TimelineHeader: function() {
      return TimelineHeader;
    }, default: function() {
      return _default;
    } });
    var _react = _interopRequireDefault(require_react());
    var _tailwindMerge = require_dist();
    var _objectsToString = _interopRequireDefault(require_objectsToString());
    var _theme = require_theme2();
    var _timeline = require_timeline();
    function _extends2() {
      _extends2 = Object.assign || function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends2.apply(this, arguments);
    }
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _objectWithoutProperties(source, excluded) {
      if (source == null) return {};
      var target = _objectWithoutPropertiesLoose(source, excluded);
      var key, i;
      if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for (i = 0; i < sourceSymbolKeys.length; i++) {
          key = sourceSymbolKeys[i];
          if (excluded.indexOf(key) >= 0) continue;
          if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
          target[key] = source[key];
        }
      }
      return target;
    }
    function _objectWithoutPropertiesLoose(source, excluded) {
      if (source == null) return {};
      var target = {};
      var sourceKeys = Object.keys(source);
      var key, i;
      for (i = 0; i < sourceKeys.length; i++) {
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
      }
      return target;
    }
    var TimelineHeader = _react.default.forwardRef(function(_param, ref) {
      var className = _param.className, children = _param.children, rest = _objectWithoutProperties(_param, ["className", "children"]);
      var timelineHeader = (0, _theme.useTheme)().timelineHeader;
      var styles = timelineHeader.styles;
      var base = styles.base;
      var classes = (0, _tailwindMerge.twMerge)((0, _objectsToString.default)(base), className);
      return _react.default.createElement("div", _extends2({}, rest, { ref, className: classes }), children);
    });
    TimelineHeader.propTypes = { children: _timeline.propTypeChildren, className: _timeline.propTypeClassName };
    TimelineHeader.displayName = "MaterialTailwind.TimelineHeader";
    var _default = TimelineHeader;
  }
});

// node_modules/@material-tailwind/react/components/Timeline/TimelineConnector.js
var require_TimelineConnector = __commonJS({
  "node_modules/@material-tailwind/react/components/Timeline/TimelineConnector.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function _export(target, all) {
      for (var name in all) Object.defineProperty(target, name, { enumerable: true, get: all[name] });
    }
    _export(exports, { TimelineConnector: function() {
      return TimelineConnector;
    }, default: function() {
      return _default;
    } });
    var _react = _interopRequireDefault(require_react());
    var _tailwindMerge = require_dist();
    var _objectsToString = _interopRequireDefault(require_objectsToString());
    var _theme = require_theme2();
    var _timelineItem = require_TimelineItem();
    var _timeline = require_timeline();
    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length) len = arr.length;
      for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
      return arr2;
    }
    function _arrayWithHoles(arr) {
      if (Array.isArray(arr)) return arr;
    }
    function _extends2() {
      _extends2 = Object.assign || function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends2.apply(this, arguments);
    }
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _iterableToArrayLimit(arr, i) {
      var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
      if (_i == null) return;
      var _arr = [];
      var _n = true;
      var _d = false;
      var _s, _e;
      try {
        for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);
          if (i && _arr.length === i) break;
        }
      } catch (err) {
        _d = true;
        _e = err;
      } finally {
        try {
          if (!_n && _i["return"] != null) _i["return"]();
        } finally {
          if (_d) throw _e;
        }
      }
      return _arr;
    }
    function _nonIterableRest() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _objectWithoutProperties(source, excluded) {
      if (source == null) return {};
      var target = _objectWithoutPropertiesLoose(source, excluded);
      var key, i;
      if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for (i = 0; i < sourceSymbolKeys.length; i++) {
          key = sourceSymbolKeys[i];
          if (excluded.indexOf(key) >= 0) continue;
          if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
          target[key] = source[key];
        }
      }
      return target;
    }
    function _objectWithoutPropertiesLoose(source, excluded) {
      if (source == null) return {};
      var target = {};
      var sourceKeys = Object.keys(source);
      var key, i;
      for (i = 0; i < sourceKeys.length; i++) {
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
      }
      return target;
    }
    function _slicedToArray(arr, i) {
      return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
    }
    function _unsupportedIterableToArray(o, minLen) {
      if (!o) return;
      if (typeof o === "string") return _arrayLikeToArray(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if (n === "Object" && o.constructor) n = o.constructor.name;
      if (n === "Map" || n === "Set") return Array.from(n);
      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
    }
    var TimelineConnector = _react.default.forwardRef(function(_param, ref) {
      var className = _param.className, children = _param.children, rest = _objectWithoutProperties(_param, ["className", "children"]);
      var _children_props;
      var timelineConnector = (0, _theme.useTheme)().timelineConnector;
      var styles = timelineConnector.styles;
      var base = styles.base;
      var _useTimelineItem = _slicedToArray((0, _timelineItem.useTimelineItem)(), 1), width = _useTimelineItem[0];
      var lineClasses = (0, _objectsToString.default)(base.line);
      var containerClasses = (0, _tailwindMerge.twMerge)((0, _objectsToString.default)(base.container), className);
      return _react.default.createElement("span", _extends2({}, rest, { ref, className: containerClasses, style: { top: "".concat(width, "px"), width: "".concat(width, "px"), opacity: width ? 1 : 0, height: "calc(100% - ".concat(width, "px)") } }), children && _react.default.isValidElement(children) ? _react.default.cloneElement(children, { className: (0, _tailwindMerge.twMerge)(lineClasses, (_children_props = children.props) === null || _children_props === void 0 ? void 0 : _children_props.className) }) : _react.default.createElement("span", { className: lineClasses }));
    });
    TimelineConnector.propTypes = { children: _timeline.propTypeChildren, className: _timeline.propTypeClassName };
    TimelineConnector.displayName = "MaterialTailwind.TimelineConnector";
    var _default = TimelineConnector;
  }
});

// node_modules/@material-tailwind/react/components/Timeline/index.js
var require_Timeline = __commonJS({
  "node_modules/@material-tailwind/react/components/Timeline/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function _export(target, all) {
      for (var name in all) Object.defineProperty(target, name, { enumerable: true, get: all[name] });
    }
    _export(exports, { Timeline: function() {
      return Timeline;
    }, TimelineItem: function() {
      return _timelineItem.default;
    }, TimelineIcon: function() {
      return _timelineIcon.default;
    }, TimelineBody: function() {
      return _timelineBody.default;
    }, TimelineHeader: function() {
      return _timelineHeader.default;
    }, TimelineConnector: function() {
      return _timelineConnector.default;
    }, default: function() {
      return _default;
    } });
    var _react = _interopRequireDefault(require_react());
    var _tailwindMerge = require_dist();
    var _objectsToString = _interopRequireDefault(require_objectsToString());
    var _theme = require_theme2();
    var _timeline = require_timeline();
    var _timelineItem = _interopRequireDefault(require_TimelineItem());
    var _timelineIcon = _interopRequireDefault(require_TimelineIcon());
    var _timelineBody = _interopRequireDefault(require_TimelineBody());
    var _timelineHeader = _interopRequireDefault(require_TimelineHeader());
    var _timelineConnector = _interopRequireDefault(require_TimelineConnector());
    function _extends2() {
      _extends2 = Object.assign || function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends2.apply(this, arguments);
    }
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _objectWithoutProperties(source, excluded) {
      if (source == null) return {};
      var target = _objectWithoutPropertiesLoose(source, excluded);
      var key, i;
      if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for (i = 0; i < sourceSymbolKeys.length; i++) {
          key = sourceSymbolKeys[i];
          if (excluded.indexOf(key) >= 0) continue;
          if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
          target[key] = source[key];
        }
      }
      return target;
    }
    function _objectWithoutPropertiesLoose(source, excluded) {
      if (source == null) return {};
      var target = {};
      var sourceKeys = Object.keys(source);
      var key, i;
      for (i = 0; i < sourceKeys.length; i++) {
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
      }
      return target;
    }
    var Timeline = _react.default.forwardRef(function(_param, ref) {
      var className = _param.className, children = _param.children, rest = _objectWithoutProperties(_param, ["className", "children"]);
      var timeline = (0, _theme.useTheme)().timeline;
      var styles = timeline.styles;
      var base = styles.base;
      var classes = (0, _tailwindMerge.twMerge)((0, _objectsToString.default)(base), className);
      return _react.default.createElement("ul", _extends2({ ref }, rest, { className: classes }), children);
    });
    Timeline.propTypes = { className: _timeline.propTypeClassName, children: _timeline.propTypeChildren };
    Timeline.displayName = "MaterialTailwind.Timeline";
    var _default = Object.assign(Timeline, { Item: _timelineItem.default, Icon: _timelineIcon.default, Header: _timelineHeader.default, Body: _timelineBody.default, Connector: _timelineConnector.default });
  }
});

// node_modules/@material-tailwind/react/types/components/stepper.js
var require_stepper = __commonJS({
  "node_modules/@material-tailwind/react/types/components/stepper.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function _export(target, all) {
      for (var name in all) Object.defineProperty(target, name, { enumerable: true, get: all[name] });
    }
    _export(exports, { propTypesActiveStep: function() {
      return propTypesActiveStep;
    }, propTypesIsLastStep: function() {
      return propTypesIsLastStep;
    }, propTypesIsFirstStep: function() {
      return propTypesIsFirstStep;
    }, propTypesChildren: function() {
      return propTypesChildren;
    }, propTypesClassName: function() {
      return propTypesClassName;
    } });
    var _propTypes = _interopRequireDefault(require_prop_types());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var propTypesActiveStep = _propTypes.default.number;
    var propTypesIsLastStep = _propTypes.default.func;
    var propTypesIsFirstStep = _propTypes.default.func;
    var propTypesChildren = _propTypes.default.node;
    var propTypesClassName = _propTypes.default.string;
  }
});

// node_modules/@material-tailwind/react/components/Stepper/Step.js
var require_Step = __commonJS({
  "node_modules/@material-tailwind/react/components/Stepper/Step.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function _export(target, all) {
      for (var name in all) Object.defineProperty(target, name, { enumerable: true, get: all[name] });
    }
    _export(exports, { Step: function() {
      return Step;
    }, default: function() {
      return _default;
    } });
    var _react = _interopRequireDefault(require_react());
    var _tailwindMerge = require_dist();
    var _objectsToString = _interopRequireDefault(require_objectsToString());
    var _theme = require_theme2();
    var _stepper = require_stepper();
    function _extends2() {
      _extends2 = Object.assign || function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends2.apply(this, arguments);
    }
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _objectWithoutProperties(source, excluded) {
      if (source == null) return {};
      var target = _objectWithoutPropertiesLoose(source, excluded);
      var key, i;
      if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for (i = 0; i < sourceSymbolKeys.length; i++) {
          key = sourceSymbolKeys[i];
          if (excluded.indexOf(key) >= 0) continue;
          if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
          target[key] = source[key];
        }
      }
      return target;
    }
    function _objectWithoutPropertiesLoose(source, excluded) {
      if (source == null) return {};
      var target = {};
      var sourceKeys = Object.keys(source);
      var key, i;
      for (i = 0; i < sourceKeys.length; i++) {
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
      }
      return target;
    }
    var Step = _react.default.forwardRef(function(_param, ref) {
      var className = _param.className, activeClassName = _param.activeClassName, completedClassName = _param.completedClassName, children = _param.children, rest = _objectWithoutProperties(_param, ["className", "activeClassName", "completedClassName", "children"]);
      var step = (0, _theme.useTheme)().step;
      var base = step.styles.base;
      var stepClasses = (0, _tailwindMerge.twMerge)((0, _objectsToString.default)(base.initial), className);
      return _react.default.createElement("div", _extends2({}, rest, { ref, className: stepClasses }), children);
    });
    Step.propTypes = { className: _stepper.propTypesClassName, activeClassName: _stepper.propTypesClassName, completedClassName: _stepper.propTypesClassName, children: _stepper.propTypesChildren };
    Step.displayName = "MaterialTailwind.Step";
    var _default = Step;
  }
});

// node_modules/@material-tailwind/react/components/Stepper/index.js
var require_Stepper = __commonJS({
  "node_modules/@material-tailwind/react/components/Stepper/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function _export(target, all) {
      for (var name in all) Object.defineProperty(target, name, { enumerable: true, get: all[name] });
    }
    _export(exports, { Stepper: function() {
      return Stepper;
    }, Step: function() {
      return _step.default;
    }, default: function() {
      return _default;
    } });
    var _react = _interopRequireDefault(require_react());
    var _react1 = (init_floating_ui_react_esm(), __toCommonJS(floating_ui_react_esm_exports));
    var _tailwindMerge = require_dist();
    var _objectsToString = _interopRequireDefault(require_objectsToString());
    var _theme = require_theme2();
    var _step = _interopRequireDefault(require_Step());
    var _stepper = require_stepper();
    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length) len = arr.length;
      for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
      return arr2;
    }
    function _arrayWithHoles(arr) {
      if (Array.isArray(arr)) return arr;
    }
    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function _extends2() {
      _extends2 = Object.assign || function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends2.apply(this, arguments);
    }
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _iterableToArrayLimit(arr, i) {
      var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
      if (_i == null) return;
      var _arr = [];
      var _n = true;
      var _d = false;
      var _s, _e;
      try {
        for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);
          if (i && _arr.length === i) break;
        }
      } catch (err) {
        _d = true;
        _e = err;
      } finally {
        try {
          if (!_n && _i["return"] != null) _i["return"]();
        } finally {
          if (_d) throw _e;
        }
      }
      return _arr;
    }
    function _nonIterableRest() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys2 = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
          ownKeys2 = ownKeys2.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
            return Object.getOwnPropertyDescriptor(source, sym).enumerable;
          }));
        }
        ownKeys2.forEach(function(key) {
          _defineProperty(target, key, source[key]);
        });
      }
      return target;
    }
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
          symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          });
        }
        keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpreadProps(target, source) {
      source = source != null ? source : {};
      if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    function _objectWithoutProperties(source, excluded) {
      if (source == null) return {};
      var target = _objectWithoutPropertiesLoose(source, excluded);
      var key, i;
      if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for (i = 0; i < sourceSymbolKeys.length; i++) {
          key = sourceSymbolKeys[i];
          if (excluded.indexOf(key) >= 0) continue;
          if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
          target[key] = source[key];
        }
      }
      return target;
    }
    function _objectWithoutPropertiesLoose(source, excluded) {
      if (source == null) return {};
      var target = {};
      var sourceKeys = Object.keys(source);
      var key, i;
      for (i = 0; i < sourceKeys.length; i++) {
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
      }
      return target;
    }
    function _slicedToArray(arr, i) {
      return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
    }
    function _unsupportedIterableToArray(o, minLen) {
      if (!o) return;
      if (typeof o === "string") return _arrayLikeToArray(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if (n === "Object" && o.constructor) n = o.constructor.name;
      if (n === "Map" || n === "Set") return Array.from(n);
      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
    }
    var Stepper = _react.default.forwardRef(function(_param, ref) {
      var activeStep = _param.activeStep, isFirstStep = _param.isFirstStep, isLastStep = _param.isLastStep, className = _param.className, lineClassName = _param.lineClassName, activeLineClassName = _param.activeLineClassName, children = _param.children, rest = _objectWithoutProperties(_param, ["activeStep", "isFirstStep", "isLastStep", "className", "lineClassName", "activeLineClassName", "children"]);
      var _useTheme = (0, _theme.useTheme)(), stepper = _useTheme.stepper, step = _useTheme.step;
      var base = stepper.styles.base;
      var _step_styles = step.styles, stepBase = _step_styles.base;
      var containerRef = _react.default.useRef(null);
      var _React_useState = _slicedToArray(_react.default.useState(0), 2), widthPerStep = _React_useState[0], setWidthPerStep = _React_useState[1];
      var isFirstStepValue = activeStep === 0;
      var isLastStepValue = Array.isArray(children) && activeStep === children.length - 1;
      var isReachEnd = Array.isArray(children) && activeStep > children.length - 1;
      _react.default.useEffect(function() {
        if (containerRef.current) {
          var childrenInstance = children;
          var width2 = containerRef.current.getBoundingClientRect().width;
          var widthPerStepCalc = width2 / (childrenInstance.length - 1);
          setWidthPerStep(widthPerStepCalc);
        }
      }, [children]);
      var width = _react.default.useMemo(function() {
        if (!isReachEnd) {
          return widthPerStep * activeStep;
        }
      }, [activeStep, isReachEnd, widthPerStep]);
      var mergedRef = (0, _react1.useMergeRefs)([ref, containerRef]);
      var stepperClasses = (0, _tailwindMerge.twMerge)((0, _objectsToString.default)(base.stepper), className);
      var lineClasses = (0, _tailwindMerge.twMerge)((0, _objectsToString.default)(base.line.initial), lineClassName);
      var activeLineClasses = (0, _tailwindMerge.twMerge)(lineClasses, (0, _objectsToString.default)(base.line.active), activeLineClassName);
      var activeStepClasses = (0, _objectsToString.default)(stepBase.active);
      var completedStepClasses = (0, _objectsToString.default)(stepBase.completed);
      _react.default.useEffect(function() {
        isLastStep && typeof isLastStep === "function" && isLastStep(isLastStepValue);
        isFirstStep && typeof isFirstStep === "function" && isFirstStep(isFirstStepValue);
      }, [isFirstStep, isFirstStepValue, isLastStep, isLastStepValue]);
      return _react.default.createElement("div", _extends2({}, rest, { ref: containerRef, className: stepperClasses }), _react.default.createElement("div", { className: lineClasses }), _react.default.createElement("div", { className: activeLineClasses, style: { width: "".concat(width, "px") } }), Array.isArray(children) ? children.map(function(child, index3) {
        var _child_props, _child_props1;
        return _react.default.cloneElement(child, _objectSpreadProps(_objectSpread({ key: index3 }, child.props), { className: (0, _tailwindMerge.twMerge)(child.props.className, index3 === activeStep ? (0, _tailwindMerge.twMerge)(activeStepClasses, (_child_props = child.props) === null || _child_props === void 0 ? void 0 : _child_props.activeClassName) : index3 < activeStep ? (0, _tailwindMerge.twMerge)(completedStepClasses, (_child_props1 = child.props) === null || _child_props1 === void 0 ? void 0 : _child_props1.completedClassName) : "") }));
      }) : children);
    });
    Stepper.propTypes = { activeStep: _stepper.propTypesActiveStep, isFirstStep: _stepper.propTypesIsFirstStep, isLastStep: _stepper.propTypesIsLastStep, className: _stepper.propTypesClassName, lineClassName: _stepper.propTypesClassName, activeLineClassName: _stepper.propTypesClassName, children: _stepper.propTypesChildren };
    Stepper.displayName = "MaterialTailwind.Stepper";
    var _default = Object.assign(Stepper, { Step: _step.default });
  }
});

// node_modules/@material-tailwind/react/types/components/speedDial.js
var require_speedDial = __commonJS({
  "node_modules/@material-tailwind/react/types/components/speedDial.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function _export(target, all) {
      for (var name in all) Object.defineProperty(target, name, { enumerable: true, get: all[name] });
    }
    _export(exports, { propTypesOpen: function() {
      return propTypesOpen;
    }, propTypesHanlder: function() {
      return propTypesHanlder;
    }, propTypesPlacement: function() {
      return propTypesPlacement;
    }, propTypesOffset: function() {
      return propTypesOffset;
    }, propTypesDismiss: function() {
      return propTypesDismiss;
    }, propTypesChildren: function() {
      return propTypesChildren;
    }, propTypesAnimate: function() {
      return propTypesAnimate;
    }, propTypesClassName: function() {
      return propTypesClassName;
    } });
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _generic = require_generic();
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var propTypesOpen = _propTypes.default.bool;
    var propTypesHanlder = _propTypes.default.func;
    var propTypesPlacement = _propTypes.default.oneOf(_generic.propTypesPlacements);
    var propTypesOffset = _generic.propTypesOffsetType;
    var propTypesDismiss = _generic.propTypesDismissType;
    var propTypesChildren = _propTypes.default.node.isRequired;
    var propTypesAnimate = _generic.propTypesAnimation;
    var propTypesClassName = _propTypes.default.string;
  }
});

// node_modules/@material-tailwind/react/components/SpeedDial/SpeedDialHandler.js
var require_SpeedDialHandler = __commonJS({
  "node_modules/@material-tailwind/react/components/SpeedDial/SpeedDialHandler.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function _export(target, all) {
      for (var name in all) Object.defineProperty(target, name, { enumerable: true, get: all[name] });
    }
    _export(exports, { SpeedDialHandler: function() {
      return SpeedDialHandler;
    }, default: function() {
      return _default;
    } });
    var _react = _interopRequireDefault(require_react());
    var _react1 = (init_floating_ui_react_esm(), __toCommonJS(floating_ui_react_esm_exports));
    var _index = require_SpeedDial();
    var _tailwindMerge = require_dist();
    var _speedDial = require_speedDial();
    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys2 = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
          ownKeys2 = ownKeys2.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
            return Object.getOwnPropertyDescriptor(source, sym).enumerable;
          }));
        }
        ownKeys2.forEach(function(key) {
          _defineProperty(target, key, source[key]);
        });
      }
      return target;
    }
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
          symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          });
        }
        keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpreadProps(target, source) {
      source = source != null ? source : {};
      if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    function _objectWithoutProperties(source, excluded) {
      if (source == null) return {};
      var target = _objectWithoutPropertiesLoose(source, excluded);
      var key, i;
      if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for (i = 0; i < sourceSymbolKeys.length; i++) {
          key = sourceSymbolKeys[i];
          if (excluded.indexOf(key) >= 0) continue;
          if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
          target[key] = source[key];
        }
      }
      return target;
    }
    function _objectWithoutPropertiesLoose(source, excluded) {
      if (source == null) return {};
      var target = {};
      var sourceKeys = Object.keys(source);
      var key, i;
      for (i = 0; i < sourceKeys.length; i++) {
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
      }
      return target;
    }
    var SpeedDialHandler = _react.default.forwardRef(function(_param, ref) {
      var children = _param.children, rest = _objectWithoutProperties(_param, ["children"]);
      var _children_props;
      var _useSpeedDial = (0, _index.useSpeedDial)(), getReferenceProps = _useSpeedDial.getReferenceProps, refs = _useSpeedDial.refs;
      var mergedRef = (0, _react1.useMergeRefs)([ref, refs.setReference]);
      return _react.default.cloneElement(children, _objectSpread({}, getReferenceProps(_objectSpreadProps(_objectSpread({}, rest), { ref: mergedRef, className: (0, _tailwindMerge.twMerge)(children === null || children === void 0 ? void 0 : (_children_props = children.props) === null || _children_props === void 0 ? void 0 : _children_props.className, rest === null || rest === void 0 ? void 0 : rest.className) }))));
    });
    SpeedDialHandler.propTypes = { children: _speedDial.propTypesChildren };
    SpeedDialHandler.displayName = "MaterialTailwind.SpeedDialHandler";
    var _default = SpeedDialHandler;
  }
});

// node_modules/@material-tailwind/react/components/SpeedDial/SpeedDialContent.js
var require_SpeedDialContent = __commonJS({
  "node_modules/@material-tailwind/react/components/SpeedDial/SpeedDialContent.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function _export(target, all) {
      for (var name in all) Object.defineProperty(target, name, { enumerable: true, get: all[name] });
    }
    _export(exports, { SpeedDialContent: function() {
      return SpeedDialContent;
    }, default: function() {
      return _default;
    } });
    var _react = _interopRequireDefault(require_react());
    var _framerMotion = require_cjs2();
    var _react1 = (init_floating_ui_react_esm(), __toCommonJS(floating_ui_react_esm_exports));
    var _index = require_SpeedDial();
    var _theme = require_theme2();
    var _tailwindMerge = require_dist();
    var _objectsToString = _interopRequireDefault(require_objectsToString());
    var _speedDial = require_speedDial();
    function _extends2() {
      _extends2 = Object.assign || function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends2.apply(this, arguments);
    }
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _objectWithoutProperties(source, excluded) {
      if (source == null) return {};
      var target = _objectWithoutPropertiesLoose(source, excluded);
      var key, i;
      if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for (i = 0; i < sourceSymbolKeys.length; i++) {
          key = sourceSymbolKeys[i];
          if (excluded.indexOf(key) >= 0) continue;
          if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
          target[key] = source[key];
        }
      }
      return target;
    }
    function _objectWithoutPropertiesLoose(source, excluded) {
      if (source == null) return {};
      var target = {};
      var sourceKeys = Object.keys(source);
      var key, i;
      for (i = 0; i < sourceKeys.length; i++) {
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
      }
      return target;
    }
    var SpeedDialContent = _react.default.forwardRef(function(_param, ref) {
      var children = _param.children, className = _param.className, rest = _objectWithoutProperties(_param, ["children", "className"]);
      var _useTheme = (0, _theme.useTheme)(), styles = _useTheme.speedDialContent.styles;
      var _useSpeedDial = (0, _index.useSpeedDial)(), x = _useSpeedDial.x, y = _useSpeedDial.y, refs = _useSpeedDial.refs, open = _useSpeedDial.open, strategy = _useSpeedDial.strategy, getFloatingProps = _useSpeedDial.getFloatingProps, animation = _useSpeedDial.animation;
      var mergedRefs = (0, _react1.useMergeRefs)([ref, refs.setFloating]);
      var classes = (0, _tailwindMerge.twMerge)((0, _objectsToString.default)(styles), className);
      var NewAnimatePresence = _framerMotion.AnimatePresence;
      return _react.default.createElement(_framerMotion.LazyMotion, { features: _framerMotion.domAnimation }, _react.default.createElement(NewAnimatePresence, null, open && _react.default.createElement("div", _extends2({}, rest, { ref: mergedRefs, className: classes, style: { position: strategy, top: y !== null && y !== void 0 ? y : 0, left: x !== null && x !== void 0 ? x : 0 } }, getFloatingProps()), _react.default.Children.map(children, function(child) {
        return _react.default.createElement(_framerMotion.m.div, { initial: "unmount", exit: "unmount", animate: open ? "mount" : "unmount", variants: animation }, child);
      }))));
    });
    SpeedDialContent.propTypes = { children: _speedDial.propTypesChildren, className: _speedDial.propTypesClassName };
    SpeedDialContent.displayName = "MaterialTailwind.SpeedDialContent";
    var _default = SpeedDialContent;
  }
});

// node_modules/@material-tailwind/react/components/SpeedDial/SpeedDialAction.js
var require_SpeedDialAction = __commonJS({
  "node_modules/@material-tailwind/react/components/SpeedDial/SpeedDialAction.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function _export(target, all) {
      for (var name in all) Object.defineProperty(target, name, { enumerable: true, get: all[name] });
    }
    _export(exports, { SpeedDialAction: function() {
      return SpeedDialAction;
    }, default: function() {
      return _default;
    } });
    var _react = _interopRequireDefault(require_react());
    var _theme = require_theme2();
    var _tailwindMerge = require_dist();
    var _objectsToString = _interopRequireDefault(require_objectsToString());
    var _speedDial = require_speedDial();
    function _extends2() {
      _extends2 = Object.assign || function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends2.apply(this, arguments);
    }
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _objectWithoutProperties(source, excluded) {
      if (source == null) return {};
      var target = _objectWithoutPropertiesLoose(source, excluded);
      var key, i;
      if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for (i = 0; i < sourceSymbolKeys.length; i++) {
          key = sourceSymbolKeys[i];
          if (excluded.indexOf(key) >= 0) continue;
          if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
          target[key] = source[key];
        }
      }
      return target;
    }
    function _objectWithoutPropertiesLoose(source, excluded) {
      if (source == null) return {};
      var target = {};
      var sourceKeys = Object.keys(source);
      var key, i;
      for (i = 0; i < sourceKeys.length; i++) {
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
      }
      return target;
    }
    var SpeedDialAction = _react.default.forwardRef(function(_param, ref) {
      var className = _param.className, children = _param.children, rest = _objectWithoutProperties(_param, ["className", "children"]);
      var _useTheme = (0, _theme.useTheme)(), styles = _useTheme.speedDialAction.styles;
      var classes = (0, _tailwindMerge.twMerge)((0, _objectsToString.default)(styles), className);
      return _react.default.createElement("button", _extends2({}, rest, { ref, className: classes }), children);
    });
    SpeedDialAction.propTypes = { children: _speedDial.propTypesChildren, className: _speedDial.propTypesClassName };
    SpeedDialAction.displayName = "SpeedDialAction";
    var _default = SpeedDialAction;
  }
});

// node_modules/@material-tailwind/react/components/SpeedDial/index.js
var require_SpeedDial = __commonJS({
  "node_modules/@material-tailwind/react/components/SpeedDial/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function _export(target, all) {
      for (var name in all) Object.defineProperty(target, name, { enumerable: true, get: all[name] });
    }
    _export(exports, { SpeedDialContext: function() {
      return SpeedDialContext;
    }, useSpeedDial: function() {
      return useSpeedDial;
    }, SpeedDial: function() {
      return SpeedDial;
    }, SpeedDialHandler: function() {
      return _speedDialHandler.default;
    }, SpeedDialContent: function() {
      return _speedDialContent.default;
    }, SpeedDialAction: function() {
      return _speedDialAction.default;
    }, default: function() {
      return _default;
    } });
    var _react = _interopRequireDefault(require_react());
    var _react1 = (init_floating_ui_react_esm(), __toCommonJS(floating_ui_react_esm_exports));
    var _theme = require_theme2();
    var _deepmerge = _interopRequireDefault(require_cjs());
    var _speedDial = require_speedDial();
    var _speedDialHandler = _interopRequireDefault(require_SpeedDialHandler());
    var _speedDialContent = _interopRequireDefault(require_SpeedDialContent());
    var _speedDialAction = _interopRequireDefault(require_SpeedDialAction());
    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length) len = arr.length;
      for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
      return arr2;
    }
    function _arrayWithHoles(arr) {
      if (Array.isArray(arr)) return arr;
    }
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _iterableToArrayLimit(arr, i) {
      var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
      if (_i == null) return;
      var _arr = [];
      var _n = true;
      var _d = false;
      var _s, _e;
      try {
        for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);
          if (i && _arr.length === i) break;
        }
      } catch (err) {
        _d = true;
        _e = err;
      } finally {
        try {
          if (!_n && _i["return"] != null) _i["return"]();
        } finally {
          if (_d) throw _e;
        }
      }
      return _arr;
    }
    function _nonIterableRest() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _slicedToArray(arr, i) {
      return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
    }
    function _unsupportedIterableToArray(o, minLen) {
      if (!o) return;
      if (typeof o === "string") return _arrayLikeToArray(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if (n === "Object" && o.constructor) n = o.constructor.name;
      if (n === "Map" || n === "Set") return Array.from(n);
      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
    }
    var SpeedDialContext = _react.default.createContext(null);
    function useSpeedDial() {
      var context = _react.default.useContext(SpeedDialContext);
      if (!context) {
        throw new Error("useSpeedDial must be used within a <SpeedDial />.");
      }
      return context;
    }
    function SpeedDial(param) {
      var open = param.open, handler = param.handler, placement = param.placement, offset3 = param.offset, dismiss = param.dismiss, animate = param.animate, children = param.children;
      var _useTheme = (0, _theme.useTheme)(), defaultProps = _useTheme.speedDial.defaultProps;
      var _React_useState = _slicedToArray(_react.default.useState(false), 2), internalOpen = _React_useState[0], setInternalOpen = _React_useState[1];
      open = open !== null && open !== void 0 ? open : internalOpen;
      handler = handler !== null && handler !== void 0 ? handler : setInternalOpen;
      placement = placement !== null && placement !== void 0 ? placement : defaultProps.placement;
      offset3 = offset3 !== null && offset3 !== void 0 ? offset3 : defaultProps.offset;
      dismiss = dismiss !== null && dismiss !== void 0 ? dismiss : defaultProps.dismiss;
      animate = animate !== null && animate !== void 0 ? animate : defaultProps.animate;
      var animation = { unmount: { opacity: 0, transform: "scale(0.5)", transition: { duration: 0.2, times: [0.4, 0, 0.2, 1] } }, mount: { opacity: 1, transform: "scale(1)", transition: { duration: 0.2, times: [0.4, 0, 0.2, 1] } } };
      var appliedAnimation = (0, _deepmerge.default)(animation, animate);
      var nodeId = (0, _react1.useFloatingNodeId)();
      var _useFloating = (0, _react1.useFloating)({ open, nodeId, placement, onOpenChange: handler, whileElementsMounted: _react1.autoUpdate, middleware: [(0, _react1.offset)(offset3), (0, _react1.flip)(), (0, _react1.shift)()] }), x = _useFloating.x, y = _useFloating.y, strategy = _useFloating.strategy, refs = _useFloating.refs, context = _useFloating.context;
      var _useInteractions = (0, _react1.useInteractions)([(0, _react1.useHover)(context, { handleClose: (0, _react1.safePolygon)() }), (0, _react1.useDismiss)(context, dismiss)]), getReferenceProps = _useInteractions.getReferenceProps, getFloatingProps = _useInteractions.getFloatingProps;
      var contextValue = _react.default.useMemo(function() {
        return { x, y, strategy, refs, open, context, getReferenceProps, getFloatingProps, animation: appliedAnimation };
      }, [context, getFloatingProps, getReferenceProps, refs, strategy, x, y, open, appliedAnimation]);
      return _react.default.createElement(SpeedDialContext.Provider, { value: contextValue }, _react.default.createElement("div", { className: "group" }, _react.default.createElement(_react1.FloatingNode, { id: nodeId }, children)));
    }
    SpeedDial.propTypes = { open: _speedDial.propTypesOpen, handler: _speedDial.propTypesHanlder, placement: _speedDial.propTypesPlacement, offset: _speedDial.propTypesOffset, dismiss: _speedDial.propTypesDismiss, className: _speedDial.propTypesClassName, children: _speedDial.propTypesChildren, animate: _speedDial.propTypesAnimate };
    SpeedDial.displayName = "MaterialTailwind.SpeedDial";
    var _default = Object.assign(SpeedDial, { Handler: _speedDialHandler.default, Content: _speedDialContent.default, Action: _speedDialAction.default });
  }
});

// node_modules/@material-tailwind/react/index.js
var require_react2 = __commonJS({
  "node_modules/@material-tailwind/react/index.js"(exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    _exportStar(require_Accordion(), exports);
    _exportStar(require_Alert(), exports);
    _exportStar(require_Avatar(), exports);
    _exportStar(require_Breadcrumbs(), exports);
    _exportStar(require_Button(), exports);
    _exportStar(require_Card(), exports);
    _exportStar(require_Checkbox(), exports);
    _exportStar(require_Chip(), exports);
    _exportStar(require_Dialog(), exports);
    _exportStar(require_IconButton(), exports);
    _exportStar(require_Input(), exports);
    _exportStar(require_Menu(), exports);
    _exportStar(require_Navbar(), exports);
    _exportStar(require_Popover(), exports);
    _exportStar(require_Progress(), exports);
    _exportStar(require_Radio(), exports);
    _exportStar(require_Select(), exports);
    _exportStar(require_Switch(), exports);
    _exportStar(require_Tabs(), exports);
    _exportStar(require_Textarea(), exports);
    _exportStar(require_Tooltip(), exports);
    _exportStar(require_Typography(), exports);
    _exportStar(require_Collapse(), exports);
    _exportStar(require_List(), exports);
    _exportStar(require_ButtonGroup(), exports);
    _exportStar(require_Carousel(), exports);
    _exportStar(require_Drawer(), exports);
    _exportStar(require_Badge(), exports);
    _exportStar(require_Rating(), exports);
    _exportStar(require_Slider(), exports);
    _exportStar(require_Spinner(), exports);
    _exportStar(require_Timeline(), exports);
    _exportStar(require_Stepper(), exports);
    _exportStar(require_SpeedDial(), exports);
    _exportStar(require_theme2(), exports);
    _exportStar(require_theme(), exports);
    function _exportStar(from, to) {
      Object.keys(from).forEach(function(k) {
        if (k !== "default" && !Object.prototype.hasOwnProperty.call(to, k)) Object.defineProperty(to, k, { enumerable: true, get: function() {
          return from[k];
        } });
      });
      return from;
    }
  }
});
export default require_react2();
/*! Bundled license information:

tabbable/dist/index.esm.js:
  (*!
  * tabbable 6.2.0
  * @license MIT, https://github.com/focus-trap/tabbable/blob/master/LICENSE
  *)
*/
//# sourceMappingURL=@material-tailwind_react.js.map
